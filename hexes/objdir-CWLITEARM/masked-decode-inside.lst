   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"masked-decode-inside.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.set_diff,"ax",%progbits
  16              		.align	1
  17              		.global	set_diff
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	set_diff:
  25              	.LVL0:
  26              	.LFB8:
  27              		.file 1 "masked-decode-inside.c"
   1:masked-decode-inside.c **** /*
   2:masked-decode-inside.c ****  * File:    bch3.c
   3:masked-decode-inside.c ****  * Title:   Encoder/decoder for binary BCH codes in C (Version 3.1)
   4:masked-decode-inside.c ****  * Author:  Robert Morelos-Zaragoza
   5:masked-decode-inside.c ****  * Date:    August 1994
   6:masked-decode-inside.c ****  * Revised: June 13, 1997
   7:masked-decode-inside.c ****  *
   8:masked-decode-inside.c ****  * ===============  Encoder/Decoder for binary BCH codes in C =================
   9:masked-decode-inside.c ****  *
  10:masked-decode-inside.c ****  * Version 1:   Original program. The user provides the generator polynomial
  11:masked-decode-inside.c ****  *              of the code (cumbersome!).
  12:masked-decode-inside.c ****  * Version 2:   Computes the generator polynomial of the code.
  13:masked-decode-inside.c ****  * Version 3:   No need to input the coefficients of a primitive polynomial of
  14:masked-decode-inside.c ****  *              degree m, used to construct the Galois Field GF(2**m). The
  15:masked-decode-inside.c ****  *              program now works for any binary BCH code of length such that:
  16:masked-decode-inside.c ****  *              2**(m-1) - 1 < length <= 2**m - 1
  17:masked-decode-inside.c ****  *
  18:masked-decode-inside.c ****  * Note:        You may have to change the size of the arrays to make it work.
  19:masked-decode-inside.c ****  *
  20:masked-decode-inside.c ****  * The encoding and decoding methods used in this program are based on the
  21:masked-decode-inside.c ****  * book "Error Control Coding: Fundamentals and Applications", by Lin and
  22:masked-decode-inside.c ****  * Costello, Prentice Hall, 1983.
  23:masked-decode-inside.c ****  *
  24:masked-decode-inside.c ****  * Thanks to Patrick Boyle (pboyle@era.com) for his observation that 'bch2.c'
  25:masked-decode-inside.c ****  * did not work for lengths other than 2**m-1 which led to this new version.
  26:masked-decode-inside.c ****  * Portions of this program are from 'rs.c', a Reed-Solomon encoder/decoder
  27:masked-decode-inside.c ****  * in C, written by Simon Rockliff (simon@augean.ua.oz.au) on 21/9/89. The
  28:masked-decode-inside.c ****  * previous version of the BCH encoder/decoder in C, 'bch2.c', was written by
  29:masked-decode-inside.c ****  * Robert Morelos-Zaragoza (robert@spectra.eng.hawaii.edu) on 5/19/92.
  30:masked-decode-inside.c ****  *
  31:masked-decode-inside.c ****  * NOTE:    
  32:masked-decode-inside.c ****  *          The author is not responsible for any malfunctioning of
  33:masked-decode-inside.c ****  *          this program, nor for any damage caused by it. Please include the
  34:masked-decode-inside.c ****  *          original program along with these comments in any redistribution.
  35:masked-decode-inside.c ****  *
  36:masked-decode-inside.c ****  *  For more information, suggestions, or other ideas on implementing error
  37:masked-decode-inside.c ****  *  correcting codes, please contact me at:
  38:masked-decode-inside.c ****  *
  39:masked-decode-inside.c ****  *                           Robert Morelos-Zaragoza
  40:masked-decode-inside.c ****  *                           5120 Woodway, Suite 7036
  41:masked-decode-inside.c ****  *                           Houston, Texas 77056
  42:masked-decode-inside.c ****  *
  43:masked-decode-inside.c ****  *                    email: r.morelos-zaragoza@ieee.org
  44:masked-decode-inside.c ****  *
  45:masked-decode-inside.c ****  * COPYRIGHT NOTICE: This computer program is free for non-commercial purposes.
  46:masked-decode-inside.c ****  * You may implement this program for any non-commercial application. You may 
  47:masked-decode-inside.c ****  * also implement this program for commercial purposes, provided that you
  48:masked-decode-inside.c ****  * obtain my written permission. Any modification of this program is covered
  49:masked-decode-inside.c ****  * by this copyright.
  50:masked-decode-inside.c ****  *
  51:masked-decode-inside.c ****  * == Copyright (c) 1994-7,  Robert Morelos-Zaragoza. All rights reserved.  ==
  52:masked-decode-inside.c ****  *
  53:masked-decode-inside.c ****  * m = order of the Galois field GF(2**m) 
  54:masked-decode-inside.c ****  * n = 2**m - 1 = size of the multiplicative group of GF(2**m)
  55:masked-decode-inside.c ****  * length = length of the BCH code
  56:masked-decode-inside.c ****  * t = error correcting capability (max. no. of errors the code corrects)
  57:masked-decode-inside.c ****  * d = 2*t + 1 = designed min. distance = no. of consecutive roots of g(x) + 1
  58:masked-decode-inside.c ****  * k = n - deg(g(x)) = dimension (no. of information bits/codeword) of the code
  59:masked-decode-inside.c ****  * p[] = coefficients of a primitive polynomial used to generate GF(2**m)
  60:masked-decode-inside.c ****  * g[] = coefficients of the generator polynomial, g(x)
  61:masked-decode-inside.c ****  * alpha_to [] = log table of GF(2**m) 
  62:masked-decode-inside.c ****  * index_of[] = antilog table of GF(2**m)
  63:masked-decode-inside.c ****  * data[] = information bits = coefficients of data polynomial, i(x)
  64:masked-decode-inside.c ****  * bb[] = coefficients of redundancy polynomial x^(length-k) i(x) modulo g(x)
  65:masked-decode-inside.c ****  * numerr = number of errors 
  66:masked-decode-inside.c ****  * errpos[] = error positions 
  67:masked-decode-inside.c ****  * recd[] = coefficients of the received polynomial 
  68:masked-decode-inside.c ****  * decerror = number of decoding errors (in _message_ positions) 
  69:masked-decode-inside.c ****  *
  70:masked-decode-inside.c ****  */
  71:masked-decode-inside.c **** 
  72:masked-decode-inside.c **** #include <math.h>
  73:masked-decode-inside.c **** #include <stdio.h>
  74:masked-decode-inside.c **** #define noop (void)0
  75:masked-decode-inside.c **** #define SIZE 131
  76:masked-decode-inside.c **** #define SIZE2 22
  77:masked-decode-inside.c **** #include "aes-independant.h"
  78:masked-decode-inside.c **** #include "hal.h"
  79:masked-decode-inside.c **** #include "simpleserial.h"
  80:masked-decode-inside.c **** #include <stdint.h>
  81:masked-decode-inside.c **** #include <stdlib.h>
  82:masked-decode-inside.c **** #define M 7
  83:masked-decode-inside.c **** // false or true
  84:masked-decode-inside.c **** #define THROWS 1 
  85:masked-decode-inside.c **** 
  86:masked-decode-inside.c **** #define LEN 127
  87:masked-decode-inside.c **** #define EFFORT 10
  88:masked-decode-inside.c **** uint8_t             m, n, length, k, t, d;
  89:masked-decode-inside.c **** uint8_t             p[14];
  90:masked-decode-inside.c **** uint8_t             alpha_to[SIZE];
  91:masked-decode-inside.c **** int8_t index_of[SIZE];
  92:masked-decode-inside.c **** uint8_t g[SIZE];
  93:masked-decode-inside.c **** uint8_t             recd[SIZE], data[SIZE], bb[SIZE];
  94:masked-decode-inside.c **** int             seed;
  95:masked-decode-inside.c **** uint8_t             numerr, errpos[SIZE], decerror = 0;
  96:masked-decode-inside.c **** uint8_t mem[20];
  97:masked-decode-inside.c **** 
  98:masked-decode-inside.c **** 
  99:masked-decode-inside.c **** void 
 100:masked-decode-inside.c **** read_p()
 101:masked-decode-inside.c **** /*
 102:masked-decode-inside.c ****  *	Read m, the degree of a primitive polynomial p(x) used to compute the
 103:masked-decode-inside.c ****  *	Galois field GF(2**m). Get precomputed coefficients p[] of p(x). Read
 104:masked-decode-inside.c ****  *	the code length.
 105:masked-decode-inside.c ****  */
 106:masked-decode-inside.c **** {
 107:masked-decode-inside.c **** 	uint8_t			i, ninf;
 108:masked-decode-inside.c **** 
 109:masked-decode-inside.c ****     m=M;
 110:masked-decode-inside.c ****      if ( !(m>1) || !(m<21) ) exit(0);
 111:masked-decode-inside.c **** 	for (i=1; i<m; i++)
 112:masked-decode-inside.c **** 		p[i] = 0;
 113:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 114:masked-decode-inside.c **** 	if (m == 2)			p[1] = 1;
 115:masked-decode-inside.c **** 	else if (m == 3)	p[1] = 1;
 116:masked-decode-inside.c **** 	else if (m == 4)	p[1] = 1;
 117:masked-decode-inside.c **** 	else if (m == 5)	p[2] = 1;
 118:masked-decode-inside.c **** 	else if (m == 6)	p[1] = 1;
 119:masked-decode-inside.c **** 	else if (m == 7)	p[1] = 1;
 120:masked-decode-inside.c **** 	else if (m == 8)	p[4] = p[5] = p[6] = 1;
 121:masked-decode-inside.c **** 	else if (m == 9)	p[4] = 1;
 122:masked-decode-inside.c **** 	else if (m == 10)	p[3] = 1;
 123:masked-decode-inside.c ****     n = 1;
 124:masked-decode-inside.c **** 	for (i = 0; i < m; i++) {
 125:masked-decode-inside.c ****         n *= 2;
 126:masked-decode-inside.c ****         }
 127:masked-decode-inside.c **** 	n = n - 1;
 128:masked-decode-inside.c **** 	ninf = (n + 1) / 2 - 1;
 129:masked-decode-inside.c **** 	length = LEN;
 130:masked-decode-inside.c ****     // pt[13]=n;
 131:masked-decode-inside.c ****     // pt[14]=length;
 132:masked-decode-inside.c ****     // pt[15]=ninf;
 133:masked-decode-inside.c **** 	if( !((length <= n)&&(length>ninf)) ) exit(0);
 134:masked-decode-inside.c **** }
 135:masked-decode-inside.c **** 
 136:masked-decode-inside.c **** 
 137:masked-decode-inside.c **** void 
 138:masked-decode-inside.c **** generate_gf()
 139:masked-decode-inside.c **** /*
 140:masked-decode-inside.c ****  * Generate field GF(2**m) from the irreducible polynomial p(X) with
 141:masked-decode-inside.c ****  * coefficients in p[0]..p[m].
 142:masked-decode-inside.c ****  *
 143:masked-decode-inside.c ****  * Lookup tables:
 144:masked-decode-inside.c ****  *   index->polynomial form: alpha_to[] contains j=alpha^i;
 145:masked-decode-inside.c ****  *   polynomial form -> index form:	index_of[j=alpha^i] = i
 146:masked-decode-inside.c ****  *
 147:masked-decode-inside.c ****  * alpha=2 is the primitive element of GF(2**m) 
 148:masked-decode-inside.c ****  */
 149:masked-decode-inside.c **** {
 150:masked-decode-inside.c **** 	register uint8_t    i, mask;
 151:masked-decode-inside.c **** 
 152:masked-decode-inside.c **** 	mask = 1;
 153:masked-decode-inside.c **** 	alpha_to[m] = 0;
 154:masked-decode-inside.c **** 	for (i = 0; i < m; i++) {
 155:masked-decode-inside.c **** 		alpha_to[i] = mask;
 156:masked-decode-inside.c **** 		index_of[alpha_to[i]] = i;
 157:masked-decode-inside.c **** 		if (p[i] != 0)
 158:masked-decode-inside.c **** 			alpha_to[m] ^= mask;
 159:masked-decode-inside.c **** 		mask <<= 1;
 160:masked-decode-inside.c **** 	}
 161:masked-decode-inside.c **** 	index_of[alpha_to[m]] = m;
 162:masked-decode-inside.c **** 	mask >>= 1;
 163:masked-decode-inside.c **** 	for (i = m + 1; i < n; i++) {
 164:masked-decode-inside.c **** 		if (alpha_to[i - 1] >= mask)
 165:masked-decode-inside.c **** 		  alpha_to[i] = alpha_to[m] ^ ((alpha_to[i - 1] ^ mask) << 1);
 166:masked-decode-inside.c **** 		else
 167:masked-decode-inside.c **** 		  alpha_to[i] = alpha_to[i - 1] << 1;
 168:masked-decode-inside.c **** 		index_of[alpha_to[i]] = i;
 169:masked-decode-inside.c **** 	}
 170:masked-decode-inside.c **** 	index_of[0] = -1;
 171:masked-decode-inside.c **** }
 172:masked-decode-inside.c **** 
 173:masked-decode-inside.c **** 
 174:masked-decode-inside.c **** void 
 175:masked-decode-inside.c **** gen_poly()
 176:masked-decode-inside.c **** /*
 177:masked-decode-inside.c ****  * Compute the generator polynomial of a binary BCH code. Fist generate the
 178:masked-decode-inside.c ****  * cycle sets modulo 2**m - 1, cycle[][] =  (i, 2*i, 4*i, ..., 2^l*i). Then
 179:masked-decode-inside.c ****  * determine those cycle sets that contain integers in the set of (d-1)
 180:masked-decode-inside.c ****  * consecutive integers {1..(d-1)}. The generator polynomial is calculated
 181:masked-decode-inside.c ****  * as the product of linear factors of the form (x+alpha^i), for every i in
 182:masked-decode-inside.c ****  * the above cycle sets.
 183:masked-decode-inside.c ****  */
 184:masked-decode-inside.c **** {
 185:masked-decode-inside.c **** 	register uint8_t	ii, jj, ll, kaux;
 186:masked-decode-inside.c **** 	register uint8_t	test, aux, nocycles, root, noterms, rdncy;
 187:masked-decode-inside.c **** 	uint8_t             cycle[SIZE][11], size[SIZE], min[SIZE], zeros[SIZE];
 188:masked-decode-inside.c **** 
 189:masked-decode-inside.c **** 	/* Generate cycle sets modulo n, n = 2**m - 1 */
 190:masked-decode-inside.c **** 	cycle[0][0] = 0;
 191:masked-decode-inside.c **** 	size[0] = 1;
 192:masked-decode-inside.c **** 	cycle[1][0] = 1;
 193:masked-decode-inside.c **** 	size[1] = 1;
 194:masked-decode-inside.c **** 	jj = 1;			/* cycle set index */
 195:masked-decode-inside.c **** 	do {
 196:masked-decode-inside.c **** 		/* Generate the jj-th cycle set */
 197:masked-decode-inside.c **** 		ii = 0;
 198:masked-decode-inside.c **** 		do {
 199:masked-decode-inside.c **** 			ii++;
 200:masked-decode-inside.c **** 			cycle[jj][ii] = (cycle[jj][ii - 1] * 2) % n;
 201:masked-decode-inside.c **** 			size[jj]++;
 202:masked-decode-inside.c **** 			aux = (cycle[jj][ii] * 2) % n;
 203:masked-decode-inside.c **** 		} while (aux != cycle[jj][0]);
 204:masked-decode-inside.c **** 		/* Next cycle set representative */
 205:masked-decode-inside.c **** 		ll = 0;
 206:masked-decode-inside.c **** 		do {
 207:masked-decode-inside.c **** 			ll++;
 208:masked-decode-inside.c **** 			test = 0;
 209:masked-decode-inside.c **** 			for (ii = 1; ((ii <= jj) && (!test)); ii++)	
 210:masked-decode-inside.c **** 			/* Examine previous cycle sets */
 211:masked-decode-inside.c **** 			  for (kaux = 0; ((kaux < size[ii]) && (!test)); kaux++)
 212:masked-decode-inside.c **** 			     if (ll == cycle[ii][kaux])
 213:masked-decode-inside.c **** 			        test = 1;
 214:masked-decode-inside.c **** 		} while ((test) && (ll < (n - 1)));
 215:masked-decode-inside.c **** 		if (!(test)) {
 216:masked-decode-inside.c **** 			jj++;	/* next cycle set index */
 217:masked-decode-inside.c **** 			cycle[jj][0] = ll;
 218:masked-decode-inside.c **** 			size[jj] = 1;
 219:masked-decode-inside.c **** 		}
 220:masked-decode-inside.c **** 	} while (ll < (n - 1));
 221:masked-decode-inside.c **** 	nocycles = jj;		/* number of cycle sets modulo n */
 222:masked-decode-inside.c **** 
 223:masked-decode-inside.c ****     t = EFFORT;
 224:masked-decode-inside.c **** 	d = 2 * t + 1;
 225:masked-decode-inside.c **** 
 226:masked-decode-inside.c **** 	/* Search for roots 1, 2, ..., d-1 in cycle sets */
 227:masked-decode-inside.c **** 	kaux = 0;
 228:masked-decode-inside.c **** 	rdncy = 0;
 229:masked-decode-inside.c **** 	for (ii = 1; ii <= nocycles; ii++) {
 230:masked-decode-inside.c **** 		min[kaux] = 0;
 231:masked-decode-inside.c **** 		test = 0;
 232:masked-decode-inside.c **** 		for (jj = 0; ((jj < size[ii]) && (!test)); jj++)
 233:masked-decode-inside.c **** 			for (root = 1; ((root < d) && (!test)); root++)
 234:masked-decode-inside.c **** 				if (root == cycle[ii][jj])  {
 235:masked-decode-inside.c **** 					test = 1;
 236:masked-decode-inside.c **** 					min[kaux] = ii;
 237:masked-decode-inside.c **** 				}
 238:masked-decode-inside.c **** 		if (min[kaux]) {
 239:masked-decode-inside.c **** 			rdncy += size[min[kaux]];
 240:masked-decode-inside.c **** 			kaux++;
 241:masked-decode-inside.c **** 		}
 242:masked-decode-inside.c **** 	}
 243:masked-decode-inside.c **** 	noterms = kaux;
 244:masked-decode-inside.c **** 	kaux = 1;
 245:masked-decode-inside.c **** 	for (ii = 0; ii < noterms; ii++)
 246:masked-decode-inside.c **** 		for (jj = 0; jj < size[min[ii]]; jj++) {
 247:masked-decode-inside.c **** 			zeros[kaux] = cycle[min[ii]][jj];
 248:masked-decode-inside.c **** 			kaux++;
 249:masked-decode-inside.c **** 		}
 250:masked-decode-inside.c **** 
 251:masked-decode-inside.c **** 	k = length - rdncy;
 252:masked-decode-inside.c **** 
 253:masked-decode-inside.c ****     if (k<0)
 254:masked-decode-inside.c ****       {
 255:masked-decode-inside.c ****          exit(0);
 256:masked-decode-inside.c ****       }
 257:masked-decode-inside.c **** 
 258:masked-decode-inside.c **** 	//("This is a (%d, %d, %d) binary BCH code\n", length, k, d);
 259:masked-decode-inside.c **** 
 260:masked-decode-inside.c **** 	/* Compute the generator polynomial */
 261:masked-decode-inside.c **** 	g[0] = alpha_to[zeros[1]];
 262:masked-decode-inside.c **** 	g[1] = 1;		/* g(x) = (X + zeros[1]) initially */
 263:masked-decode-inside.c **** 	for (ii = 2; ii <= rdncy; ii++) {
 264:masked-decode-inside.c **** 	  g[ii] = 1;
 265:masked-decode-inside.c **** 	  for (jj = ii - 1; jj > 0; jj--)
 266:masked-decode-inside.c **** 	    if (g[jj] != 0)
 267:masked-decode-inside.c **** 	      g[jj] = g[jj - 1] ^ alpha_to[(index_of[g[jj]] + zeros[ii]) % n];
 268:masked-decode-inside.c **** 	    else
 269:masked-decode-inside.c **** 	      g[jj] = g[jj - 1];
 270:masked-decode-inside.c **** 	  g[0] = alpha_to[(index_of[g[0]] + zeros[ii]) % n];
 271:masked-decode-inside.c **** 	}
 272:masked-decode-inside.c **** }
 273:masked-decode-inside.c **** 
 274:masked-decode-inside.c **** 
 275:masked-decode-inside.c **** void 
 276:masked-decode-inside.c **** encode_bch()
 277:masked-decode-inside.c **** /*
 278:masked-decode-inside.c ****  * Compute redundacy bb[], the coefficients of b(x). The redundancy
 279:masked-decode-inside.c ****  * polynomial b(x) is the remainder after dividing x^(length-k)*data(x)
 280:masked-decode-inside.c ****  * by the generator polynomial g(x).
 281:masked-decode-inside.c ****  */
 282:masked-decode-inside.c **** {
 283:masked-decode-inside.c **** 	register int    i, j;
 284:masked-decode-inside.c **** 	register int    feedback;
 285:masked-decode-inside.c **** 
 286:masked-decode-inside.c **** 	for (i = 0; i < length - k; i++)
 287:masked-decode-inside.c **** 		bb[i] = 0;
 288:masked-decode-inside.c **** 	for (i = k - 1; i >= 0; i--) {
 289:masked-decode-inside.c **** 		feedback = data[i] ^ bb[length - k - 1];
 290:masked-decode-inside.c **** 		if (feedback != 0) {
 291:masked-decode-inside.c **** 			for (j = length - k - 1; j > 0; j--)
 292:masked-decode-inside.c **** 				if (g[j] != 0)
 293:masked-decode-inside.c **** 					bb[j] = bb[j - 1] ^ feedback;
 294:masked-decode-inside.c **** 				else
 295:masked-decode-inside.c **** 					bb[j] = bb[j - 1];
 296:masked-decode-inside.c **** 			bb[0] = g[0] && feedback;
 297:masked-decode-inside.c **** 		} else {
 298:masked-decode-inside.c **** 			for (j = length - k - 1; j > 0; j--)
 299:masked-decode-inside.c **** 				bb[j] = bb[j - 1];
 300:masked-decode-inside.c **** 			bb[0] = 0;
 301:masked-decode-inside.c **** 		}
 302:masked-decode-inside.c **** 	}
 303:masked-decode-inside.c **** }
 304:masked-decode-inside.c **** 
 305:masked-decode-inside.c **** 
 306:masked-decode-inside.c **** int8_t 
 307:masked-decode-inside.c **** pompom()
 308:masked-decode-inside.c **** /*
 309:masked-decode-inside.c ****  * Simon Rockliff's implementation of Berlekamp's algorithm.
 310:masked-decode-inside.c ****  *
 311:masked-decode-inside.c ****  * Assume we have received bits in recd[i], i=0..(n-1).
 312:masked-decode-inside.c ****  *
 313:masked-decode-inside.c ****  * Compute the 2*t syndromes by substituting alpha^i into rec(X) and
 314:masked-decode-inside.c ****  * evaluating, storing the syndromes in s[i], i=1..2t (leave s[0] zero) .
 315:masked-decode-inside.c ****  * Then we use the Berlekamp algorithm to find the error location polynomial
 316:masked-decode-inside.c ****  * elp[i].
 317:masked-decode-inside.c ****  *
 318:masked-decode-inside.c ****  * If the degree of the elp is >t, then we cannot correct all the errors, and
 319:masked-decode-inside.c ****  * we have detected an uncorrectable error pattern. We output the information
 320:masked-decode-inside.c ****  * bits uncorrected.
 321:masked-decode-inside.c ****  *
 322:masked-decode-inside.c ****  * If the degree of elp is <=t, we substitute alpha^i , i=1..n into the elp
 323:masked-decode-inside.c ****  * to get the roots, hence the inverse roots, the error location numbers.
 324:masked-decode-inside.c ****  * This step is usually called "Chien's search".
 325:masked-decode-inside.c ****  *
 326:masked-decode-inside.c ****  * If the number of errors located is not equal the degree of the elp, then
 327:masked-decode-inside.c ****  * the decoder assumes that there are more than t errors and cannot correct
 328:masked-decode-inside.c ****  * them, only detect them. We output the information bits uncorrected.
 329:masked-decode-inside.c ****  */
 330:masked-decode-inside.c **** {
 331:masked-decode-inside.c **** 	register uint8_t    i, j, u, q, t2, count = 0, syn_error = 0;
 332:masked-decode-inside.c **** 	int8_t             elp[SIZE2][SIZE2], d[SIZE], l[SIZE], u_lu[SIZE], s[SIZE];
 333:masked-decode-inside.c **** 	uint8_t             loc[SIZE], err[SIZE], reg[SIZE];
 334:masked-decode-inside.c **** 	t2 = 2 * t;
 335:masked-decode-inside.c **** 
 336:masked-decode-inside.c **** 	/* first form the syndromes */
 337:masked-decode-inside.c **** 	for (i = 1; i <= t2; i++) {
 338:masked-decode-inside.c **** 		s[i] = 0;
 339:masked-decode-inside.c **** 		for (j = 0; j < length; j++) {
 340:masked-decode-inside.c **** 			s[i] ^= recd[j] * alpha_to[(i * j) % n];
 341:masked-decode-inside.c ****         }
 342:masked-decode-inside.c **** 		syn_error = syn_error | (s[i] != 0); /* set error flag if non-zero syndrome */
 343:masked-decode-inside.c **** /*
 344:masked-decode-inside.c ****  * Note:    If the code is used only for ERROR DETECTION, then
 345:masked-decode-inside.c ****  *          exit program here indicating the presence of errors.
 346:masked-decode-inside.c ****  */
 347:masked-decode-inside.c **** 		/* convert syndrome from polynomial form to index form  */
 348:masked-decode-inside.c **** 		s[i] = index_of[s[i]];
 349:masked-decode-inside.c **** 	}
 350:masked-decode-inside.c **** 
 351:masked-decode-inside.c **** 	if (syn_error) {	/* if there are errors, try to correct them */
 352:masked-decode-inside.c **** 		/*
 353:masked-decode-inside.c **** 		 * Compute the error location polynomial via the Berlekamp
 354:masked-decode-inside.c **** 		 * iterative algorithm. Following the terminology of Lin and
 355:masked-decode-inside.c **** 		 * Costello's book :   d[u] is the 'mu'th discrepancy, where
 356:masked-decode-inside.c **** 		 * u='mu'+1 and 'mu' (the Greek letter!) is the step number
 357:masked-decode-inside.c **** 		 * ranging from -1 to 2*t (see L&C),  l[u] is the degree of
 358:masked-decode-inside.c **** 		 * the elp at that step, and u_l[u] is the difference between
 359:masked-decode-inside.c **** 		 * the step number and the degree of the elp. 
 360:masked-decode-inside.c **** 		 */
 361:masked-decode-inside.c **** 		/* initialise table entries */
 362:masked-decode-inside.c **** 		d[0] = 0;			/* index form */
 363:masked-decode-inside.c **** 		d[1] = s[1];		/* index form */
 364:masked-decode-inside.c **** 		elp[0][0] = 0;		/* index form */
 365:masked-decode-inside.c **** 		elp[1][0] = 1;		/* polynomial form */
 366:masked-decode-inside.c **** 		for (i = 1; i < t2; i++) {
 367:masked-decode-inside.c **** 			elp[0][i] = -1;	/* index form */
 368:masked-decode-inside.c **** 			elp[1][i] = 0;	/* polynomial form */
 369:masked-decode-inside.c **** 		}
 370:masked-decode-inside.c **** 		l[0] = 0;
 371:masked-decode-inside.c **** 		l[1] = 0;
 372:masked-decode-inside.c **** 		u_lu[0] = -1;
 373:masked-decode-inside.c **** 		u_lu[1] = 0;
 374:masked-decode-inside.c **** 		u = 0;
 375:masked-decode-inside.c ****  
 376:masked-decode-inside.c **** 		do {
 377:masked-decode-inside.c **** 			u++;
 378:masked-decode-inside.c **** 			if (d[u] == -1) {
 379:masked-decode-inside.c **** 				l[u + 1] = l[u];
 380:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 381:masked-decode-inside.c **** 					elp[u + 1][i] = elp[u][i];
 382:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 383:masked-decode-inside.c **** 				}
 384:masked-decode-inside.c **** 			} else
 385:masked-decode-inside.c **** 				/*
 386:masked-decode-inside.c **** 				 * search for words with greatest u_lu[q] for
 387:masked-decode-inside.c **** 				 * which d[q]!=0 
 388:masked-decode-inside.c **** 				 */
 389:masked-decode-inside.c **** 			{
 390:masked-decode-inside.c **** 				q = u - 1;
 391:masked-decode-inside.c **** 				while ((d[q] == -1) && (q > 0))
 392:masked-decode-inside.c **** 					q--;
 393:masked-decode-inside.c **** 				/* have found first non-zero d[q]  */
 394:masked-decode-inside.c **** 				if (q > 0) {
 395:masked-decode-inside.c **** 				  j = q;
 396:masked-decode-inside.c **** 				  do {
 397:masked-decode-inside.c **** 				    j--;
 398:masked-decode-inside.c **** 				    if ((d[j] != -1) && (u_lu[q] < u_lu[j]))
 399:masked-decode-inside.c **** 				      q = j;
 400:masked-decode-inside.c **** 				  } while (j > 0);
 401:masked-decode-inside.c **** 				}
 402:masked-decode-inside.c ****  
 403:masked-decode-inside.c **** 				/*
 404:masked-decode-inside.c **** 				 * have now found q such that d[u]!=0 and
 405:masked-decode-inside.c **** 				 * u_lu[q] is maximum 
 406:masked-decode-inside.c **** 				 */
 407:masked-decode-inside.c **** 				/* store degree of new elp polynomial */
 408:masked-decode-inside.c **** 				if (l[u] > l[q] + u - q)
 409:masked-decode-inside.c **** 					l[u + 1] = l[u];
 410:masked-decode-inside.c **** 				else
 411:masked-decode-inside.c **** 					l[u + 1] = l[q] + u - q;
 412:masked-decode-inside.c ****  
 413:masked-decode-inside.c **** 				/* form new elp(x) */
 414:masked-decode-inside.c **** 				for (i = 0; i < t2; i++)
 415:masked-decode-inside.c **** 					elp[u + 1][i] = 0;
 416:masked-decode-inside.c **** 				for (i = 0; i <= l[q]; i++)
 417:masked-decode-inside.c **** 					if (elp[q][i] != -1)
 418:masked-decode-inside.c **** 						elp[u + 1][i + u - q] = 
 419:masked-decode-inside.c ****                                    alpha_to[(d[u] + n - d[q] + elp[q][i]) % n];
 420:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 421:masked-decode-inside.c **** 					elp[u + 1][i] ^= elp[u][i];
 422:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 423:masked-decode-inside.c **** 				}
 424:masked-decode-inside.c **** 			}
 425:masked-decode-inside.c **** 			u_lu[u + 1] = u - l[u + 1];
 426:masked-decode-inside.c ****  
 427:masked-decode-inside.c **** 			/* form (u+1)th discrepancy */
 428:masked-decode-inside.c **** 			if (u < t2) {	
 429:masked-decode-inside.c **** 			/* no discrepancy computed on last iteration */
 430:masked-decode-inside.c **** 			  if (s[u + 1] != -1)
 431:masked-decode-inside.c **** 			    d[u + 1] = alpha_to[s[u + 1]];
 432:masked-decode-inside.c **** 			  else{
 433:masked-decode-inside.c **** 			    d[u + 1] = 0;
 434:masked-decode-inside.c ****               }
 435:masked-decode-inside.c ****               for (i = 1; i <= l[u + 1]; i++)
 436:masked-decode-inside.c ****                 if ((s[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 437:masked-decode-inside.c ****                   d[u + 1] ^= alpha_to[(s[u + 1 - i] 
 438:masked-decode-inside.c ****                               + index_of[elp[u + 1][i]]) % n];
 439:masked-decode-inside.c **** 			  /* put d[u+1] into index form */
 440:masked-decode-inside.c **** 			  d[u + 1] = index_of[d[u + 1]];	
 441:masked-decode-inside.c **** 			}
 442:masked-decode-inside.c **** 		} while ((u < t2) && (l[u + 1] <= t));
 443:masked-decode-inside.c ****  
 444:masked-decode-inside.c **** 		u++;
 445:masked-decode-inside.c **** 		if (l[u] <= t) {/* Can correct errors */
 446:masked-decode-inside.c **** 			/* put elp into index form */
 447:masked-decode-inside.c **** 			for (i = 0; i <= l[u]; i++)
 448:masked-decode-inside.c **** 				elp[u][i] = index_of[elp[u][i]];
 449:masked-decode-inside.c **** 
 450:masked-decode-inside.c **** 			/* Chien search: find roots of the error location polynomial */
 451:masked-decode-inside.c **** 			for (i = 1; i <= l[u]; i++)
 452:masked-decode-inside.c **** 				reg[i] = elp[u][i];
 453:masked-decode-inside.c **** 			count = 0;
 454:masked-decode-inside.c **** 			for (i = 1; i <= n; i++) {
 455:masked-decode-inside.c **** 				q = 1;
 456:masked-decode-inside.c **** 				for (j = 1; j <= l[u]; j++)
 457:masked-decode-inside.c **** 					if (reg[j] != -1) {
 458:masked-decode-inside.c **** 						reg[j] = (reg[j] + j) % n;
 459:masked-decode-inside.c **** 						q ^= alpha_to[reg[j]];
 460:masked-decode-inside.c **** 					}
 461:masked-decode-inside.c **** 				if (!q) {	/* store root and error
 462:masked-decode-inside.c **** 						 * location number indices */
 463:masked-decode-inside.c **** 					loc[count] = n - i;
 464:masked-decode-inside.c **** 					count++;
 465:masked-decode-inside.c **** 				}
 466:masked-decode-inside.c **** 			}
 467:masked-decode-inside.c **** 			if (count == l[u] || !THROWS)	{ // this if is harmful if you need to get a result every time
 468:masked-decode-inside.c **** 			/* no. roots = degree of elp hence <= t errors */
 469:masked-decode-inside.c **** 				for (i = 0; i < l[u]; i++)
 470:masked-decode-inside.c **** 					recd[loc[i]] ^= 1;
 471:masked-decode-inside.c ****                 //buffer[0] = count;
 472:masked-decode-inside.c ****                 return l[u];
 473:masked-decode-inside.c ****             }
 474:masked-decode-inside.c **** 			else{
 475:masked-decode-inside.c ****             }/* elp has degree >t hence cannot solve */
 476:masked-decode-inside.c **** 				
 477:masked-decode-inside.c **** 		}
 478:masked-decode-inside.c **** 	}
 479:masked-decode-inside.c ****     else return 0;
 480:masked-decode-inside.c ****     return -1;
 481:masked-decode-inside.c **** }
 482:masked-decode-inside.c **** 
 483:masked-decode-inside.c **** 
 484:masked-decode-inside.c **** //uint8_t info[128];
 485:masked-decode-inside.c **** 
 486:masked-decode-inside.c **** //uint8_t keep[64];
 487:masked-decode-inside.c **** uint8_t diff = 0;
 488:masked-decode-inside.c **** uint8_t helper = 0;
 489:masked-decode-inside.c **** 
 490:masked-decode-inside.c **** uint8_t
 491:masked-decode-inside.c **** set_diff(uint8_t* m, uint8_t len) {
  28              		.loc 1 491 35 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
 492:masked-decode-inside.c ****     diff = m[0];
  32              		.loc 1 492 5 view .LVU1
 491:masked-decode-inside.c ****     diff = m[0];
  33              		.loc 1 491 35 is_stmt 0 view .LVU2
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  39              		.loc 1 492 10 view .LVU3
  40 0002 054B     		ldr	r3, .L2
  41              		.loc 1 492 13 view .LVU4
  42 0004 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
  43              	.LVL1:
  44              		.loc 1 492 10 view .LVU5
  45 0006 1970     		strb	r1, [r3]
 493:masked-decode-inside.c ****     simpleserial_put('r', 1, m);
  46              		.loc 1 493 5 is_stmt 1 view .LVU6
 491:masked-decode-inside.c ****     diff = m[0];
  47              		.loc 1 491 35 is_stmt 0 view .LVU7
  48 0008 0246     		mov	r2, r0
  49              		.loc 1 493 5 view .LVU8
  50 000a 0121     		movs	r1, #1
  51 000c 7220     		movs	r0, #114
  52              	.LVL2:
  53              		.loc 1 493 5 view .LVU9
  54 000e FFF7FEFF 		bl	simpleserial_put
  55              	.LVL3:
 494:masked-decode-inside.c ****     return 0x00;
  56              		.loc 1 494 5 is_stmt 1 view .LVU10
 495:masked-decode-inside.c **** }
  57              		.loc 1 495 1 is_stmt 0 view .LVU11
  58 0012 0020     		movs	r0, #0
  59 0014 08BD     		pop	{r3, pc}
  60              	.L3:
  61 0016 00BF     		.align	2
  62              	.L2:
  63 0018 00000000 		.word	.LANCHOR0
  64              		.cfi_endproc
  65              	.LFE8:
  67              		.section	.text.get_key,"ax",%progbits
  68              		.align	1
  69              		.global	get_key
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  75              	get_key:
  76              	.LVL4:
  77              	.LFB13:
 496:masked-decode-inside.c **** uint32_t base32[4];
 497:masked-decode-inside.c **** 
 498:masked-decode-inside.c **** void
 499:masked-decode-inside.c **** preset(uint8_t* pt, uint8_t* buffer) {
 500:masked-decode-inside.c ****     
 501:masked-decode-inside.c ****     
 502:masked-decode-inside.c ****   //   for (i = 0; i < k; i++) {
 503:masked-decode-inside.c **** 		// keep[i] = data[i] = random() & 1; //( random() & 65536 ) >> 16;
 504:masked-decode-inside.c ****   //   }
 505:masked-decode-inside.c ****   
 506:masked-decode-inside.c **** 
 507:masked-decode-inside.c **** 	// encode_bch();
 508:masked-decode-inside.c ****  //    for (i = 0; i < length - k; i++)
 509:masked-decode-inside.c **** 	// 	recd[i] = bb[i];
 510:masked-decode-inside.c **** 	// for (i = 0; i < k; i++)
 511:masked-decode-inside.c **** 	// 	recd[i + length - k] = data[i];
 512:masked-decode-inside.c **** 
 513:masked-decode-inside.c ****     // should be in handle
 514:masked-decode-inside.c ****     uint8_t i;
 515:masked-decode-inside.c **** 	for(i = 0; i < 4; i++) {
 516:masked-decode-inside.c **** 		base32[i] = 0;
 517:masked-decode-inside.c ****         // recd[i] ^= info[i];
 518:masked-decode-inside.c **** 	}
 519:masked-decode-inside.c **** 
 520:masked-decode-inside.c ****     
 521:masked-decode-inside.c ****     
 522:masked-decode-inside.c **** }
 523:masked-decode-inside.c **** 
 524:masked-decode-inside.c **** 
 525:masked-decode-inside.c **** void
 526:masked-decode-inside.c **** handle(uint8_t* pt, uint8_t* buffer)
 527:masked-decode-inside.c **** {
 528:masked-decode-inside.c **** 	uint16_t i;
 529:masked-decode-inside.c ****     
 530:masked-decode-inside.c ****     //for(i = 0; i < 4; i++) {
 531:masked-decode-inside.c **** 	//	base32[i] ^= pt32[i];
 532:masked-decode-inside.c ****         // recd[i] ^= info[i];
 533:masked-decode-inside.c ****     //}
 534:masked-decode-inside.c **** 	/* Randomly generate DATA */
 535:masked-decode-inside.c ****     
 536:masked-decode-inside.c **** 	// for(i = 0; i < length; i++) {
 537:masked-decode-inside.c **** 	// 	recd[i] ^= mem[i];
 538:masked-decode-inside.c ****  //        recd[i] ^= info[i];
 539:masked-decode-inside.c **** 	// }
 540:masked-decode-inside.c **** 	// to combat any evil compiler optimization
 541:masked-decode-inside.c ****     // helper = 0;
 542:masked-decode-inside.c ****     // helper = diff;
 543:masked-decode-inside.c ****     //pt[15]=diff&1;
 544:masked-decode-inside.c ****     for(i = 0; i < 4; i++) {
 545:masked-decode-inside.c **** 		base32[i] = (((uint32_t*)mem)[i] ^ ((uint32_t*)pt)[i+4]);
 546:masked-decode-inside.c ****         // recd[i] ^= info[i];
 547:masked-decode-inside.c **** 	}
 548:masked-decode-inside.c ****     for(i = 0; i < 4; i++) {
 549:masked-decode-inside.c **** 		base32[i] ^= ((uint32_t*)pt)[i];
 550:masked-decode-inside.c ****         // recd[i] ^= info[i];
 551:masked-decode-inside.c **** 	}
 552:masked-decode-inside.c ****     
 553:masked-decode-inside.c **** 	/*
 554:masked-decode-inside.c **** 	 * recd[] are the coefficients of c(x) = x**(length-k)*data(x) + b(x)
 555:masked-decode-inside.c **** 	 */
 556:masked-decode-inside.c ****     
 557:masked-decode-inside.c ****     // numerr = 20;
 558:masked-decode-inside.c **** 	/*
 559:masked-decode-inside.c **** 	 * recd[] are the coefficients of r(x) = c(x) + e(x)
 560:masked-decode-inside.c **** 	 */
 561:masked-decode-inside.c **** 	// for (i = 0; i < numerr; i++)
 562:masked-decode-inside.c **** 	// 	errpos[i]=127-2*i;
 563:masked-decode-inside.c **** 	// if (numerr)
 564:masked-decode-inside.c **** 	// 	for (i = 0; i < numerr; i++)
 565:masked-decode-inside.c **** 	// 		recd[errpos[i]] ^= 1;
 566:masked-decode-inside.c ****     
 567:masked-decode-inside.c ****     //trigger_low();
 568:masked-decode-inside.c ****     for (i = 0; i < length; i++){ // puts input in recd (to decode later)
 569:masked-decode-inside.c **** 		recd[i] = (((uint8_t*)base32)[i/8] >> (i%8)) & 1;
 570:masked-decode-inside.c ****     }
 571:masked-decode-inside.c **** 
 572:masked-decode-inside.c ****     //trigger_high();
 573:masked-decode-inside.c **** 	int8_t errs = pompom();             /* DECODE received codeword recv[] */
 574:masked-decode-inside.c ****     
 575:masked-decode-inside.c ****     //pt[15]=errs;
 576:masked-decode-inside.c ****     //pt[14]=buffer[0];
 577:masked-decode-inside.c ****     //pt[13]=k;
 578:masked-decode-inside.c **** }
 579:masked-decode-inside.c **** 
 580:masked-decode-inside.c **** void
 581:masked-decode-inside.c **** finish(uint8_t* pt, uint8_t start, uint8_t* from) { // 
 582:masked-decode-inside.c ****  //    for (int i = length - k; i < length; i++) { 
 583:masked-decode-inside.c **** 	// 	recd[i] ^= data[i-length+k];//info[i-length+k];
 584:masked-decode-inside.c **** 	// }
 585:masked-decode-inside.c ****     int             i;
 586:masked-decode-inside.c ****     uint8_t x = 0;
 587:masked-decode-inside.c ****     int x_ = 0;
 588:masked-decode-inside.c ****     for (i = start; i < length; i++) { 
 589:masked-decode-inside.c **** 		// if (data[i - length + k] != recd[i]) {
 590:masked-decode-inside.c **** 		// 	decerror++;
 591:masked-decode-inside.c ****   //       }
 592:masked-decode-inside.c **** 
 593:masked-decode-inside.c ****         x >>= 1;
 594:masked-decode-inside.c ****         x += from[i] << 7;
 595:masked-decode-inside.c **** 
 596:masked-decode-inside.c ****         // if(recd[i] != 0 && recd[i] != 1) {
 597:masked-decode-inside.c ****         //     for(int i_=0; i_ < 16; i_++) pt[i_] = recd[i]+i_; // error
 598:masked-decode-inside.c ****         // }
 599:masked-decode-inside.c **** 		
 600:masked-decode-inside.c ****         if((++x_) % 8 == 0) {
 601:masked-decode-inside.c ****             pt[x_/8-1] = x;
 602:masked-decode-inside.c ****             x = 0;
 603:masked-decode-inside.c ****         }
 604:masked-decode-inside.c ****     }
 605:masked-decode-inside.c ****     if(x_ % 8 != 0) {
 606:masked-decode-inside.c ****         pt[x_/8] = x >> (8-(x_% 8));
 607:masked-decode-inside.c ****     }
 608:masked-decode-inside.c **** 	/*
 609:masked-decode-inside.c **** 	 * print out original and decoded data
 610:masked-decode-inside.c **** 	 */
 611:masked-decode-inside.c **** 
 612:masked-decode-inside.c **** 	/*
 613:masked-decode-inside.c **** 	 * DECODING ERRORS? we compare only the data portion
 614:masked-decode-inside.c **** 	 */
 615:masked-decode-inside.c **** 	// for (i = length - k; i < length; i++)
 616:masked-decode-inside.c **** 	// 	if (data[i - length + k] != recd[i])
 617:masked-decode-inside.c **** 	// 		decerror++;
 618:masked-decode-inside.c ****     // if(pt[15] == -1) {
 619:masked-decode-inside.c ****     //     pt[15] = 'L';
 620:masked-decode-inside.c ****     //     return;
 621:masked-decode-inside.c ****     // }
 622:masked-decode-inside.c ****     
 623:masked-decode-inside.c **** }
 624:masked-decode-inside.c **** 
 625:masked-decode-inside.c **** 
 626:masked-decode-inside.c **** 
 627:masked-decode-inside.c **** uint8_t get_mask(uint8_t* m, uint8_t len)
 628:masked-decode-inside.c **** {
 629:masked-decode-inside.c ****   aes_indep_mask(m, len);
 630:masked-decode-inside.c ****   return 0x00;
 631:masked-decode-inside.c **** }
 632:masked-decode-inside.c **** 
 633:masked-decode-inside.c **** uint8_t get_key(uint8_t* k, uint8_t len)
 634:masked-decode-inside.c **** {
  78              		.loc 1 634 1 is_stmt 1 view -0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
 635:masked-decode-inside.c **** 
 636:masked-decode-inside.c **** 	int i=0;
  82              		.loc 1 636 2 view .LVU13
 637:masked-decode-inside.c ****     for (i = 0; i < 16; i++){
  83              		.loc 1 637 5 view .LVU14
  84              		.loc 1 637 17 view .LVU15
 634:masked-decode-inside.c **** 
  85              		.loc 1 634 1 is_stmt 0 view .LVU16
  86 0000 10B5     		push	{r4, lr}
  87              	.LCFI1:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 4, -8
  90              		.cfi_offset 14, -4
  91 0002 0849     		ldr	r1, .L7
  92              	.LVL5:
 634:masked-decode-inside.c **** 
  93              		.loc 1 634 1 view .LVU17
  94 0004 0246     		mov	r2, r0
  95 0006 431E     		subs	r3, r0, #1
  96 0008 0F30     		adds	r0, r0, #15
  97              	.LVL6:
  98              	.L5:
 638:masked-decode-inside.c **** 		mem[i] = k[i];//(k[i/8] >> (i%8)) & 1;
  99              		.loc 1 638 3 is_stmt 1 discriminator 3 view .LVU18
 100              		.loc 1 638 13 is_stmt 0 discriminator 3 view .LVU19
 101 000a 13F8014F 		ldrb	r4, [r3, #1]!	@ zero_extendqisi2
 102              		.loc 1 638 10 discriminator 3 view .LVU20
 103 000e 01F8014B 		strb	r4, [r1], #1
 637:masked-decode-inside.c ****     for (i = 0; i < 16; i++){
 104              		.loc 1 637 25 is_stmt 1 discriminator 3 view .LVU21
 637:masked-decode-inside.c ****     for (i = 0; i < 16; i++){
 105              		.loc 1 637 17 discriminator 3 view .LVU22
 637:masked-decode-inside.c ****     for (i = 0; i < 16; i++){
 106              		.loc 1 637 5 is_stmt 0 discriminator 3 view .LVU23
 107 0012 8342     		cmp	r3, r0
 108 0014 F9D1     		bne	.L5
 639:masked-decode-inside.c ****     }
 640:masked-decode-inside.c **** 	simpleserial_put('r', 16, k);
 109              		.loc 1 640 2 is_stmt 1 view .LVU24
 110 0016 1021     		movs	r1, #16
 111 0018 7220     		movs	r0, #114
 112 001a FFF7FEFF 		bl	simpleserial_put
 113              	.LVL7:
 641:masked-decode-inside.c **** 	return 0x00;
 114              		.loc 1 641 2 view .LVU25
 642:masked-decode-inside.c **** }
 115              		.loc 1 642 1 is_stmt 0 view .LVU26
 116 001e 0020     		movs	r0, #0
 117 0020 10BD     		pop	{r4, pc}
 118              	.L8:
 119 0022 00BF     		.align	2
 120              	.L7:
 121 0024 01000000 		.word	.LANCHOR0+1
 122              		.cfi_endproc
 123              	.LFE13:
 125              		.section	.text.get_mask,"ax",%progbits
 126              		.align	1
 127              		.global	get_mask
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu softvfp
 133              	get_mask:
 134              	.LVL8:
 135              	.LFB12:
 628:masked-decode-inside.c ****   aes_indep_mask(m, len);
 136              		.loc 1 628 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 629:masked-decode-inside.c ****   return 0x00;
 140              		.loc 1 629 3 view .LVU28
 628:masked-decode-inside.c ****   aes_indep_mask(m, len);
 141              		.loc 1 628 1 is_stmt 0 view .LVU29
 142 0000 08B5     		push	{r3, lr}
 143              	.LCFI2:
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 3, -8
 146              		.cfi_offset 14, -4
 629:masked-decode-inside.c ****   return 0x00;
 147              		.loc 1 629 3 view .LVU30
 148 0002 FFF7FEFF 		bl	aes_indep_mask
 149              	.LVL9:
 630:masked-decode-inside.c **** }
 150              		.loc 1 630 3 is_stmt 1 view .LVU31
 631:masked-decode-inside.c **** 
 151              		.loc 1 631 1 is_stmt 0 view .LVU32
 152 0006 0020     		movs	r0, #0
 153 0008 08BD     		pop	{r3, pc}
 154              		.cfi_endproc
 155              	.LFE12:
 157              		.section	.text.set_seed,"ax",%progbits
 158              		.align	1
 159              		.global	set_seed
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu softvfp
 165              	set_seed:
 166              	.LVL10:
 167              	.LFB15:
 643:masked-decode-inside.c **** 
 644:masked-decode-inside.c **** uint8_t get_pt(uint8_t* pt, uint8_t len)
 645:masked-decode-inside.c **** {
 646:masked-decode-inside.c ****     uint8_t buffer[16];
 647:masked-decode-inside.c ****     preset(pt, buffer);
 648:masked-decode-inside.c ****     noop;
 649:masked-decode-inside.c ****     noop;
 650:masked-decode-inside.c ****     noop;
 651:masked-decode-inside.c ****     noop;
 652:masked-decode-inside.c ****     noop;
 653:masked-decode-inside.c ****     noop;
 654:masked-decode-inside.c ****     noop;
 655:masked-decode-inside.c ****     noop;
 656:masked-decode-inside.c ****     noop;
 657:masked-decode-inside.c ****     noop;
 658:masked-decode-inside.c ****     noop;
 659:masked-decode-inside.c ****     noop;
 660:masked-decode-inside.c ****     noop;
 661:masked-decode-inside.c ****     noop;
 662:masked-decode-inside.c **** 	trigger_high();
 663:masked-decode-inside.c ****     
 664:masked-decode-inside.c ****   #ifdef ADD_JITTER
 665:masked-decode-inside.c ****   //for (volatile uint8_t k = 0; k < (*pt & 0x0F); k++);
 666:masked-decode-inside.c ****   #endif
 667:masked-decode-inside.c **** 
 668:masked-decode-inside.c ****     handle(pt, buffer); /* encrypting the data block */
 669:masked-decode-inside.c **** 
 670:masked-decode-inside.c ****     trigger_low();
 671:masked-decode-inside.c ****     uint8_t i;
 672:masked-decode-inside.c ****  //    for(i = length-k; i < length; i++) {
 673:masked-decode-inside.c ****  //        recd[i] ^= keep[i-length+k];
 674:masked-decode-inside.c **** 	// }
 675:masked-decode-inside.c ****     finish(pt,length-k, &(recd[0]));
 676:masked-decode-inside.c **** 
 677:masked-decode-inside.c **** 
 678:masked-decode-inside.c **** 	simpleserial_put('r', 16, pt);
 679:masked-decode-inside.c **** 	return 0x00;
 680:masked-decode-inside.c **** }
 681:masked-decode-inside.c **** 
 682:masked-decode-inside.c **** uint8_t set_seed(uint8_t* pt, uint8_t len) {
 168              		.loc 1 682 44 is_stmt 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 683:masked-decode-inside.c ****     seed =  * (int*) pt;
 172              		.loc 1 683 5 view .LVU34
 682:masked-decode-inside.c ****     seed =  * (int*) pt;
 173              		.loc 1 682 44 is_stmt 0 view .LVU35
 174 0000 10B5     		push	{r4, lr}
 175              	.LCFI3:
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 4, -8
 178              		.cfi_offset 14, -4
 179              		.loc 1 683 10 view .LVU36
 180 0002 064B     		ldr	r3, .L11
 682:masked-decode-inside.c ****     seed =  * (int*) pt;
 181              		.loc 1 682 44 view .LVU37
 182 0004 0446     		mov	r4, r0
 183              		.loc 1 683 13 view .LVU38
 184 0006 0068     		ldr	r0, [r0]
 185              	.LVL11:
 186              		.loc 1 683 10 view .LVU39
 187 0008 9861     		str	r0, [r3, #24]
 684:masked-decode-inside.c ****     srandom(seed);
 188              		.loc 1 684 5 is_stmt 1 view .LVU40
 189 000a FFF7FEFF 		bl	srandom
 190              	.LVL12:
 685:masked-decode-inside.c ****     simpleserial_put('r', 4, pt);
 191              		.loc 1 685 5 view .LVU41
 192 000e 2246     		mov	r2, r4
 193 0010 0421     		movs	r1, #4
 194 0012 7220     		movs	r0, #114
 195 0014 FFF7FEFF 		bl	simpleserial_put
 196              	.LVL13:
 686:masked-decode-inside.c ****     return 0x00;
 197              		.loc 1 686 5 view .LVU42
 687:masked-decode-inside.c **** }
 198              		.loc 1 687 1 is_stmt 0 view .LVU43
 199 0018 0020     		movs	r0, #0
 200 001a 10BD     		pop	{r4, pc}
 201              	.LVL14:
 202              	.L12:
 203              		.loc 1 687 1 view .LVU44
 204              		.align	2
 205              	.L11:
 206 001c 00000000 		.word	.LANCHOR0
 207              		.cfi_endproc
 208              	.LFE15:
 210              		.section	.text.read_p,"ax",%progbits
 211              		.align	1
 212              		.global	read_p
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 216              		.fpu softvfp
 218              	read_p:
 219              	.LFB3:
 106:masked-decode-inside.c **** 	uint8_t			i, ninf;
 220              		.loc 1 106 1 is_stmt 1 view -0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              		@ link register save eliminated.
 107:masked-decode-inside.c **** 
 225              		.loc 1 107 2 view .LVU46
 109:masked-decode-inside.c ****      if ( !(m>1) || !(m<21) ) exit(0);
 226              		.loc 1 109 5 view .LVU47
 109:masked-decode-inside.c ****      if ( !(m>1) || !(m<21) ) exit(0);
 227              		.loc 1 109 6 is_stmt 0 view .LVU48
 228 0000 0B4B     		ldr	r3, .L14
 229 0002 0722     		movs	r2, #7
 230 0004 1A77     		strb	r2, [r3, #28]
 110:masked-decode-inside.c **** 	for (i=1; i<m; i++)
 231              		.loc 1 110 6 is_stmt 1 view .LVU49
 232              	.LVL15:
 111:masked-decode-inside.c **** 		p[i] = 0;
 233              		.loc 1 111 12 view .LVU50
 112:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 234              		.loc 1 112 3 view .LVU51
 111:masked-decode-inside.c **** 		p[i] = 0;
 235              		.loc 1 111 17 view .LVU52
 111:masked-decode-inside.c **** 		p[i] = 0;
 236              		.loc 1 111 12 view .LVU53
 112:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 237              		.loc 1 112 3 view .LVU54
 112:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 238              		.loc 1 112 8 is_stmt 0 view .LVU55
 239 0006 0022     		movs	r2, #0
 240 0008 DA77     		strb	r2, [r3, #31]
 111:masked-decode-inside.c **** 		p[i] = 0;
 241              		.loc 1 111 17 is_stmt 1 view .LVU56
 242              	.LVL16:
 111:masked-decode-inside.c **** 		p[i] = 0;
 243              		.loc 1 111 12 view .LVU57
 112:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 244              		.loc 1 112 3 view .LVU58
 112:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 245              		.loc 1 112 8 is_stmt 0 view .LVU59
 246 000a 83F82020 		strb	r2, [r3, #32]
 111:masked-decode-inside.c **** 		p[i] = 0;
 247              		.loc 1 111 17 is_stmt 1 view .LVU60
 248              	.LVL17:
 111:masked-decode-inside.c **** 		p[i] = 0;
 249              		.loc 1 111 12 view .LVU61
 112:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 250              		.loc 1 112 3 view .LVU62
 112:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 251              		.loc 1 112 8 is_stmt 0 view .LVU63
 252 000e 83F82120 		strb	r2, [r3, #33]
 111:masked-decode-inside.c **** 		p[i] = 0;
 253              		.loc 1 111 17 is_stmt 1 view .LVU64
 254              	.LVL18:
 111:masked-decode-inside.c **** 		p[i] = 0;
 255              		.loc 1 111 12 view .LVU65
 112:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 256              		.loc 1 112 3 view .LVU66
 112:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 257              		.loc 1 112 8 is_stmt 0 view .LVU67
 258 0012 83F82220 		strb	r2, [r3, #34]
 111:masked-decode-inside.c **** 		p[i] = 0;
 259              		.loc 1 111 17 is_stmt 1 view .LVU68
 260              	.LVL19:
 111:masked-decode-inside.c **** 		p[i] = 0;
 261              		.loc 1 111 12 view .LVU69
 112:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 262              		.loc 1 112 3 view .LVU70
 112:masked-decode-inside.c **** 	p[0] = p[m] = 1;
 263              		.loc 1 112 8 is_stmt 0 view .LVU71
 264 0016 83F82320 		strb	r2, [r3, #35]
 111:masked-decode-inside.c **** 		p[i] = 0;
 265              		.loc 1 111 17 is_stmt 1 view .LVU72
 266              	.LVL20:
 111:masked-decode-inside.c **** 		p[i] = 0;
 267              		.loc 1 111 12 view .LVU73
 113:masked-decode-inside.c **** 	if (m == 2)			p[1] = 1;
 268              		.loc 1 113 2 view .LVU74
 113:masked-decode-inside.c **** 	if (m == 2)			p[1] = 1;
 269              		.loc 1 113 14 is_stmt 0 view .LVU75
 270 001a 0122     		movs	r2, #1
 271 001c 83F82420 		strb	r2, [r3, #36]
 113:masked-decode-inside.c **** 	if (m == 2)			p[1] = 1;
 272              		.loc 1 113 7 view .LVU76
 273 0020 5A77     		strb	r2, [r3, #29]
 114:masked-decode-inside.c **** 	else if (m == 3)	p[1] = 1;
 274              		.loc 1 114 2 is_stmt 1 view .LVU77
 115:masked-decode-inside.c **** 	else if (m == 4)	p[1] = 1;
 275              		.loc 1 115 7 view .LVU78
 116:masked-decode-inside.c **** 	else if (m == 5)	p[2] = 1;
 276              		.loc 1 116 7 view .LVU79
 117:masked-decode-inside.c **** 	else if (m == 6)	p[1] = 1;
 277              		.loc 1 117 7 view .LVU80
 118:masked-decode-inside.c **** 	else if (m == 7)	p[1] = 1;
 278              		.loc 1 118 7 view .LVU81
 119:masked-decode-inside.c **** 	else if (m == 8)	p[4] = p[5] = p[6] = 1;
 279              		.loc 1 119 7 view .LVU82
 119:masked-decode-inside.c **** 	else if (m == 8)	p[4] = p[5] = p[6] = 1;
 280              		.loc 1 119 19 view .LVU83
 119:masked-decode-inside.c **** 	else if (m == 8)	p[4] = p[5] = p[6] = 1;
 281              		.loc 1 119 24 is_stmt 0 view .LVU84
 282 0022 9A77     		strb	r2, [r3, #30]
 123:masked-decode-inside.c **** 	for (i = 0; i < m; i++) {
 283              		.loc 1 123 5 is_stmt 1 view .LVU85
 124:masked-decode-inside.c ****         n *= 2;
 284              		.loc 1 124 2 view .LVU86
 285              	.LVL21:
 124:masked-decode-inside.c ****         n *= 2;
 286              		.loc 1 124 14 view .LVU87
 125:masked-decode-inside.c ****         }
 287              		.loc 1 125 9 view .LVU88
 124:masked-decode-inside.c ****         n *= 2;
 288              		.loc 1 124 21 view .LVU89
 124:masked-decode-inside.c ****         n *= 2;
 289              		.loc 1 124 14 view .LVU90
 125:masked-decode-inside.c ****         }
 290              		.loc 1 125 9 view .LVU91
 124:masked-decode-inside.c ****         n *= 2;
 291              		.loc 1 124 21 view .LVU92
 124:masked-decode-inside.c ****         n *= 2;
 292              		.loc 1 124 14 view .LVU93
 125:masked-decode-inside.c ****         }
 293              		.loc 1 125 9 view .LVU94
 124:masked-decode-inside.c ****         n *= 2;
 294              		.loc 1 124 21 view .LVU95
 124:masked-decode-inside.c ****         n *= 2;
 295              		.loc 1 124 14 view .LVU96
 125:masked-decode-inside.c ****         }
 296              		.loc 1 125 9 view .LVU97
 124:masked-decode-inside.c ****         n *= 2;
 297              		.loc 1 124 21 view .LVU98
 124:masked-decode-inside.c ****         n *= 2;
 298              		.loc 1 124 14 view .LVU99
 125:masked-decode-inside.c ****         }
 299              		.loc 1 125 9 view .LVU100
 124:masked-decode-inside.c ****         n *= 2;
 300              		.loc 1 124 21 view .LVU101
 124:masked-decode-inside.c ****         n *= 2;
 301              		.loc 1 124 14 view .LVU102
 125:masked-decode-inside.c ****         }
 302              		.loc 1 125 9 view .LVU103
 124:masked-decode-inside.c ****         n *= 2;
 303              		.loc 1 124 21 view .LVU104
 124:masked-decode-inside.c ****         n *= 2;
 304              		.loc 1 124 14 view .LVU105
 125:masked-decode-inside.c ****         }
 305              		.loc 1 125 9 view .LVU106
 124:masked-decode-inside.c ****         n *= 2;
 306              		.loc 1 124 21 view .LVU107
 124:masked-decode-inside.c ****         n *= 2;
 307              		.loc 1 124 14 view .LVU108
 127:masked-decode-inside.c **** 	ninf = (n + 1) / 2 - 1;
 308              		.loc 1 127 2 view .LVU109
 127:masked-decode-inside.c **** 	ninf = (n + 1) / 2 - 1;
 309              		.loc 1 127 4 is_stmt 0 view .LVU110
 310 0024 7F22     		movs	r2, #127
 311 0026 83F82B20 		strb	r2, [r3, #43]
 128:masked-decode-inside.c **** 	length = LEN;
 312              		.loc 1 128 2 is_stmt 1 view .LVU111
 313              	.LVL22:
 129:masked-decode-inside.c ****     // pt[13]=n;
 314              		.loc 1 129 2 view .LVU112
 129:masked-decode-inside.c ****     // pt[13]=n;
 315              		.loc 1 129 9 is_stmt 0 view .LVU113
 316 002a 83F82C20 		strb	r2, [r3, #44]
 133:masked-decode-inside.c **** }
 317              		.loc 1 133 2 is_stmt 1 view .LVU114
 134:masked-decode-inside.c **** 
 318              		.loc 1 134 1 is_stmt 0 view .LVU115
 319 002e 7047     		bx	lr
 320              	.L15:
 321              		.align	2
 322              	.L14:
 323 0030 00000000 		.word	.LANCHOR0
 324              		.cfi_endproc
 325              	.LFE3:
 327              		.section	.text.generate_gf,"ax",%progbits
 328              		.align	1
 329              		.global	generate_gf
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 333              		.fpu softvfp
 335              	generate_gf:
 336              	.LFB4:
 149:masked-decode-inside.c **** 	register uint8_t    i, mask;
 337              		.loc 1 149 1 is_stmt 1 view -0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 150:masked-decode-inside.c **** 
 341              		.loc 1 150 2 view .LVU117
 152:masked-decode-inside.c **** 	alpha_to[m] = 0;
 342              		.loc 1 152 2 view .LVU118
 343              	.LVL23:
 153:masked-decode-inside.c **** 	for (i = 0; i < m; i++) {
 344              		.loc 1 153 2 view .LVU119
 149:masked-decode-inside.c **** 	register uint8_t    i, mask;
 345              		.loc 1 149 1 is_stmt 0 view .LVU120
 346 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 347              	.LCFI4:
 348              		.cfi_def_cfa_offset 20
 349              		.cfi_offset 4, -20
 350              		.cfi_offset 5, -16
 351              		.cfi_offset 6, -12
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 153:masked-decode-inside.c **** 	for (i = 0; i < m; i++) {
 354              		.loc 1 153 10 view .LVU121
 355 0002 2448     		ldr	r0, .L28
 356 0004 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 153:masked-decode-inside.c **** 	for (i = 0; i < m; i++) {
 357              		.loc 1 153 14 view .LVU122
 358 0006 C618     		adds	r6, r0, r3
 359 0008 0024     		movs	r4, #0
 360 000a 00F12D05 		add	r5, r0, #45
 361 000e 86F82D40 		strb	r4, [r6, #45]
 154:masked-decode-inside.c **** 		alpha_to[i] = mask;
 362              		.loc 1 154 2 is_stmt 1 view .LVU123
 363              	.LVL24:
 154:masked-decode-inside.c **** 		alpha_to[i] = mask;
 364              		.loc 1 154 2 is_stmt 0 view .LVU124
 365 0012 00F11D0C 		add	ip, r0, #29
 152:masked-decode-inside.c **** 	alpha_to[m] = 0;
 366              		.loc 1 152 7 view .LVU125
 367 0016 0121     		movs	r1, #1
 368 0018 2A46     		mov	r2, r5
 369              	.LVL25:
 370              	.L17:
 154:masked-decode-inside.c **** 		alpha_to[i] = mask;
 371              		.loc 1 154 14 is_stmt 1 discriminator 1 view .LVU126
 154:masked-decode-inside.c **** 		alpha_to[i] = mask;
 372              		.loc 1 154 2 is_stmt 0 discriminator 1 view .LVU127
 373 001a E7B2     		uxtb	r7, r4
 374 001c BB42     		cmp	r3, r7
 375 001e 12D8     		bhi	.L19
 161:masked-decode-inside.c **** 	mask >>= 1;
 376              		.loc 1 161 2 is_stmt 1 view .LVU128
 161:masked-decode-inside.c **** 	mask >>= 1;
 377              		.loc 1 161 19 is_stmt 0 view .LVU129
 378 0020 C518     		adds	r5, r0, r3
 163:masked-decode-inside.c **** 		if (alpha_to[i - 1] >= mask)
 379              		.loc 1 163 20 view .LVU130
 380 0022 90F82B60 		ldrb	r6, [r0, #43]	@ zero_extendqisi2
 161:masked-decode-inside.c **** 	mask >>= 1;
 381              		.loc 1 161 19 view .LVU131
 382 0026 95F82D40 		ldrb	r4, [r5, #45]	@ zero_extendqisi2
 383              	.LVL26:
 161:masked-decode-inside.c **** 	mask >>= 1;
 384              		.loc 1 161 24 view .LVU132
 385 002a 0444     		add	r4, r4, r0
 162:masked-decode-inside.c **** 	for (i = m + 1; i < n; i++) {
 386              		.loc 1 162 7 view .LVU133
 387 002c 4908     		lsrs	r1, r1, #1
 388              	.LVL27:
 161:masked-decode-inside.c **** 	mask >>= 1;
 389              		.loc 1 161 24 view .LVU134
 390 002e 84F8B030 		strb	r3, [r4, #176]
 162:masked-decode-inside.c **** 	for (i = m + 1; i < n; i++) {
 391              		.loc 1 162 2 is_stmt 1 view .LVU135
 392              	.LVL28:
 163:masked-decode-inside.c **** 		if (alpha_to[i - 1] >= mask)
 393              		.loc 1 163 2 view .LVU136
 163:masked-decode-inside.c **** 		if (alpha_to[i - 1] >= mask)
 394              		.loc 1 163 9 is_stmt 0 view .LVU137
 395 0032 0133     		adds	r3, r3, #1
 396 0034 DCB2     		uxtb	r4, r3
 397              	.LVL29:
 163:masked-decode-inside.c **** 		if (alpha_to[i - 1] >= mask)
 398              		.loc 1 163 9 view .LVU138
 399 0036 52FA83F2 		uxtab	r2, r2, r3
 400              	.L20:
 163:masked-decode-inside.c **** 		if (alpha_to[i - 1] >= mask)
 401              		.loc 1 163 18 is_stmt 1 discriminator 1 view .LVU139
 163:masked-decode-inside.c **** 		if (alpha_to[i - 1] >= mask)
 402              		.loc 1 163 2 is_stmt 0 discriminator 1 view .LVU140
 403 003a A642     		cmp	r6, r4
 404 003c 14D8     		bhi	.L23
 170:masked-decode-inside.c **** }
 405              		.loc 1 170 2 is_stmt 1 view .LVU141
 170:masked-decode-inside.c **** }
 406              		.loc 1 170 14 is_stmt 0 view .LVU142
 407 003e FF23     		movs	r3, #255
 408 0040 80F8B030 		strb	r3, [r0, #176]
 171:masked-decode-inside.c **** 
 409              		.loc 1 171 1 view .LVU143
 410 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 411              	.LVL30:
 412              	.L19:
 155:masked-decode-inside.c **** 		index_of[alpha_to[i]] = i;
 413              		.loc 1 155 3 is_stmt 1 view .LVU144
 156:masked-decode-inside.c **** 		if (p[i] != 0)
 414              		.loc 1 156 25 is_stmt 0 view .LVU145
 415 0046 4718     		adds	r7, r0, r1
 155:masked-decode-inside.c **** 		index_of[alpha_to[i]] = i;
 416              		.loc 1 155 15 view .LVU146
 417 0048 05F8011B 		strb	r1, [r5], #1
 156:masked-decode-inside.c **** 		if (p[i] != 0)
 418              		.loc 1 156 3 is_stmt 1 view .LVU147
 156:masked-decode-inside.c **** 		if (p[i] != 0)
 419              		.loc 1 156 25 is_stmt 0 view .LVU148
 420 004c 87F8B040 		strb	r4, [r7, #176]
 157:masked-decode-inside.c **** 			alpha_to[m] ^= mask;
 421              		.loc 1 157 3 is_stmt 1 view .LVU149
 157:masked-decode-inside.c **** 			alpha_to[m] ^= mask;
 422              		.loc 1 157 8 is_stmt 0 view .LVU150
 423 0050 1CF8017B 		ldrb	r7, [ip], #1	@ zero_extendqisi2
 157:masked-decode-inside.c **** 			alpha_to[m] ^= mask;
 424              		.loc 1 157 6 view .LVU151
 425 0054 27B1     		cbz	r7, .L18
 158:masked-decode-inside.c **** 		mask <<= 1;
 426              		.loc 1 158 4 is_stmt 1 view .LVU152
 158:masked-decode-inside.c **** 		mask <<= 1;
 427              		.loc 1 158 16 is_stmt 0 view .LVU153
 428 0056 96F82D70 		ldrb	r7, [r6, #45]	@ zero_extendqisi2
 429 005a 4F40     		eors	r7, r7, r1
 430 005c 86F82D70 		strb	r7, [r6, #45]
 431              	.L18:
 159:masked-decode-inside.c **** 	}
 432              		.loc 1 159 3 is_stmt 1 discriminator 2 view .LVU154
 159:masked-decode-inside.c **** 	}
 433              		.loc 1 159 8 is_stmt 0 discriminator 2 view .LVU155
 434 0060 4900     		lsls	r1, r1, #1
 435              	.LVL31:
 159:masked-decode-inside.c **** 	}
 436              		.loc 1 159 8 discriminator 2 view .LVU156
 437 0062 C9B2     		uxtb	r1, r1
 438              	.LVL32:
 154:masked-decode-inside.c **** 		alpha_to[i] = mask;
 439              		.loc 1 154 21 is_stmt 1 discriminator 2 view .LVU157
 154:masked-decode-inside.c **** 		alpha_to[i] = mask;
 440              		.loc 1 154 21 is_stmt 0 discriminator 2 view .LVU158
 441 0064 0134     		adds	r4, r4, #1
 442              	.LVL33:
 154:masked-decode-inside.c **** 		alpha_to[i] = mask;
 443              		.loc 1 154 21 discriminator 2 view .LVU159
 444 0066 D8E7     		b	.L17
 445              	.LVL34:
 446              	.L23:
 164:masked-decode-inside.c **** 		  alpha_to[i] = alpha_to[m] ^ ((alpha_to[i - 1] ^ mask) << 1);
 447              		.loc 1 164 3 is_stmt 1 view .LVU160
 164:masked-decode-inside.c **** 		  alpha_to[i] = alpha_to[m] ^ ((alpha_to[i - 1] ^ mask) << 1);
 448              		.loc 1 164 15 is_stmt 0 view .LVU161
 449 0068 12F8013C 		ldrb	r3, [r2, #-1]	@ zero_extendqisi2
 164:masked-decode-inside.c **** 		  alpha_to[i] = alpha_to[m] ^ ((alpha_to[i - 1] ^ mask) << 1);
 450              		.loc 1 164 6 view .LVU162
 451 006c 8B42     		cmp	r3, r1
 165:masked-decode-inside.c **** 		else
 452              		.loc 1 165 5 is_stmt 1 view .LVU163
 165:masked-decode-inside.c **** 		else
 453              		.loc 1 165 51 is_stmt 0 view .LVU164
 454 006e 21BF     		itttt	cs
 455 0070 4B40     		eorcs	r3, r3, r1
 165:masked-decode-inside.c **** 		else
 456              		.loc 1 165 31 view .LVU165
 457 0072 95F82D70 		ldrbcs	r7, [r5, #45]	@ zero_extendqisi2
 165:masked-decode-inside.c **** 		else
 458              		.loc 1 165 51 view .LVU166
 459 0076 DBB2     		uxtbcs	r3, r3
 165:masked-decode-inside.c **** 		else
 460              		.loc 1 165 31 view .LVU167
 461 0078 87EA4303 		eorcs	r3, r7, r3, lsl #1
 167:masked-decode-inside.c **** 		index_of[alpha_to[i]] = i;
 462              		.loc 1 167 5 is_stmt 1 view .LVU168
 167:masked-decode-inside.c **** 		index_of[alpha_to[i]] = i;
 463              		.loc 1 167 35 is_stmt 0 view .LVU169
 464 007c 38BF     		it	cc
 465 007e 5B00     		lslcc	r3, r3, #1
 466 0080 DBB2     		uxtb	r3, r3
 467 0082 02F8013B 		strb	r3, [r2], #1
 168:masked-decode-inside.c **** 	}
 468              		.loc 1 168 3 is_stmt 1 view .LVU170
 168:masked-decode-inside.c **** 	}
 469              		.loc 1 168 25 is_stmt 0 view .LVU171
 470 0086 0344     		add	r3, r3, r0
 471 0088 83F8B040 		strb	r4, [r3, #176]
 163:masked-decode-inside.c **** 		if (alpha_to[i - 1] >= mask)
 472              		.loc 1 163 25 is_stmt 1 view .LVU172
 163:masked-decode-inside.c **** 		if (alpha_to[i - 1] >= mask)
 473              		.loc 1 163 26 is_stmt 0 view .LVU173
 474 008c 0134     		adds	r4, r4, #1
 475              	.LVL35:
 163:masked-decode-inside.c **** 		if (alpha_to[i - 1] >= mask)
 476              		.loc 1 163 26 view .LVU174
 477 008e E4B2     		uxtb	r4, r4
 478              	.LVL36:
 163:masked-decode-inside.c **** 		if (alpha_to[i - 1] >= mask)
 479              		.loc 1 163 26 view .LVU175
 480 0090 D3E7     		b	.L20
 481              	.L29:
 482 0092 00BF     		.align	2
 483              	.L28:
 484 0094 00000000 		.word	.LANCHOR0
 485              		.cfi_endproc
 486              	.LFE4:
 488              		.section	.text.gen_poly,"ax",%progbits
 489              		.align	1
 490              		.global	gen_poly
 491              		.syntax unified
 492              		.thumb
 493              		.thumb_func
 494              		.fpu softvfp
 496              	gen_poly:
 497              	.LFB5:
 184:masked-decode-inside.c **** 	register uint8_t	ii, jj, ll, kaux;
 498              		.loc 1 184 1 is_stmt 1 view -0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 1840
 501              		@ frame_needed = 0, uses_anonymous_args = 0
 185:masked-decode-inside.c **** 	register uint8_t	test, aux, nocycles, root, noterms, rdncy;
 502              		.loc 1 185 2 view .LVU177
 186:masked-decode-inside.c **** 	uint8_t             cycle[SIZE][11], size[SIZE], min[SIZE], zeros[SIZE];
 503              		.loc 1 186 2 view .LVU178
 187:masked-decode-inside.c **** 
 504              		.loc 1 187 2 view .LVU179
 190:masked-decode-inside.c **** 	size[0] = 1;
 505              		.loc 1 190 2 view .LVU180
 184:masked-decode-inside.c **** 	register uint8_t	ii, jj, ll, kaux;
 506              		.loc 1 184 1 is_stmt 0 view .LVU181
 507 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 508              	.LCFI5:
 509              		.cfi_def_cfa_offset 36
 510              		.cfi_offset 4, -36
 511              		.cfi_offset 5, -32
 512              		.cfi_offset 6, -28
 513              		.cfi_offset 7, -24
 514              		.cfi_offset 8, -20
 515              		.cfi_offset 9, -16
 516              		.cfi_offset 10, -12
 517              		.cfi_offset 11, -8
 518              		.cfi_offset 14, -4
 200:masked-decode-inside.c **** 			size[jj]++;
 519              		.loc 1 200 44 view .LVU182
 520 0004 884A     		ldr	r2, .L77
 184:masked-decode-inside.c **** 	register uint8_t	ii, jj, ll, kaux;
 521              		.loc 1 184 1 view .LVU183
 522 0006 ADF2347D 		subw	sp, sp, #1844
 523              	.LCFI6:
 524              		.cfi_def_cfa_offset 1880
 190:masked-decode-inside.c **** 	size[0] = 1;
 525              		.loc 1 190 14 view .LVU184
 526 000a 63AD     		add	r5, sp, #396
 527 000c 0023     		movs	r3, #0
 200:masked-decode-inside.c **** 			size[jj]++;
 528              		.loc 1 200 44 view .LVU185
 529 000e 92F82B00 		ldrb	r0, [r2, #43]	@ zero_extendqisi2
 190:masked-decode-inside.c **** 	size[0] = 1;
 530              		.loc 1 190 14 view .LVU186
 531 0012 2B70     		strb	r3, [r5]
 191:masked-decode-inside.c **** 	cycle[1][0] = 1;
 532              		.loc 1 191 2 is_stmt 1 view .LVU187
 191:masked-decode-inside.c **** 	cycle[1][0] = 1;
 533              		.loc 1 191 10 is_stmt 0 view .LVU188
 534 0014 0123     		movs	r3, #1
 535 0016 8DF80030 		strb	r3, [sp]
 192:masked-decode-inside.c **** 	size[1] = 1;
 536              		.loc 1 192 2 is_stmt 1 view .LVU189
 192:masked-decode-inside.c **** 	size[1] = 1;
 537              		.loc 1 192 14 is_stmt 0 view .LVU190
 538 001a EB72     		strb	r3, [r5, #11]
 193:masked-decode-inside.c **** 	jj = 1;			/* cycle set index */
 539              		.loc 1 193 2 is_stmt 1 view .LVU191
 193:masked-decode-inside.c **** 	jj = 1;			/* cycle set index */
 540              		.loc 1 193 10 is_stmt 0 view .LVU192
 541 001c 8DF80130 		strb	r3, [sp, #1]
 194:masked-decode-inside.c **** 	do {
 542              		.loc 1 194 2 is_stmt 1 view .LVU193
 543              	.LVL37:
 200:masked-decode-inside.c **** 			size[jj]++;
 544              		.loc 1 200 30 is_stmt 0 view .LVU194
 545 0020 9E46     		mov	lr, r3
 546 0022 4FF00B0C 		mov	ip, #11
 214:masked-decode-inside.c **** 		if (!(test)) {
 547              		.loc 1 214 31 view .LVU195
 548 0026 471E     		subs	r7, r0, #1
 549              	.LVL38:
 550              	.L58:
 195:masked-decode-inside.c **** 		/* Generate the jj-th cycle set */
 551              		.loc 1 195 2 is_stmt 1 view .LVU196
 197:masked-decode-inside.c **** 		do {
 552              		.loc 1 197 3 view .LVU197
 200:masked-decode-inside.c **** 			size[jj]++;
 553              		.loc 1 200 30 is_stmt 0 view .LVU198
 554 0028 0124     		movs	r4, #1
 555 002a 0CFB0356 		mla	r6, ip, r3, r5
 556              	.LVL39:
 557              	.L31:
 198:masked-decode-inside.c **** 			ii++;
 558              		.loc 1 198 3 is_stmt 1 discriminator 1 view .LVU199
 199:masked-decode-inside.c **** 			cycle[jj][ii] = (cycle[jj][ii - 1] * 2) % n;
 559              		.loc 1 199 4 discriminator 1 view .LVU200
 200:masked-decode-inside.c **** 			size[jj]++;
 560              		.loc 1 200 4 discriminator 1 view .LVU201
 200:masked-decode-inside.c **** 			size[jj]++;
 561              		.loc 1 200 30 is_stmt 0 discriminator 1 view .LVU202
 562 002e 3119     		adds	r1, r6, r4
 200:masked-decode-inside.c **** 			size[jj]++;
 563              		.loc 1 200 39 discriminator 1 view .LVU203
 564 0030 11F8011C 		ldrb	r1, [r1, #-1]	@ zero_extendqisi2
 565 0034 4900     		lsls	r1, r1, #1
 200:masked-decode-inside.c **** 			size[jj]++;
 566              		.loc 1 200 44 discriminator 1 view .LVU204
 567 0036 B1FBF0F8 		udiv	r8, r1, r0
 568 003a 00FB1811 		mls	r1, r0, r8, r1
 200:masked-decode-inside.c **** 			size[jj]++;
 569              		.loc 1 200 18 discriminator 1 view .LVU205
 570 003e 3155     		strb	r1, [r6, r4]
 201:masked-decode-inside.c **** 			aux = (cycle[jj][ii] * 2) % n;
 571              		.loc 1 201 4 is_stmt 1 discriminator 1 view .LVU206
 202:masked-decode-inside.c **** 		} while (aux != cycle[jj][0]);
 572              		.loc 1 202 25 is_stmt 0 discriminator 1 view .LVU207
 573 0040 4900     		lsls	r1, r1, #1
 202:masked-decode-inside.c **** 		} while (aux != cycle[jj][0]);
 574              		.loc 1 202 30 discriminator 1 view .LVU208
 575 0042 B1FBF0F8 		udiv	r8, r1, r0
 576 0046 00FB1811 		mls	r1, r0, r8, r1
 203:masked-decode-inside.c **** 		/* Next cycle set representative */
 577              		.loc 1 203 3 discriminator 1 view .LVU209
 578 004a 96F80080 		ldrb	r8, [r6]	@ zero_extendqisi2
 579 004e C9B2     		uxtb	r1, r1
 201:masked-decode-inside.c **** 			aux = (cycle[jj][ii] * 2) % n;
 580              		.loc 1 201 12 discriminator 1 view .LVU210
 581 0050 0134     		adds	r4, r4, #1
 582              	.LVL40:
 203:masked-decode-inside.c **** 		/* Next cycle set representative */
 583              		.loc 1 203 3 discriminator 1 view .LVU211
 584 0052 8845     		cmp	r8, r1
 201:masked-decode-inside.c **** 			aux = (cycle[jj][ii] * 2) % n;
 585              		.loc 1 201 12 discriminator 1 view .LVU212
 586 0054 E4B2     		uxtb	r4, r4
 202:masked-decode-inside.c **** 		} while (aux != cycle[jj][0]);
 587              		.loc 1 202 4 is_stmt 1 discriminator 1 view .LVU213
 203:masked-decode-inside.c **** 		/* Next cycle set representative */
 588              		.loc 1 203 11 discriminator 1 view .LVU214
 203:masked-decode-inside.c **** 		/* Next cycle set representative */
 589              		.loc 1 203 3 is_stmt 0 discriminator 1 view .LVU215
 590 0056 EAD1     		bne	.L31
 591 0058 0DF80340 		strb	r4, [sp, r3]
 205:masked-decode-inside.c **** 		do {
 592              		.loc 1 205 6 view .LVU216
 593 005c 0024     		movs	r4, #0
 594              	.L39:
 595              	.LVL41:
 206:masked-decode-inside.c **** 			ll++;
 596              		.loc 1 206 3 is_stmt 1 view .LVU217
 207:masked-decode-inside.c **** 			test = 0;
 597              		.loc 1 207 4 view .LVU218
 207:masked-decode-inside.c **** 			test = 0;
 598              		.loc 1 207 6 is_stmt 0 view .LVU219
 599 005e 0134     		adds	r4, r4, #1
 600              	.LVL42:
 207:masked-decode-inside.c **** 			test = 0;
 601              		.loc 1 207 6 view .LVU220
 602 0060 E4B2     		uxtb	r4, r4
 603              	.LVL43:
 208:masked-decode-inside.c **** 			for (ii = 1; ((ii <= jj) && (!test)); ii++)	
 604              		.loc 1 208 4 is_stmt 1 view .LVU221
 209:masked-decode-inside.c **** 			/* Examine previous cycle sets */
 605              		.loc 1 209 4 view .LVU222
 208:masked-decode-inside.c **** 			for (ii = 1; ((ii <= jj) && (!test)); ii++)	
 606              		.loc 1 208 9 is_stmt 0 view .LVU223
 607 0062 0026     		movs	r6, #0
 209:masked-decode-inside.c **** 			/* Examine previous cycle sets */
 608              		.loc 1 209 12 view .LVU224
 609 0064 0121     		movs	r1, #1
 610              	.LVL44:
 611              	.L32:
 209:masked-decode-inside.c **** 			/* Examine previous cycle sets */
 612              		.loc 1 209 17 is_stmt 1 discriminator 1 view .LVU225
 209:masked-decode-inside.c **** 			/* Examine previous cycle sets */
 613              		.loc 1 209 4 is_stmt 0 discriminator 1 view .LVU226
 614 0066 9942     		cmp	r1, r3
 615 0068 1CD8     		bhi	.L35
 209:masked-decode-inside.c **** 			/* Examine previous cycle sets */
 616              		.loc 1 209 29 discriminator 3 view .LVU227
 617 006a F6B9     		cbnz	r6, .L36
 618 006c 01EB8108 		add	r8, r1, r1, lsl #2
 619 0070 01EB4808 		add	r8, r1, r8, lsl #1
 211:masked-decode-inside.c **** 			     if (ll == cycle[ii][kaux])
 620              		.loc 1 211 34 view .LVU228
 621 0074 1DF801A0 		ldrb	r10, [sp, r1]	@ zero_extendqisi2
 622 0078 A844     		add	r8, r8, r5
 623 007a B146     		mov	r9, r6
 624 007c 07E0     		b	.L37
 625              	.LVL45:
 626              	.L34:
 212:masked-decode-inside.c **** 			        test = 1;
 627              		.loc 1 212 9 is_stmt 1 view .LVU229
 212:masked-decode-inside.c **** 			        test = 1;
 628              		.loc 1 212 28 is_stmt 0 view .LVU230
 629 007e 18F8016B 		ldrb	r6, [r8], #1	@ zero_extendqisi2
 630              	.LVL46:
 213:masked-decode-inside.c **** 		} while ((test) && (ll < (n - 1)));
 631              		.loc 1 213 17 view .LVU231
 632 0082 A6EB040B 		sub	fp, r6, r4
 633              	.LVL47:
 213:masked-decode-inside.c **** 		} while ((test) && (ll < (n - 1)));
 634              		.loc 1 213 17 view .LVU232
 635 0086 DBF10006 		rsbs	r6, fp, #0
 636 008a 46EB0B06 		adc	r6, r6, fp
 637              	.LVL48:
 211:masked-decode-inside.c **** 			     if (ll == cycle[ii][kaux])
 638              		.loc 1 211 53 is_stmt 1 view .LVU233
 639              	.L37:
 211:masked-decode-inside.c **** 			     if (ll == cycle[ii][kaux])
 640              		.loc 1 211 21 discriminator 1 view .LVU234
 211:masked-decode-inside.c **** 			     if (ll == cycle[ii][kaux])
 641              		.loc 1 211 6 is_stmt 0 discriminator 1 view .LVU235
 642 008e 5FFA89FB 		uxtb	fp, r9
 643 0092 DA45     		cmp	r10, fp
 644 0094 03D9     		bls	.L33
 211:masked-decode-inside.c **** 			     if (ll == cycle[ii][kaux])
 645              		.loc 1 211 40 discriminator 3 view .LVU236
 646 0096 09F10109 		add	r9, r9, #1
 647              	.LVL49:
 211:masked-decode-inside.c **** 			     if (ll == cycle[ii][kaux])
 648              		.loc 1 211 40 discriminator 3 view .LVU237
 649 009a 002E     		cmp	r6, #0
 650 009c EFD0     		beq	.L34
 651              	.L33:
 209:masked-decode-inside.c **** 			/* Examine previous cycle sets */
 652              		.loc 1 209 42 is_stmt 1 discriminator 2 view .LVU238
 209:masked-decode-inside.c **** 			/* Examine previous cycle sets */
 653              		.loc 1 209 44 is_stmt 0 discriminator 2 view .LVU239
 654 009e 0131     		adds	r1, r1, #1
 655              	.LVL50:
 209:masked-decode-inside.c **** 			/* Examine previous cycle sets */
 656              		.loc 1 209 44 discriminator 2 view .LVU240
 657 00a0 C9B2     		uxtb	r1, r1
 658              	.LVL51:
 209:masked-decode-inside.c **** 			/* Examine previous cycle sets */
 659              		.loc 1 209 44 discriminator 2 view .LVU241
 660 00a2 E0E7     		b	.L32
 661              	.LVL52:
 662              	.L35:
 214:masked-decode-inside.c **** 		if (!(test)) {
 663              		.loc 1 214 11 is_stmt 1 view .LVU242
 214:masked-decode-inside.c **** 		if (!(test)) {
 664              		.loc 1 214 3 is_stmt 0 view .LVU243
 665 00a4 002E     		cmp	r6, #0
 666 00a6 00F0B380 		beq	.L38
 667              	.L36:
 214:masked-decode-inside.c **** 		if (!(test)) {
 668              		.loc 1 214 19 discriminator 1 view .LVU244
 669 00aa BC42     		cmp	r4, r7
 670 00ac D7DB     		blt	.L39
 671              	.LVL53:
 672              	.L59:
 221:masked-decode-inside.c **** 
 673              		.loc 1 221 2 is_stmt 1 view .LVU245
 223:masked-decode-inside.c **** 	d = 2 * t + 1;
 674              		.loc 1 223 5 view .LVU246
 223:masked-decode-inside.c **** 	d = 2 * t + 1;
 675              		.loc 1 223 7 is_stmt 0 view .LVU247
 676 00ae 0A21     		movs	r1, #10
 677 00b0 82F83311 		strb	r1, [r2, #307]
 224:masked-decode-inside.c **** 
 678              		.loc 1 224 2 is_stmt 1 view .LVU248
 228:masked-decode-inside.c **** 	for (ii = 1; ii <= nocycles; ii++) {
 679              		.loc 1 228 8 is_stmt 0 view .LVU249
 680 00b4 0027     		movs	r7, #0
 224:masked-decode-inside.c **** 
 681              		.loc 1 224 4 view .LVU250
 682 00b6 1521     		movs	r1, #21
 683 00b8 82F83411 		strb	r1, [r2, #308]
 227:masked-decode-inside.c **** 	rdncy = 0;
 684              		.loc 1 227 2 is_stmt 1 view .LVU251
 685              	.LVL54:
 228:masked-decode-inside.c **** 	for (ii = 1; ii <= nocycles; ii++) {
 686              		.loc 1 228 2 view .LVU252
 229:masked-decode-inside.c **** 		min[kaux] = 0;
 687              		.loc 1 229 2 view .LVU253
 227:masked-decode-inside.c **** 	rdncy = 0;
 688              		.loc 1 227 7 is_stmt 0 view .LVU254
 689 00bc 3C46     		mov	r4, r7
 690              	.LVL55:
 229:masked-decode-inside.c **** 		min[kaux] = 0;
 691              		.loc 1 229 10 view .LVU255
 692 00be 0121     		movs	r1, #1
 693 00c0 21AE     		add	r6, sp, #132
 694              	.LVL56:
 695              	.L40:
 229:masked-decode-inside.c **** 		min[kaux] = 0;
 696              		.loc 1 229 15 is_stmt 1 discriminator 1 view .LVU256
 229:masked-decode-inside.c **** 		min[kaux] = 0;
 697              		.loc 1 229 2 is_stmt 0 discriminator 1 view .LVU257
 698 00c2 8B42     		cmp	r3, r1
 699 00c4 15D2     		bcs	.L48
 229:masked-decode-inside.c **** 		min[kaux] = 0;
 700              		.loc 1 229 2 view .LVU258
 701 00c6 4FF0000E 		mov	lr, #0
 244:masked-decode-inside.c **** 	for (ii = 0; ii < noterms; ii++)
 702              		.loc 1 244 7 view .LVU259
 703 00ca 0123     		movs	r3, #1
 704              	.LVL57:
 247:masked-decode-inside.c **** 			kaux++;
 705              		.loc 1 247 16 view .LVU260
 706 00cc 0DF58478 		add	r8, sp, #264
 707              	.LVL58:
 708              	.L49:
 245:masked-decode-inside.c **** 		for (jj = 0; jj < size[min[ii]]; jj++) {
 709              		.loc 1 245 15 is_stmt 1 discriminator 1 view .LVU261
 245:masked-decode-inside.c **** 		for (jj = 0; jj < size[min[ii]]; jj++) {
 710              		.loc 1 245 2 is_stmt 0 discriminator 1 view .LVU262
 711 00d0 5FFA8EF1 		uxtb	r1, lr
 712 00d4 8C42     		cmp	r4, r1
 713 00d6 52D9     		bls	.L51
 246:masked-decode-inside.c **** 			zeros[kaux] = cycle[min[ii]][jj];
 714              		.loc 1 246 29 view .LVU263
 715 00d8 16F801CB 		ldrb	ip, [r6], #1	@ zero_extendqisi2
 716 00dc 0CEB8C01 		add	r1, ip, ip, lsl #2
 717 00e0 0CEB4101 		add	r1, ip, r1, lsl #1
 718 00e4 1DF80CC0 		ldrb	ip, [sp, ip]	@ zero_extendqisi2
 719 00e8 9C44     		add	ip, ip, r3
 720 00ea 2944     		add	r1, r1, r5
 721 00ec 5FFA8CFC 		uxtb	ip, ip
 722 00f0 40E0     		b	.L52
 723              	.LVL59:
 724              	.L48:
 230:masked-decode-inside.c **** 		test = 0;
 725              		.loc 1 230 3 is_stmt 1 view .LVU264
 726 00f2 01EB810E 		add	lr, r1, r1, lsl #2
 230:masked-decode-inside.c **** 		test = 0;
 727              		.loc 1 230 13 is_stmt 0 view .LVU265
 728 00f6 4FF0000C 		mov	ip, #0
 729 00fa 01EB4E0E 		add	lr, r1, lr, lsl #1
 232:masked-decode-inside.c **** 			for (root = 1; ((root < d) && (!test)); root++)
 730              		.loc 1 232 3 view .LVU266
 731 00fe 4FF00009 		mov	r9, #0
 232:masked-decode-inside.c **** 			for (root = 1; ((root < d) && (!test)); root++)
 732              		.loc 1 232 27 view .LVU267
 733 0102 1DF801A0 		ldrb	r10, [sp, r1]	@ zero_extendqisi2
 230:masked-decode-inside.c **** 		test = 0;
 734              		.loc 1 230 13 view .LVU268
 735 0106 06F804C0 		strb	ip, [r6, r4]
 231:masked-decode-inside.c **** 		for (jj = 0; ((jj < size[ii]) && (!test)); jj++)
 736              		.loc 1 231 3 is_stmt 1 view .LVU269
 737              	.LVL60:
 232:masked-decode-inside.c **** 			for (root = 1; ((root < d) && (!test)); root++)
 738              		.loc 1 232 3 view .LVU270
 232:masked-decode-inside.c **** 			for (root = 1; ((root < d) && (!test)); root++)
 739              		.loc 1 232 3 is_stmt 0 view .LVU271
 740 010a AE44     		add	lr, lr, r5
 231:masked-decode-inside.c **** 		for (jj = 0; ((jj < size[ii]) && (!test)); jj++)
 741              		.loc 1 231 8 view .LVU272
 742 010c CC46     		mov	ip, r9
 743              	.LVL61:
 744              	.L41:
 232:masked-decode-inside.c **** 			for (root = 1; ((root < d) && (!test)); root++)
 745              		.loc 1 232 16 is_stmt 1 discriminator 1 view .LVU273
 232:masked-decode-inside.c **** 			for (root = 1; ((root < d) && (!test)); root++)
 746              		.loc 1 232 3 is_stmt 0 discriminator 1 view .LVU274
 747 010e 5FFA89F8 		uxtb	r8, r9
 748 0112 C245     		cmp	r10, r8
 749 0114 02D9     		bls	.L45
 232:masked-decode-inside.c **** 			for (root = 1; ((root < d) && (!test)); root++)
 750              		.loc 1 232 33 discriminator 3 view .LVU275
 751 0116 BCF1000F 		cmp	ip, #0
 752 011a 0DD0     		beq	.L46
 753              	.L45:
 238:masked-decode-inside.c **** 			rdncy += size[min[kaux]];
 754              		.loc 1 238 3 is_stmt 1 view .LVU276
 238:masked-decode-inside.c **** 			rdncy += size[min[kaux]];
 755              		.loc 1 238 10 is_stmt 0 view .LVU277
 756 011c 16F804C0 		ldrb	ip, [r6, r4]	@ zero_extendqisi2
 757              	.LVL62:
 238:masked-decode-inside.c **** 			rdncy += size[min[kaux]];
 758              		.loc 1 238 6 view .LVU278
 759 0120 BCF1000F 		cmp	ip, #0
 760 0124 05D0     		beq	.L47
 239:masked-decode-inside.c **** 			kaux++;
 761              		.loc 1 239 4 is_stmt 1 view .LVU279
 239:masked-decode-inside.c **** 			kaux++;
 762              		.loc 1 239 10 is_stmt 0 view .LVU280
 763 0126 1DF80CC0 		ldrb	ip, [sp, ip]	@ zero_extendqisi2
 240:masked-decode-inside.c **** 		}
 764              		.loc 1 240 8 view .LVU281
 765 012a 0134     		adds	r4, r4, #1
 766              	.LVL63:
 239:masked-decode-inside.c **** 			kaux++;
 767              		.loc 1 239 10 view .LVU282
 768 012c 6744     		add	r7, r7, ip
 769              	.LVL64:
 239:masked-decode-inside.c **** 			kaux++;
 770              		.loc 1 239 10 view .LVU283
 771 012e FFB2     		uxtb	r7, r7
 772              	.LVL65:
 240:masked-decode-inside.c **** 		}
 773              		.loc 1 240 4 is_stmt 1 view .LVU284
 240:masked-decode-inside.c **** 		}
 774              		.loc 1 240 8 is_stmt 0 view .LVU285
 775 0130 E4B2     		uxtb	r4, r4
 776              	.LVL66:
 777              	.L47:
 229:masked-decode-inside.c **** 		min[kaux] = 0;
 778              		.loc 1 229 31 is_stmt 1 discriminator 2 view .LVU286
 229:masked-decode-inside.c **** 		min[kaux] = 0;
 779              		.loc 1 229 33 is_stmt 0 discriminator 2 view .LVU287
 780 0132 0131     		adds	r1, r1, #1
 781              	.LVL67:
 229:masked-decode-inside.c **** 		min[kaux] = 0;
 782              		.loc 1 229 33 discriminator 2 view .LVU288
 783 0134 C9B2     		uxtb	r1, r1
 784              	.LVL68:
 229:masked-decode-inside.c **** 		min[kaux] = 0;
 785              		.loc 1 229 33 discriminator 2 view .LVU289
 786 0136 C4E7     		b	.L40
 787              	.LVL69:
 788              	.L46:
 234:masked-decode-inside.c **** 					test = 1;
 789              		.loc 1 234 26 view .LVU290
 790 0138 1EF801BB 		ldrb	fp, [lr], #1	@ zero_extendqisi2
 233:masked-decode-inside.c **** 				if (root == cycle[ii][jj])  {
 791              		.loc 1 233 14 view .LVU291
 792 013c 4FF00108 		mov	r8, #1
 793              	.L44:
 794              	.LVL70:
 234:masked-decode-inside.c **** 					test = 1;
 795              		.loc 1 234 5 is_stmt 1 view .LVU292
 234:masked-decode-inside.c **** 					test = 1;
 796              		.loc 1 234 8 is_stmt 0 view .LVU293
 797 0140 C345     		cmp	fp, r8
 235:masked-decode-inside.c **** 					min[kaux] = ii;
 798              		.loc 1 235 6 is_stmt 1 view .LVU294
 799              	.LVL71:
 236:masked-decode-inside.c **** 				}
 800              		.loc 1 236 6 view .LVU295
 233:masked-decode-inside.c **** 				if (root == cycle[ii][jj])  {
 801              		.loc 1 233 48 is_stmt 0 view .LVU296
 802 0142 08F10108 		add	r8, r8, #1
 803              	.LVL72:
 233:masked-decode-inside.c **** 				if (root == cycle[ii][jj])  {
 804              		.loc 1 233 48 view .LVU297
 805 0146 5FFA88F8 		uxtb	r8, r8
 236:masked-decode-inside.c **** 				}
 806              		.loc 1 236 16 view .LVU298
 807 014a 06BF     		itte	eq
 808 014c 3155     		strbeq	r1, [r6, r4]
 235:masked-decode-inside.c **** 					min[kaux] = ii;
 809              		.loc 1 235 11 view .LVU299
 810 014e 4FF0010C 		moveq	ip, #1
 811 0152 4FF0000C 		movne	ip, #0
 812              	.LVL73:
 233:masked-decode-inside.c **** 				if (root == cycle[ii][jj])  {
 813              		.loc 1 233 44 is_stmt 1 view .LVU300
 233:masked-decode-inside.c **** 				if (root == cycle[ii][jj])  {
 814              		.loc 1 233 19 view .LVU301
 233:masked-decode-inside.c **** 				if (root == cycle[ii][jj])  {
 815              		.loc 1 233 4 is_stmt 0 view .LVU302
 816 0156 B8F1150F 		cmp	r8, #21
 817 015a 02D0     		beq	.L43
 233:masked-decode-inside.c **** 				if (root == cycle[ii][jj])  {
 818              		.loc 1 233 31 discriminator 3 view .LVU303
 819 015c BCF1000F 		cmp	ip, #0
 820 0160 EED0     		beq	.L44
 821              	.L43:
 822              	.LVL74:
 232:masked-decode-inside.c **** 			for (root = 1; ((root < d) && (!test)); root++)
 823              		.loc 1 232 46 is_stmt 1 discriminator 2 view .LVU304
 232:masked-decode-inside.c **** 			for (root = 1; ((root < d) && (!test)); root++)
 824              		.loc 1 232 46 is_stmt 0 discriminator 2 view .LVU305
 825 0162 09F10109 		add	r9, r9, #1
 826              	.LVL75:
 232:masked-decode-inside.c **** 			for (root = 1; ((root < d) && (!test)); root++)
 827              		.loc 1 232 46 discriminator 2 view .LVU306
 828 0166 D2E7     		b	.L41
 829              	.LVL76:
 830              	.L50:
 247:masked-decode-inside.c **** 			kaux++;
 831              		.loc 1 247 4 is_stmt 1 discriminator 3 view .LVU307
 247:masked-decode-inside.c **** 			kaux++;
 832              		.loc 1 247 32 is_stmt 0 discriminator 3 view .LVU308
 833 0168 11F8019B 		ldrb	r9, [r1], #1	@ zero_extendqisi2
 247:masked-decode-inside.c **** 			kaux++;
 834              		.loc 1 247 16 discriminator 3 view .LVU309
 835 016c 08F80390 		strb	r9, [r8, r3]
 248:masked-decode-inside.c **** 		}
 836              		.loc 1 248 4 is_stmt 1 discriminator 3 view .LVU310
 248:masked-decode-inside.c **** 		}
 837              		.loc 1 248 8 is_stmt 0 discriminator 3 view .LVU311
 838 0170 0133     		adds	r3, r3, #1
 839              	.LVL77:
 248:masked-decode-inside.c **** 		}
 840              		.loc 1 248 8 discriminator 3 view .LVU312
 841 0172 DBB2     		uxtb	r3, r3
 246:masked-decode-inside.c **** 			zeros[kaux] = cycle[min[ii]][jj];
 842              		.loc 1 246 36 is_stmt 1 discriminator 3 view .LVU313
 843              	.LVL78:
 844              	.L52:
 246:masked-decode-inside.c **** 			zeros[kaux] = cycle[min[ii]][jj];
 845              		.loc 1 246 16 discriminator 1 view .LVU314
 246:masked-decode-inside.c **** 			zeros[kaux] = cycle[min[ii]][jj];
 846              		.loc 1 246 3 is_stmt 0 discriminator 1 view .LVU315
 847 0174 6345     		cmp	r3, ip
 848 0176 F7D1     		bne	.L50
 245:masked-decode-inside.c **** 		for (jj = 0; jj < size[min[ii]]; jj++) {
 849              		.loc 1 245 29 is_stmt 1 discriminator 2 view .LVU316
 850              	.LVL79:
 245:masked-decode-inside.c **** 		for (jj = 0; jj < size[min[ii]]; jj++) {
 851              		.loc 1 245 29 is_stmt 0 discriminator 2 view .LVU317
 852 0178 0EF1010E 		add	lr, lr, #1
 853              	.LVL80:
 245:masked-decode-inside.c **** 		for (jj = 0; jj < size[min[ii]]; jj++) {
 854              		.loc 1 245 29 discriminator 2 view .LVU318
 855 017c A8E7     		b	.L49
 856              	.LVL81:
 857              	.L51:
 251:masked-decode-inside.c **** 
 858              		.loc 1 251 2 is_stmt 1 view .LVU319
 251:masked-decode-inside.c **** 
 859              		.loc 1 251 13 is_stmt 0 view .LVU320
 860 017e 92F82C30 		ldrb	r3, [r2, #44]	@ zero_extendqisi2
 861 0182 DFF8A8C0 		ldr	ip, .L77+4
 261:masked-decode-inside.c **** 	g[1] = 1;		/* g(x) = (X + zeros[1]) initially */
 862              		.loc 1 261 23 view .LVU321
 863 0186 42AD     		add	r5, sp, #264
 251:masked-decode-inside.c **** 
 864              		.loc 1 251 13 view .LVU322
 865 0188 DB1B     		subs	r3, r3, r7
 251:masked-decode-inside.c **** 
 866              		.loc 1 251 4 view .LVU323
 867 018a 82F83531 		strb	r3, [r2, #309]
 253:masked-decode-inside.c ****       {
 868              		.loc 1 253 5 is_stmt 1 view .LVU324
 261:masked-decode-inside.c **** 	g[1] = 1;		/* g(x) = (X + zeros[1]) initially */
 869              		.loc 1 261 2 view .LVU325
 261:masked-decode-inside.c **** 	g[1] = 1;		/* g(x) = (X + zeros[1]) initially */
 870              		.loc 1 261 23 is_stmt 0 view .LVU326
 871 018e 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 261:masked-decode-inside.c **** 	g[1] = 1;		/* g(x) = (X + zeros[1]) initially */
 872              		.loc 1 261 17 view .LVU327
 873 0190 1344     		add	r3, r3, r2
 262:masked-decode-inside.c **** 	for (ii = 2; ii <= rdncy; ii++) {
 874              		.loc 1 262 7 view .LVU328
 875 0192 0126     		movs	r6, #1
 261:masked-decode-inside.c **** 	g[1] = 1;		/* g(x) = (X + zeros[1]) initially */
 876              		.loc 1 261 7 view .LVU329
 877 0194 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 878 0198 82F83631 		strb	r3, [r2, #310]
 262:masked-decode-inside.c **** 	for (ii = 2; ii <= rdncy; ii++) {
 879              		.loc 1 262 2 is_stmt 1 view .LVU330
 262:masked-decode-inside.c **** 	for (ii = 2; ii <= rdncy; ii++) {
 880              		.loc 1 262 7 is_stmt 0 view .LVU331
 881 019c 82F83761 		strb	r6, [r2, #311]
 263:masked-decode-inside.c **** 	  g[ii] = 1;
 882              		.loc 1 263 2 is_stmt 1 view .LVU332
 883              	.LVL82:
 263:masked-decode-inside.c **** 	  g[ii] = 1;
 884              		.loc 1 263 10 is_stmt 0 view .LVU333
 885 01a0 0223     		movs	r3, #2
 886              	.LVL83:
 887              	.L53:
 263:masked-decode-inside.c **** 	  g[ii] = 1;
 888              		.loc 1 263 15 is_stmt 1 discriminator 1 view .LVU334
 263:masked-decode-inside.c **** 	  g[ii] = 1;
 889              		.loc 1 263 2 is_stmt 0 discriminator 1 view .LVU335
 890 01a2 BB42     		cmp	r3, r7
 891 01a4 03D9     		bls	.L57
 272:masked-decode-inside.c **** 
 892              		.loc 1 272 1 view .LVU336
 893 01a6 0DF2347D 		addw	sp, sp, #1844
 894              	.LCFI7:
 895              		.cfi_remember_state
 896              		.cfi_def_cfa_offset 36
 897              		@ sp needed
 898 01aa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 899              	.LVL84:
 900              	.L57:
 901              	.LCFI8:
 902              		.cfi_restore_state
 264:masked-decode-inside.c **** 	  for (jj = ii - 1; jj > 0; jj--)
 903              		.loc 1 264 4 is_stmt 1 view .LVU337
 264:masked-decode-inside.c **** 	  for (jj = ii - 1; jj > 0; jj--)
 904              		.loc 1 264 10 is_stmt 0 view .LVU338
 905 01ae D118     		adds	r1, r2, r3
 265:masked-decode-inside.c **** 	    if (g[jj] != 0)
 906              		.loc 1 265 12 view .LVU339
 907 01b0 03F1FF3E 		add	lr, r3, #-1
 267:masked-decode-inside.c **** 	    else
 908              		.loc 1 267 61 view .LVU340
 909 01b4 15F80380 		ldrb	r8, [r5, r3]	@ zero_extendqisi2
 264:masked-decode-inside.c **** 	  for (jj = ii - 1; jj > 0; jj--)
 910              		.loc 1 264 10 view .LVU341
 911 01b8 81F83661 		strb	r6, [r1, #310]
 265:masked-decode-inside.c **** 	    if (g[jj] != 0)
 912              		.loc 1 265 4 is_stmt 1 view .LVU342
 913              	.LVL85:
 265:masked-decode-inside.c **** 	    if (g[jj] != 0)
 914              		.loc 1 265 4 is_stmt 0 view .LVU343
 915 01bc 5CFA8EFE 		uxtab	lr, ip, lr
 916              	.LVL86:
 917              	.L54:
 265:masked-decode-inside.c **** 	    if (g[jj] != 0)
 918              		.loc 1 265 22 is_stmt 1 discriminator 1 view .LVU344
 265:masked-decode-inside.c **** 	    if (g[jj] != 0)
 919              		.loc 1 265 4 is_stmt 0 discriminator 1 view .LVU345
 920 01c0 F445     		cmp	ip, lr
 921 01c2 11D1     		bne	.L56
 270:masked-decode-inside.c **** 	}
 922              		.loc 1 270 4 is_stmt 1 discriminator 2 view .LVU346
 270:masked-decode-inside.c **** 	}
 923              		.loc 1 270 31 is_stmt 0 discriminator 2 view .LVU347
 924 01c4 92F83611 		ldrb	r1, [r2, #310]	@ zero_extendqisi2
 270:masked-decode-inside.c **** 	}
 925              		.loc 1 270 29 discriminator 2 view .LVU348
 926 01c8 1144     		add	r1, r1, r2
 263:masked-decode-inside.c **** 	  g[ii] = 1;
 927              		.loc 1 263 30 discriminator 2 view .LVU349
 928 01ca 0133     		adds	r3, r3, #1
 929              	.LVL87:
 270:masked-decode-inside.c **** 	}
 930              		.loc 1 270 29 discriminator 2 view .LVU350
 931 01cc 91F9B010 		ldrsb	r1, [r1, #176]
 270:masked-decode-inside.c **** 	}
 932              		.loc 1 270 36 discriminator 2 view .LVU351
 933 01d0 4144     		add	r1, r1, r8
 270:masked-decode-inside.c **** 	}
 934              		.loc 1 270 49 discriminator 2 view .LVU352
 935 01d2 91FBF0F4 		sdiv	r4, r1, r0
 936 01d6 00FB1411 		mls	r1, r0, r4, r1
 270:masked-decode-inside.c **** 	}
 937              		.loc 1 270 19 discriminator 2 view .LVU353
 938 01da 1144     		add	r1, r1, r2
 263:masked-decode-inside.c **** 	  g[ii] = 1;
 939              		.loc 1 263 30 discriminator 2 view .LVU354
 940 01dc DBB2     		uxtb	r3, r3
 941              	.LVL88:
 270:masked-decode-inside.c **** 	}
 942              		.loc 1 270 9 discriminator 2 view .LVU355
 943 01de 91F82D10 		ldrb	r1, [r1, #45]	@ zero_extendqisi2
 944 01e2 82F83611 		strb	r1, [r2, #310]
 263:masked-decode-inside.c **** 	  g[ii] = 1;
 945              		.loc 1 263 28 is_stmt 1 discriminator 2 view .LVU356
 946              	.LVL89:
 263:masked-decode-inside.c **** 	  g[ii] = 1;
 947              		.loc 1 263 28 is_stmt 0 discriminator 2 view .LVU357
 948 01e6 DCE7     		b	.L53
 949              	.L56:
 266:masked-decode-inside.c **** 	      g[jj] = g[jj - 1] ^ alpha_to[(index_of[g[jj]] + zeros[ii]) % n];
 950              		.loc 1 266 6 is_stmt 1 view .LVU358
 266:masked-decode-inside.c **** 	      g[jj] = g[jj - 1] ^ alpha_to[(index_of[g[jj]] + zeros[ii]) % n];
 951              		.loc 1 266 11 is_stmt 0 view .LVU359
 952 01e8 9EF80040 		ldrb	r4, [lr]	@ zero_extendqisi2
 267:masked-decode-inside.c **** 	    else
 953              		.loc 1 267 17 view .LVU360
 954 01ec 1EF8011C 		ldrb	r1, [lr, #-1]	@ zero_extendqisi2
 266:masked-decode-inside.c **** 	      g[jj] = g[jj - 1] ^ alpha_to[(index_of[g[jj]] + zeros[ii]) % n];
 955              		.loc 1 266 9 view .LVU361
 956 01f0 5CB1     		cbz	r4, .L55
 267:masked-decode-inside.c **** 	    else
 957              		.loc 1 267 8 is_stmt 1 view .LVU362
 267:masked-decode-inside.c **** 	    else
 958              		.loc 1 267 46 is_stmt 0 view .LVU363
 959 01f2 1444     		add	r4, r4, r2
 960 01f4 94F9B040 		ldrsb	r4, [r4, #176]
 267:masked-decode-inside.c **** 	    else
 961              		.loc 1 267 54 view .LVU364
 962 01f8 4444     		add	r4, r4, r8
 267:masked-decode-inside.c **** 	    else
 963              		.loc 1 267 67 view .LVU365
 964 01fa 94FBF0F9 		sdiv	r9, r4, r0
 965 01fe 00FB1944 		mls	r4, r0, r9, r4
 267:masked-decode-inside.c **** 	    else
 966              		.loc 1 267 36 view .LVU366
 967 0202 1444     		add	r4, r4, r2
 267:masked-decode-inside.c **** 	    else
 968              		.loc 1 267 14 view .LVU367
 969 0204 94F82D40 		ldrb	r4, [r4, #45]	@ zero_extendqisi2
 970 0208 6140     		eors	r1, r1, r4
 971              	.L55:
 972 020a 0EF80119 		strb	r1, [lr], #-1
 265:masked-decode-inside.c **** 	    if (g[jj] != 0)
 973              		.loc 1 265 30 is_stmt 1 discriminator 2 view .LVU368
 974 020e D7E7     		b	.L54
 975              	.LVL90:
 976              	.L38:
 215:masked-decode-inside.c **** 			jj++;	/* next cycle set index */
 977              		.loc 1 215 3 view .LVU369
 216:masked-decode-inside.c **** 			cycle[jj][0] = ll;
 978              		.loc 1 216 4 view .LVU370
 216:masked-decode-inside.c **** 			cycle[jj][0] = ll;
 979              		.loc 1 216 6 is_stmt 0 view .LVU371
 980 0210 0133     		adds	r3, r3, #1
 981              	.LVL91:
 216:masked-decode-inside.c **** 			cycle[jj][0] = ll;
 982              		.loc 1 216 6 view .LVU372
 983 0212 DBB2     		uxtb	r3, r3
 984              	.LVL92:
 217:masked-decode-inside.c **** 			size[jj] = 1;
 985              		.loc 1 217 4 is_stmt 1 view .LVU373
 217:masked-decode-inside.c **** 			size[jj] = 1;
 986              		.loc 1 217 17 is_stmt 0 view .LVU374
 987 0214 0CFB03F1 		mul	r1, ip, r3
 988              	.LVL93:
 220:masked-decode-inside.c **** 	nocycles = jj;		/* number of cycle sets modulo n */
 989              		.loc 1 220 2 view .LVU375
 990 0218 BC42     		cmp	r4, r7
 217:masked-decode-inside.c **** 			size[jj] = 1;
 991              		.loc 1 217 17 view .LVU376
 992 021a 6C54     		strb	r4, [r5, r1]
 218:masked-decode-inside.c **** 		}
 993              		.loc 1 218 4 is_stmt 1 view .LVU377
 218:masked-decode-inside.c **** 		}
 994              		.loc 1 218 13 is_stmt 0 view .LVU378
 995 021c 0DF803E0 		strb	lr, [sp, r3]
 220:masked-decode-inside.c **** 	nocycles = jj;		/* number of cycle sets modulo n */
 996              		.loc 1 220 10 is_stmt 1 view .LVU379
 220:masked-decode-inside.c **** 	nocycles = jj;		/* number of cycle sets modulo n */
 997              		.loc 1 220 2 is_stmt 0 view .LVU380
 998 0220 FFF602AF 		blt	.L58
 220:masked-decode-inside.c **** 	nocycles = jj;		/* number of cycle sets modulo n */
 999              		.loc 1 220 2 view .LVU381
 1000 0224 43E7     		b	.L59
 1001              	.L78:
 1002 0226 00BF     		.align	2
 1003              	.L77:
 1004 0228 00000000 		.word	.LANCHOR0
 1005 022c 36010000 		.word	.LANCHOR0+310
 1006              		.cfi_endproc
 1007              	.LFE5:
 1009              		.section	.text.encode_bch,"ax",%progbits
 1010              		.align	1
 1011              		.global	encode_bch
 1012              		.syntax unified
 1013              		.thumb
 1014              		.thumb_func
 1015              		.fpu softvfp
 1017              	encode_bch:
 1018              	.LFB6:
 282:masked-decode-inside.c **** 	register int    i, j;
 1019              		.loc 1 282 1 is_stmt 1 view -0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 0
 1022              		@ frame_needed = 0, uses_anonymous_args = 0
 283:masked-decode-inside.c **** 	register int    feedback;
 1023              		.loc 1 283 2 view .LVU383
 284:masked-decode-inside.c **** 
 1024              		.loc 1 284 2 view .LVU384
 286:masked-decode-inside.c **** 		bb[i] = 0;
 1025              		.loc 1 286 2 view .LVU385
 1026              	.LVL94:
 282:masked-decode-inside.c **** 	register int    i, j;
 1027              		.loc 1 282 1 is_stmt 0 view .LVU386
 1028 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1029              	.LCFI9:
 1030              		.cfi_def_cfa_offset 32
 1031              		.cfi_offset 4, -32
 1032              		.cfi_offset 5, -28
 1033              		.cfi_offset 6, -24
 1034              		.cfi_offset 7, -20
 1035              		.cfi_offset 8, -16
 1036              		.cfi_offset 9, -12
 1037              		.cfi_offset 10, -8
 1038              		.cfi_offset 14, -4
 286:masked-decode-inside.c **** 		bb[i] = 0;
 1039              		.loc 1 286 25 view .LVU387
 1040 0004 264C     		ldr	r4, .L90
 1041 0006 94F83551 		ldrb	r5, [r4, #309]	@ zero_extendqisi2
 1042 000a 94F82C60 		ldrb	r6, [r4, #44]	@ zero_extendqisi2
 1043 000e 761B     		subs	r6, r6, r5
 287:masked-decode-inside.c **** 	for (i = k - 1; i >= 0; i--) {
 1044              		.loc 1 287 9 view .LVU388
 1045 0010 26EAE672 		bic	r2, r6, r6, asr #31
 1046 0014 0021     		movs	r1, #0
 1047 0016 04F2B910 		addw	r0, r4, #441
 1048 001a FFF7FEFF 		bl	memset
 1049              	.LVL95:
 288:masked-decode-inside.c **** 		feedback = data[i] ^ bb[length - k - 1];
 1050              		.loc 1 288 2 is_stmt 1 view .LVU389
 296:masked-decode-inside.c **** 		} else {
 1051              		.loc 1 296 17 is_stmt 0 view .LVU390
 1052 001e 94F83671 		ldrb	r7, [r4, #310]	@ zero_extendqisi2
 296:masked-decode-inside.c **** 		} else {
 1053              		.loc 1 296 10 view .LVU391
 1054 0022 003F     		subs	r7, r7, #0
 288:masked-decode-inside.c **** 		feedback = data[i] ^ bb[length - k - 1];
 1055              		.loc 1 288 9 view .LVU392
 1056 0024 05F1FF35 		add	r5, r5, #-1
 1057              	.LVL96:
 296:masked-decode-inside.c **** 		} else {
 1058              		.loc 1 296 10 view .LVU393
 1059 0028 18BF     		it	ne
 1060 002a 0127     		movne	r7, #1
 289:masked-decode-inside.c **** 		if (feedback != 0) {
 1061              		.loc 1 289 18 view .LVU394
 1062 002c 04F50F79 		add	r9, r4, #572
 1063 0030 04F2B918 		addw	r8, r4, #441
 292:masked-decode-inside.c **** 					bb[j] = bb[j - 1] ^ feedback;
 1064              		.loc 1 292 10 view .LVU395
 1065 0034 04F59B7A 		add	r10, r4, #310
 1066              	.L80:
 288:masked-decode-inside.c **** 		feedback = data[i] ^ bb[length - k - 1];
 1067              		.loc 1 288 18 is_stmt 1 discriminator 1 view .LVU396
 288:masked-decode-inside.c **** 		feedback = data[i] ^ bb[length - k - 1];
 1068              		.loc 1 288 2 is_stmt 0 discriminator 1 view .LVU397
 1069 0038 6B1C     		adds	r3, r5, #1
 1070 003a 01D1     		bne	.L86
 303:masked-decode-inside.c **** 
 1071              		.loc 1 303 1 view .LVU398
 1072 003c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1073              	.LVL97:
 1074              	.L86:
 289:masked-decode-inside.c **** 		if (feedback != 0) {
 1075              		.loc 1 289 3 is_stmt 1 view .LVU399
 289:masked-decode-inside.c **** 		if (feedback != 0) {
 1076              		.loc 1 289 38 is_stmt 0 view .LVU400
 1077 0040 721E     		subs	r2, r6, #1
 289:masked-decode-inside.c **** 		if (feedback != 0) {
 1078              		.loc 1 289 26 view .LVU401
 1079 0042 A118     		adds	r1, r4, r2
 289:masked-decode-inside.c **** 		if (feedback != 0) {
 1080              		.loc 1 289 18 view .LVU402
 1081 0044 15F80930 		ldrb	r3, [r5, r9]	@ zero_extendqisi2
 289:masked-decode-inside.c **** 		if (feedback != 0) {
 1082              		.loc 1 289 26 view .LVU403
 1083 0048 91F8B911 		ldrb	r1, [r1, #441]	@ zero_extendqisi2
 1084              	.LVL98:
 290:masked-decode-inside.c **** 			for (j = length - k - 1; j > 0; j--)
 1085              		.loc 1 290 3 is_stmt 1 view .LVU404
 290:masked-decode-inside.c **** 			for (j = length - k - 1; j > 0; j--)
 1086              		.loc 1 290 6 is_stmt 0 view .LVU405
 1087 004c 8B42     		cmp	r3, r1
 1088 004e 13D1     		bne	.L81
 299:masked-decode-inside.c **** 			bb[0] = 0;
 1089              		.loc 1 299 11 view .LVU406
 1090 0050 002E     		cmp	r6, #0
 1091 0052 C6F10200 		rsb	r0, r6, #2
 299:masked-decode-inside.c **** 			bb[0] = 0;
 1092              		.loc 1 299 15 view .LVU407
 1093 0056 A6F10201 		sub	r1, r6, #2
 1094              	.LVL99:
 299:masked-decode-inside.c **** 			bb[0] = 0;
 1095              		.loc 1 299 11 view .LVU408
 1096 005a D8BF     		it	le
 1097 005c 0120     		movle	r0, #1
 299:masked-decode-inside.c **** 			bb[0] = 0;
 1098              		.loc 1 299 15 view .LVU409
 1099 005e 0144     		add	r1, r1, r0
 299:masked-decode-inside.c **** 			bb[0] = 0;
 1100              		.loc 1 299 11 view .LVU410
 1101 0060 1044     		add	r0, r0, r2
 1102 0062 4144     		add	r1, r1, r8
 1103 0064 D8BF     		it	le
 1104 0066 0022     		movle	r2, #0
 1105              	.LVL100:
 299:masked-decode-inside.c **** 			bb[0] = 0;
 1106              		.loc 1 299 11 view .LVU411
 1107 0068 4044     		add	r0, r0, r8
 1108 006a FFF7FEFF 		bl	memmove
 1109              	.LVL101:
 300:masked-decode-inside.c **** 		}
 1110              		.loc 1 300 4 is_stmt 1 view .LVU412
 300:masked-decode-inside.c **** 		}
 1111              		.loc 1 300 10 is_stmt 0 view .LVU413
 1112 006e 0023     		movs	r3, #0
 1113 0070 84F8B931 		strb	r3, [r4, #441]
 1114              	.L82:
 288:masked-decode-inside.c **** 		feedback = data[i] ^ bb[length - k - 1];
 1115              		.loc 1 288 26 is_stmt 1 discriminator 2 view .LVU414
 288:masked-decode-inside.c **** 		feedback = data[i] ^ bb[length - k - 1];
 1116              		.loc 1 288 27 is_stmt 0 discriminator 2 view .LVU415
 1117 0074 013D     		subs	r5, r5, #1
 1118              	.LVL102:
 288:masked-decode-inside.c **** 		feedback = data[i] ^ bb[length - k - 1];
 1119              		.loc 1 288 27 discriminator 2 view .LVU416
 1120 0076 DFE7     		b	.L80
 1121              	.LVL103:
 1122              	.L81:
 289:masked-decode-inside.c **** 		if (feedback != 0) {
 1123              		.loc 1 289 22 view .LVU417
 1124 0078 4B40     		eors	r3, r3, r1
 1125              	.LVL104:
 289:masked-decode-inside.c **** 		if (feedback != 0) {
 1126              		.loc 1 289 22 view .LVU418
 1127 007a 08EB0201 		add	r1, r8, r2
 1128              	.LVL105:
 1129              	.L83:
 291:masked-decode-inside.c **** 				if (g[j] != 0)
 1130              		.loc 1 291 29 is_stmt 1 discriminator 1 view .LVU419
 291:masked-decode-inside.c **** 				if (g[j] != 0)
 1131              		.loc 1 291 4 is_stmt 0 discriminator 1 view .LVU420
 1132 007e 002A     		cmp	r2, #0
 1133 0080 02DC     		bgt	.L85
 296:masked-decode-inside.c **** 		} else {
 1134              		.loc 1 296 4 is_stmt 1 view .LVU421
 296:masked-decode-inside.c **** 		} else {
 1135              		.loc 1 296 10 is_stmt 0 view .LVU422
 1136 0082 84F8B971 		strb	r7, [r4, #441]
 1137 0086 F5E7     		b	.L82
 1138              	.L85:
 292:masked-decode-inside.c **** 					bb[j] = bb[j - 1] ^ feedback;
 1139              		.loc 1 292 5 is_stmt 1 view .LVU423
 292:masked-decode-inside.c **** 					bb[j] = bb[j - 1] ^ feedback;
 1140              		.loc 1 292 10 is_stmt 0 view .LVU424
 1141 0088 12F80AC0 		ldrb	ip, [r2, r10]	@ zero_extendqisi2
 293:masked-decode-inside.c **** 				else
 1142              		.loc 1 293 16 view .LVU425
 1143 008c 11F8010C 		ldrb	r0, [r1, #-1]	@ zero_extendqisi2
 293:masked-decode-inside.c **** 				else
 1144              		.loc 1 293 19 view .LVU426
 1145 0090 013A     		subs	r2, r2, #1
 1146              	.LVL106:
 292:masked-decode-inside.c **** 					bb[j] = bb[j - 1] ^ feedback;
 1147              		.loc 1 292 8 view .LVU427
 1148 0092 BCF1000F 		cmp	ip, #0
 1149 0096 00D0     		beq	.L84
 293:masked-decode-inside.c **** 				else
 1150              		.loc 1 293 6 is_stmt 1 view .LVU428
 293:masked-decode-inside.c **** 				else
 1151              		.loc 1 293 24 is_stmt 0 view .LVU429
 1152 0098 5840     		eors	r0, r0, r3
 1153              	.L84:
 1154 009a 01F80109 		strb	r0, [r1], #-1
 291:masked-decode-inside.c **** 				if (g[j] != 0)
 1155              		.loc 1 291 36 is_stmt 1 discriminator 2 view .LVU430
 1156              	.LVL107:
 291:masked-decode-inside.c **** 				if (g[j] != 0)
 1157              		.loc 1 291 36 is_stmt 0 discriminator 2 view .LVU431
 1158 009e EEE7     		b	.L83
 1159              	.L91:
 1160              		.align	2
 1161              	.L90:
 1162 00a0 00000000 		.word	.LANCHOR0
 1163              		.cfi_endproc
 1164              	.LFE6:
 1166              		.section	.text.pompom,"ax",%progbits
 1167              		.align	1
 1168              		.global	pompom
 1169              		.syntax unified
 1170              		.thumb
 1171              		.thumb_func
 1172              		.fpu softvfp
 1174              	pompom:
 1175              	.LFB7:
 330:masked-decode-inside.c **** 	register uint8_t    i, j, u, q, t2, count = 0, syn_error = 0;
 1176              		.loc 1 330 1 is_stmt 1 view -0
 1177              		.cfi_startproc
 1178              		@ args = 0, pretend = 0, frame = 1304
 1179              		@ frame_needed = 0, uses_anonymous_args = 0
 331:masked-decode-inside.c **** 	int8_t             elp[SIZE2][SIZE2], d[SIZE], l[SIZE], u_lu[SIZE], s[SIZE];
 1180              		.loc 1 331 2 view .LVU433
 1181              	.LVL108:
 332:masked-decode-inside.c **** 	uint8_t             loc[SIZE], err[SIZE], reg[SIZE];
 1182              		.loc 1 332 2 view .LVU434
 333:masked-decode-inside.c **** 	t2 = 2 * t;
 1183              		.loc 1 333 2 view .LVU435
 334:masked-decode-inside.c **** 
 1184              		.loc 1 334 2 view .LVU436
 330:masked-decode-inside.c **** 	register uint8_t    i, j, u, q, t2, count = 0, syn_error = 0;
 1185              		.loc 1 330 1 is_stmt 0 view .LVU437
 1186 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1187              	.LCFI10:
 1188              		.cfi_def_cfa_offset 36
 1189              		.cfi_offset 4, -36
 1190              		.cfi_offset 5, -32
 1191              		.cfi_offset 6, -28
 1192              		.cfi_offset 7, -24
 1193              		.cfi_offset 8, -20
 1194              		.cfi_offset 9, -16
 1195              		.cfi_offset 10, -12
 1196              		.cfi_offset 11, -8
 1197              		.cfi_offset 14, -4
 334:masked-decode-inside.c **** 
 1198              		.loc 1 334 5 view .LVU438
 1199 0004 BD4A     		ldr	r2, .L156
 330:masked-decode-inside.c **** 	register uint8_t    i, j, u, q, t2, count = 0, syn_error = 0;
 1200              		.loc 1 330 1 view .LVU439
 1201 0006 ADF21C5D 		subw	sp, sp, #1308
 1202              	.LCFI11:
 1203              		.cfi_def_cfa_offset 1344
 334:masked-decode-inside.c **** 
 1204              		.loc 1 334 5 view .LVU440
 1205 000a 92F83331 		ldrb	r3, [r2, #307]	@ zero_extendqisi2
 1206 000e 0293     		str	r3, [sp, #8]
 1207 0010 5B00     		lsls	r3, r3, #1
 1208 0012 DBB2     		uxtb	r3, r3
 1209 0014 0193     		str	r3, [sp, #4]
 1210              	.LVL109:
 337:masked-decode-inside.c **** 		s[i] = 0;
 1211              		.loc 1 337 2 is_stmt 1 view .LVU441
 331:masked-decode-inside.c **** 	int8_t             elp[SIZE2][SIZE2], d[SIZE], l[SIZE], u_lu[SIZE], s[SIZE];
 1212              		.loc 1 331 49 is_stmt 0 view .LVU442
 1213 0016 0027     		movs	r7, #0
 1214 0018 6AAB     		add	r3, sp, #424
 339:masked-decode-inside.c **** 			s[i] ^= recd[j] * alpha_to[(i * j) % n];
 1215              		.loc 1 339 17 view .LVU443
 1216 001a 92F82CA0 		ldrb	r10, [r2, #44]	@ zero_extendqisi2
 340:masked-decode-inside.c ****         }
 1217              		.loc 1 340 39 view .LVU444
 1218 001e 92F82B60 		ldrb	r6, [r2, #43]	@ zero_extendqisi2
 337:masked-decode-inside.c **** 		s[i] = 0;
 1219              		.loc 1 337 2 view .LVU445
 1220 0022 4FF0010C 		mov	ip, #1
 1221 0026 9946     		mov	r9, r3
 1222 0028 3C46     		mov	r4, r7
 1223              	.LVL110:
 1224              	.L93:
 337:masked-decode-inside.c **** 		s[i] = 0;
 1225              		.loc 1 337 14 is_stmt 1 discriminator 1 view .LVU446
 337:masked-decode-inside.c **** 		s[i] = 0;
 1226              		.loc 1 337 2 is_stmt 0 discriminator 1 view .LVU447
 1227 002a 0198     		ldr	r0, [sp, #4]
 1228 002c 5FFA8CF1 		uxtb	r1, ip
 1229 0030 8842     		cmp	r0, r1
 1230 0032 80F08B80 		bcs	.L96
 351:masked-decode-inside.c **** 		/*
 1231              		.loc 1 351 2 is_stmt 1 view .LVU448
 351:masked-decode-inside.c **** 		/*
 1232              		.loc 1 351 5 is_stmt 0 view .LVU449
 1233 0036 002F     		cmp	r7, #0
 1234 0038 00F0B881 		beq	.L134
 362:masked-decode-inside.c **** 		d[1] = s[1];		/* index form */
 1235              		.loc 1 362 3 is_stmt 1 view .LVU450
 367:masked-decode-inside.c **** 			elp[1][i] = 0;	/* polynomial form */
 1236              		.loc 1 367 14 is_stmt 0 view .LVU451
 1237 003c 0028     		cmp	r0, #0
 1238 003e 00F1FF35 		add	r5, r0, #-1
 363:masked-decode-inside.c **** 		elp[0][0] = 0;		/* index form */
 1239              		.loc 1 363 8 view .LVU452
 1240 0042 99F80130 		ldrb	r3, [r9, #1]	@ zero_extendqisi2
 1241 0046 8DF81D30 		strb	r3, [sp, #29]
 367:masked-decode-inside.c **** 			elp[1][i] = 0;	/* polynomial form */
 1242              		.loc 1 367 14 view .LVU453
 1243 004a EDB2     		uxtb	r5, r5
 1244 004c 08BF     		it	eq
 1245 004e 0025     		moveq	r5, #0
 365:masked-decode-inside.c **** 		for (i = 1; i < t2; i++) {
 1246              		.loc 1 365 13 view .LVU454
 1247 0050 0123     		movs	r3, #1
 367:masked-decode-inside.c **** 			elp[1][i] = 0;	/* polynomial form */
 1248              		.loc 1 367 14 view .LVU455
 1249 0052 2A46     		mov	r2, r5
 1250 0054 FF21     		movs	r1, #255
 1251 0056 0DF23530 		addw	r0, sp, #821
 365:masked-decode-inside.c **** 		for (i = 1; i < t2; i++) {
 1252              		.loc 1 365 13 view .LVU456
 1253 005a 8DF84A33 		strb	r3, [sp, #842]
 362:masked-decode-inside.c **** 		d[1] = s[1];		/* index form */
 1254              		.loc 1 362 8 view .LVU457
 1255 005e 8DF81C40 		strb	r4, [sp, #28]
 363:masked-decode-inside.c **** 		elp[0][0] = 0;		/* index form */
 1256              		.loc 1 363 3 is_stmt 1 view .LVU458
 364:masked-decode-inside.c **** 		elp[1][0] = 1;		/* polynomial form */
 1257              		.loc 1 364 3 view .LVU459
 364:masked-decode-inside.c **** 		elp[1][0] = 1;		/* polynomial form */
 1258              		.loc 1 364 13 is_stmt 0 view .LVU460
 1259 0062 8DF83443 		strb	r4, [sp, #820]
 365:masked-decode-inside.c **** 		for (i = 1; i < t2; i++) {
 1260              		.loc 1 365 3 is_stmt 1 view .LVU461
 366:masked-decode-inside.c **** 			elp[0][i] = -1;	/* index form */
 1261              		.loc 1 366 3 view .LVU462
 1262              	.LVL111:
 367:masked-decode-inside.c **** 			elp[1][i] = 0;	/* polynomial form */
 1263              		.loc 1 367 14 is_stmt 0 view .LVU463
 1264 0066 FFF7FEFF 		bl	memset
 1265              	.LVL112:
 368:masked-decode-inside.c **** 		}
 1266              		.loc 1 368 14 view .LVU464
 1267 006a 2A46     		mov	r2, r5
 1268 006c 0021     		movs	r1, #0
 1269 006e 0DF24B30 		addw	r0, sp, #843
 1270 0072 FFF7FEFF 		bl	memset
 1271              	.LVL113:
 370:masked-decode-inside.c **** 		l[1] = 0;
 1272              		.loc 1 370 3 is_stmt 1 view .LVU465
 372:masked-decode-inside.c **** 		u_lu[1] = 0;
 1273              		.loc 1 372 11 is_stmt 0 view .LVU466
 1274 0076 FF22     		movs	r2, #255
 1275 0078 49AB     		add	r3, sp, #292
 1276 007a 8DF82421 		strb	r2, [sp, #292]
 382:masked-decode-inside.c **** 				}
 1277              		.loc 1 382 26 view .LVU467
 1278 007e DFF87CA2 		ldr	r10, .L156
 370:masked-decode-inside.c **** 		l[1] = 0;
 1279              		.loc 1 370 8 view .LVU468
 1280 0082 8DF8A040 		strb	r4, [sp, #160]
 371:masked-decode-inside.c **** 		u_lu[0] = -1;
 1281              		.loc 1 371 3 is_stmt 1 view .LVU469
 374:masked-decode-inside.c ****  
 1282              		.loc 1 374 5 is_stmt 0 view .LVU470
 1283 0086 0022     		movs	r2, #0
 371:masked-decode-inside.c **** 		u_lu[0] = -1;
 1284              		.loc 1 371 8 view .LVU471
 1285 0088 8DF8A140 		strb	r4, [sp, #161]
 372:masked-decode-inside.c **** 		u_lu[1] = 0;
 1286              		.loc 1 372 3 is_stmt 1 view .LVU472
 373:masked-decode-inside.c **** 		u = 0;
 1287              		.loc 1 373 3 view .LVU473
 373:masked-decode-inside.c **** 		u = 0;
 1288              		.loc 1 373 11 is_stmt 0 view .LVU474
 1289 008c 8DF82541 		strb	r4, [sp, #293]
 374:masked-decode-inside.c ****  
 1290              		.loc 1 374 3 is_stmt 1 view .LVU475
 1291              	.LVL114:
 374:masked-decode-inside.c ****  
 1292              		.loc 1 374 3 is_stmt 0 view .LVU476
 1293 0090 0DF11D08 		add	r8, sp, #29
 1294 0094 0DF1A109 		add	r9, sp, #161
 373:masked-decode-inside.c **** 		u = 0;
 1295              		.loc 1 373 11 view .LVU477
 1296 0098 0225     		movs	r5, #2
 374:masked-decode-inside.c ****  
 1297              		.loc 1 374 5 view .LVU478
 1298 009a 0092     		str	r2, [sp]
 398:masked-decode-inside.c **** 				      q = j;
 1299              		.loc 1 398 34 view .LVU479
 1300 009c 0493     		str	r3, [sp, #16]
 1301              	.LVL115:
 1302              	.L122:
 376:masked-decode-inside.c **** 			u++;
 1303              		.loc 1 376 3 is_stmt 1 view .LVU480
 377:masked-decode-inside.c **** 			if (d[u] == -1) {
 1304              		.loc 1 377 4 view .LVU481
 1305 009e 009C     		ldr	r4, [sp]
 378:masked-decode-inside.c **** 				l[u + 1] = l[u];
 1306              		.loc 1 378 9 is_stmt 0 view .LVU482
 1307 00a0 98F900B0 		ldrsb	fp, [r8]
 379:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 1308              		.loc 1 379 17 view .LVU483
 1309 00a4 19F9012B 		ldrsb	r2, [r9], #1
 377:masked-decode-inside.c **** 			if (d[u] == -1) {
 1310              		.loc 1 377 5 view .LVU484
 1311 00a8 631C     		adds	r3, r4, #1
 1312 00aa DBB2     		uxtb	r3, r3
 1313 00ac 0093     		str	r3, [sp]
 1314              	.LVL116:
 378:masked-decode-inside.c **** 				l[u + 1] = l[u];
 1315              		.loc 1 378 4 is_stmt 1 view .LVU485
 378:masked-decode-inside.c **** 				l[u + 1] = l[u];
 1316              		.loc 1 378 7 is_stmt 0 view .LVU486
 1317 00ae BBF1FF3F 		cmp	fp, #-1
 1318 00b2 05F1FF33 		add	r3, r5, #-1
 1319 00b6 0393     		str	r3, [sp, #12]
 1320 00b8 4346     		mov	r3, r8
 1321 00ba 08F10108 		add	r8, r8, #1
 1322 00be 6DD0     		beq	.L98
 1323 00c0 013B     		subs	r3, r3, #1
 1324              	.L99:
 1325              	.LVL117:
 391:masked-decode-inside.c **** 					q--;
 1326              		.loc 1 391 11 is_stmt 1 view .LVU487
 391:masked-decode-inside.c **** 					q--;
 1327              		.loc 1 391 14 is_stmt 0 view .LVU488
 1328 00c2 13F90119 		ldrsb	r1, [r3], #-1
 391:masked-decode-inside.c **** 					q--;
 1329              		.loc 1 391 11 view .LVU489
 1330 00c6 0131     		adds	r1, r1, #1
 1331 00c8 40F0BB80 		bne	.L104
 391:masked-decode-inside.c **** 					q--;
 1332              		.loc 1 391 25 discriminator 1 view .LVU490
 1333 00cc 002C     		cmp	r4, #0
 1334 00ce 40F0B580 		bne	.L105
 1335              	.LVL118:
 1336              	.L106:
 408:masked-decode-inside.c **** 					l[u + 1] = l[u];
 1337              		.loc 1 408 5 is_stmt 1 view .LVU491
 408:masked-decode-inside.c **** 					l[u + 1] = l[u];
 1338              		.loc 1 408 17 is_stmt 0 view .LVU492
 1339 00d2 28AB     		add	r3, sp, #160
 1340 00d4 1857     		ldrsb	r0, [r3, r4]
 408:masked-decode-inside.c **** 					l[u + 1] = l[u];
 1341              		.loc 1 408 21 view .LVU493
 1342 00d6 039B     		ldr	r3, [sp, #12]
 1343 00d8 C118     		adds	r1, r0, r3
 408:masked-decode-inside.c **** 					l[u + 1] = l[u];
 1344              		.loc 1 408 25 view .LVU494
 1345 00da 091B     		subs	r1, r1, r4
 408:masked-decode-inside.c **** 					l[u + 1] = l[u];
 1346              		.loc 1 408 8 view .LVU495
 1347 00dc 8A42     		cmp	r2, r1
 1348 00de 40F3C880 		ble	.L109
 409:masked-decode-inside.c **** 				else
 1349              		.loc 1 409 6 is_stmt 1 view .LVU496
 409:masked-decode-inside.c **** 				else
 1350              		.loc 1 409 15 is_stmt 0 view .LVU497
 1351 00e2 89F80020 		strb	r2, [r9]
 1352              	.L111:
 415:masked-decode-inside.c **** 				for (i = 0; i <= l[q]; i++)
 1353              		.loc 1 415 20 discriminator 1 view .LVU498
 1354 00e6 1623     		movs	r3, #22
 1355 00e8 CDAA     		add	r2, sp, #820
 1356 00ea 03FB0522 		mla	r2, r3, r5, r2
 1357 00ee 0592     		str	r2, [sp, #20]
 1358 00f0 0021     		movs	r1, #0
 1359 00f2 019A     		ldr	r2, [sp, #4]
 1360 00f4 0598     		ldr	r0, [sp, #20]
 1361 00f6 FFF7FEFF 		bl	memset
 1362              	.LVL119:
 416:masked-decode-inside.c **** 					if (elp[q][i] != -1)
 1363              		.loc 1 416 23 discriminator 1 view .LVU499
 1364 00fa 28AB     		add	r3, sp, #160
 417:masked-decode-inside.c **** 						elp[u + 1][i + u - q] = 
 1365              		.loc 1 417 16 discriminator 1 view .LVU500
 1366 00fc CDAA     		add	r2, sp, #820
 416:masked-decode-inside.c **** 					if (elp[q][i] != -1)
 1367              		.loc 1 416 23 discriminator 1 view .LVU501
 1368 00fe 13F904C0 		ldrsb	ip, [r3, r4]
 417:masked-decode-inside.c **** 						elp[u + 1][i + u - q] = 
 1369              		.loc 1 417 16 discriminator 1 view .LVU502
 1370 0102 1623     		movs	r3, #22
 419:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 1371              		.loc 1 419 51 discriminator 1 view .LVU503
 1372 0104 06EB0B0E 		add	lr, r6, fp
 1373 0108 0020     		movs	r0, #0
 417:masked-decode-inside.c **** 						elp[u + 1][i + u - q] = 
 1374              		.loc 1 417 16 discriminator 1 view .LVU504
 1375 010a 03FB0421 		mla	r1, r3, r4, r2
 1376              	.L110:
 1377              	.LVL120:
 416:masked-decode-inside.c **** 					if (elp[q][i] != -1)
 1378              		.loc 1 416 17 is_stmt 1 discriminator 1 view .LVU505
 416:masked-decode-inside.c **** 					if (elp[q][i] != -1)
 1379              		.loc 1 416 19 is_stmt 0 discriminator 1 view .LVU506
 1380 010e C2B2     		uxtb	r2, r0
 416:masked-decode-inside.c **** 					if (elp[q][i] != -1)
 1381              		.loc 1 416 5 discriminator 1 view .LVU507
 1382 0110 6245     		cmp	r2, ip
 1383 0112 40F3B480 		ble	.L113
 421:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 1384              		.loc 1 421 29 view .LVU508
 1385 0116 0398     		ldr	r0, [sp, #12]
 1386              	.LVL121:
 420:masked-decode-inside.c **** 					elp[u + 1][i] ^= elp[u][i];
 1387              		.loc 1 420 23 view .LVU509
 1388 0118 19F901CC 		ldrsb	ip, [r9, #-1]
 421:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 1389              		.loc 1 421 20 view .LVU510
 1390 011c 1622     		movs	r2, #22
 1391              	.LVL122:
 421:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 1392              		.loc 1 421 20 view .LVU511
 1393 011e CDAB     		add	r3, sp, #820
 1394 0120 02FB0534 		mla	r4, r2, r5, r3
 420:masked-decode-inside.c **** 					elp[u + 1][i] ^= elp[u][i];
 1395              		.loc 1 420 23 view .LVU512
 1396 0124 0021     		movs	r1, #0
 421:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 1397              		.loc 1 421 29 view .LVU513
 1398 0126 02FB0032 		mla	r2, r2, r0, r3
 1399              	.L114:
 1400              	.LVL123:
 420:masked-decode-inside.c **** 					elp[u + 1][i] ^= elp[u][i];
 1401              		.loc 1 420 17 is_stmt 1 discriminator 1 view .LVU514
 420:masked-decode-inside.c **** 					elp[u + 1][i] ^= elp[u][i];
 1402              		.loc 1 420 19 is_stmt 0 discriminator 1 view .LVU515
 1403 012a CBB2     		uxtb	r3, r1
 420:masked-decode-inside.c **** 					elp[u + 1][i] ^= elp[u][i];
 1404              		.loc 1 420 5 discriminator 1 view .LVU516
 1405 012c 6345     		cmp	r3, ip
 1406 012e 01F10101 		add	r1, r1, #1
 1407              	.LVL124:
 420:masked-decode-inside.c **** 					elp[u + 1][i] ^= elp[u][i];
 1408              		.loc 1 420 5 discriminator 1 view .LVU517
 1409 0132 42DC     		bgt	.L116
 421:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 1410              		.loc 1 421 6 is_stmt 1 discriminator 3 view .LVU518
 421:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 1411              		.loc 1 421 20 is_stmt 0 discriminator 3 view .LVU519
 1412 0134 E05C     		ldrb	r0, [r4, r3]	@ zero_extendqisi2
 1413 0136 12F803E0 		ldrb	lr, [r2, r3]	@ zero_extendqisi2
 1414 013a 80EA0E00 		eor	r0, r0, lr
 1415 013e E054     		strb	r0, [r4, r3]
 422:masked-decode-inside.c **** 				}
 1416              		.loc 1 422 6 is_stmt 1 discriminator 3 view .LVU520
 422:masked-decode-inside.c **** 				}
 1417              		.loc 1 422 33 is_stmt 0 discriminator 3 view .LVU521
 1418 0140 D056     		ldrsb	r0, [r2, r3]
 422:masked-decode-inside.c **** 				}
 1419              		.loc 1 422 26 discriminator 3 view .LVU522
 1420 0142 5044     		add	r0, r0, r10
 422:masked-decode-inside.c **** 				}
 1421              		.loc 1 422 16 discriminator 3 view .LVU523
 1422 0144 90F8B000 		ldrb	r0, [r0, #176]	@ zero_extendqisi2
 1423 0148 D054     		strb	r0, [r2, r3]
 420:masked-decode-inside.c **** 					elp[u + 1][i] ^= elp[u][i];
 1424              		.loc 1 420 28 is_stmt 1 discriminator 3 view .LVU524
 1425              	.LVL125:
 420:masked-decode-inside.c **** 					elp[u + 1][i] ^= elp[u][i];
 1426              		.loc 1 420 28 is_stmt 0 discriminator 3 view .LVU525
 1427 014a EEE7     		b	.L114
 1428              	.LVL126:
 1429              	.L96:
 338:masked-decode-inside.c **** 		for (j = 0; j < length; j++) {
 1430              		.loc 1 338 3 is_stmt 1 view .LVU526
 339:masked-decode-inside.c **** 			s[i] ^= recd[j] * alpha_to[(i * j) % n];
 1431              		.loc 1 339 3 is_stmt 0 view .LVU527
 1432 014c 0020     		movs	r0, #0
 1433 014e DFF8B081 		ldr	r8, .L156+4
 338:masked-decode-inside.c **** 		for (j = 0; j < length; j++) {
 1434              		.loc 1 338 8 view .LVU528
 1435 0152 5C70     		strb	r4, [r3, #1]
 339:masked-decode-inside.c **** 			s[i] ^= recd[j] * alpha_to[(i * j) % n];
 1436              		.loc 1 339 3 is_stmt 1 view .LVU529
 1437              	.LVL127:
 339:masked-decode-inside.c **** 			s[i] ^= recd[j] * alpha_to[(i * j) % n];
 1438              		.loc 1 339 3 is_stmt 0 view .LVU530
 1439 0154 8646     		mov	lr, r0
 1440              	.LVL128:
 1441              	.L94:
 339:masked-decode-inside.c **** 			s[i] ^= recd[j] * alpha_to[(i * j) % n];
 1442              		.loc 1 339 15 is_stmt 1 discriminator 1 view .LVU531
 339:masked-decode-inside.c **** 			s[i] ^= recd[j] * alpha_to[(i * j) % n];
 1443              		.loc 1 339 3 is_stmt 0 discriminator 1 view .LVU532
 1444 0156 5FFA8EF5 		uxtb	r5, lr
 1445 015a AA45     		cmp	r10, r5
 340:masked-decode-inside.c ****         }
 1446              		.loc 1 340 9 discriminator 1 view .LVU533
 1447 015c 93F90110 		ldrsb	r1, [r3, #1]
 339:masked-decode-inside.c **** 			s[i] ^= recd[j] * alpha_to[(i * j) % n];
 1448              		.loc 1 339 3 discriminator 1 view .LVU534
 1449 0160 0BD8     		bhi	.L95
 342:masked-decode-inside.c **** /*
 1450              		.loc 1 342 3 is_stmt 1 discriminator 2 view .LVU535
 342:masked-decode-inside.c **** /*
 1451              		.loc 1 342 13 is_stmt 0 discriminator 2 view .LVU536
 1452 0162 0029     		cmp	r1, #0
 1453 0164 18BF     		it	ne
 1454 0166 47F00107 		orrne	r7, r7, #1
 1455              	.LVL129:
 348:masked-decode-inside.c **** 	}
 1456              		.loc 1 348 3 is_stmt 1 discriminator 2 view .LVU537
 348:masked-decode-inside.c **** 	}
 1457              		.loc 1 348 18 is_stmt 0 discriminator 2 view .LVU538
 1458 016a 1144     		add	r1, r1, r2
 1459 016c 0CF1010C 		add	ip, ip, #1
 1460              	.LVL130:
 348:masked-decode-inside.c **** 	}
 1461              		.loc 1 348 8 discriminator 2 view .LVU539
 1462 0170 91F8B010 		ldrb	r1, [r1, #176]	@ zero_extendqisi2
 1463 0174 03F8011F 		strb	r1, [r3, #1]!
 337:masked-decode-inside.c **** 		s[i] = 0;
 1464              		.loc 1 337 23 is_stmt 1 discriminator 2 view .LVU540
 337:masked-decode-inside.c **** 		s[i] = 0;
 1465              		.loc 1 337 23 is_stmt 0 discriminator 2 view .LVU541
 1466 0178 57E7     		b	.L93
 1467              	.LVL131:
 1468              	.L95:
 340:masked-decode-inside.c ****         }
 1469              		.loc 1 340 4 is_stmt 1 discriminator 3 view .LVU542
 340:masked-decode-inside.c ****         }
 1470              		.loc 1 340 39 is_stmt 0 discriminator 3 view .LVU543
 1471 017a B0FBF6F5 		udiv	r5, r0, r6
 1472 017e 06FB1505 		mls	r5, r6, r5, r0
 340:masked-decode-inside.c ****         }
 1473              		.loc 1 340 30 discriminator 3 view .LVU544
 1474 0182 1544     		add	r5, r5, r2
 340:masked-decode-inside.c ****         }
 1475              		.loc 1 340 16 discriminator 3 view .LVU545
 1476 0184 18F801BB 		ldrb	fp, [r8], #1	@ zero_extendqisi2
 340:masked-decode-inside.c ****         }
 1477              		.loc 1 340 20 discriminator 3 view .LVU546
 1478 0188 95F82D50 		ldrb	r5, [r5, #45]	@ zero_extendqisi2
 1479 018c 15FB0BF5 		smulbb	r5, r5, fp
 340:masked-decode-inside.c ****         }
 1480              		.loc 1 340 9 discriminator 3 view .LVU547
 1481 0190 4D40     		eors	r5, r5, r1
 1482 0192 5D70     		strb	r5, [r3, #1]
 339:masked-decode-inside.c **** 			s[i] ^= recd[j] * alpha_to[(i * j) % n];
 1483              		.loc 1 339 27 is_stmt 1 discriminator 3 view .LVU548
 1484              	.LVL132:
 339:masked-decode-inside.c **** 			s[i] ^= recd[j] * alpha_to[(i * j) % n];
 1485              		.loc 1 339 27 is_stmt 0 discriminator 3 view .LVU549
 1486 0194 0EF1010E 		add	lr, lr, #1
 1487              	.LVL133:
 339:masked-decode-inside.c **** 			s[i] ^= recd[j] * alpha_to[(i * j) % n];
 1488              		.loc 1 339 27 discriminator 3 view .LVU550
 1489 0198 6044     		add	r0, r0, ip
 1490 019a DCE7     		b	.L94
 1491              	.LVL134:
 1492              	.L98:
 379:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 1493              		.loc 1 379 5 is_stmt 1 view .LVU551
 381:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 1494              		.loc 1 381 28 is_stmt 0 view .LVU552
 1495 019c 1621     		movs	r1, #22
 1496 019e CDAB     		add	r3, sp, #820
 1497 01a0 6C1E     		subs	r4, r5, #1
 1498 01a2 01FB0434 		mla	r4, r1, r4, r3
 379:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 1499              		.loc 1 379 14 view .LVU553
 1500 01a6 89F80020 		strb	r2, [r9]
 380:masked-decode-inside.c **** 					elp[u + 1][i] = elp[u][i];
 1501              		.loc 1 380 5 is_stmt 1 view .LVU554
 1502              	.LVL135:
 380:masked-decode-inside.c **** 					elp[u + 1][i] = elp[u][i];
 1503              		.loc 1 380 5 is_stmt 0 view .LVU555
 1504 01aa 0020     		movs	r0, #0
 381:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 1505              		.loc 1 381 20 view .LVU556
 1506 01ac 01FB0531 		mla	r1, r1, r5, r3
 1507              	.LVL136:
 1508              	.L100:
 380:masked-decode-inside.c **** 					elp[u + 1][i] = elp[u][i];
 1509              		.loc 1 380 17 is_stmt 1 discriminator 1 view .LVU557
 380:masked-decode-inside.c **** 					elp[u + 1][i] = elp[u][i];
 1510              		.loc 1 380 19 is_stmt 0 discriminator 1 view .LVU558
 1511 01b0 C3B2     		uxtb	r3, r0
 380:masked-decode-inside.c **** 					elp[u + 1][i] = elp[u][i];
 1512              		.loc 1 380 5 discriminator 1 view .LVU559
 1513 01b2 9342     		cmp	r3, r2
 1514 01b4 00F10100 		add	r0, r0, #1
 1515              	.LVL137:
 380:masked-decode-inside.c **** 					elp[u + 1][i] = elp[u][i];
 1516              		.loc 1 380 5 discriminator 1 view .LVU560
 1517 01b8 34DD     		ble	.L101
 1518              	.LVL138:
 1519              	.L116:
 425:masked-decode-inside.c ****  
 1520              		.loc 1 425 4 is_stmt 1 view .LVU561
 425:masked-decode-inside.c ****  
 1521              		.loc 1 425 23 is_stmt 0 view .LVU562
 1522 01ba 99F90000 		ldrsb	r0, [r9]
 425:masked-decode-inside.c ****  
 1523              		.loc 1 425 20 view .LVU563
 1524 01be 009B     		ldr	r3, [sp]
 425:masked-decode-inside.c ****  
 1525              		.loc 1 425 16 view .LVU564
 1526 01c0 049A     		ldr	r2, [sp, #16]
 425:masked-decode-inside.c ****  
 1527              		.loc 1 425 20 view .LVU565
 1528 01c2 1B1A     		subs	r3, r3, r0
 425:masked-decode-inside.c ****  
 1529              		.loc 1 425 16 view .LVU566
 1530 01c4 AB54     		strb	r3, [r5, r2]
 428:masked-decode-inside.c **** 			/* no discrepancy computed on last iteration */
 1531              		.loc 1 428 4 is_stmt 1 view .LVU567
 428:masked-decode-inside.c **** 			/* no discrepancy computed on last iteration */
 1532              		.loc 1 428 7 is_stmt 0 view .LVU568
 1533 01c6 DDE90023 		ldrd	r2, r3, [sp]
 1534 01ca 9342     		cmp	r3, r2
 1535 01cc 40F28A80 		bls	.L121
 430:masked-decode-inside.c **** 			    d[u + 1] = alpha_to[s[u + 1]];
 1536              		.loc 1 430 6 is_stmt 1 view .LVU569
 430:masked-decode-inside.c **** 			    d[u + 1] = alpha_to[s[u + 1]];
 1537              		.loc 1 430 11 is_stmt 0 view .LVU570
 1538 01d0 6AAB     		add	r3, sp, #424
 436:masked-decode-inside.c ****                   d[u + 1] ^= alpha_to[(s[u + 1 - i] 
 1539              		.loc 1 436 56 view .LVU571
 1540 01d2 1624     		movs	r4, #22
 430:masked-decode-inside.c **** 			    d[u + 1] = alpha_to[s[u + 1]];
 1541              		.loc 1 430 11 view .LVU572
 1542 01d4 EB56     		ldrsb	r3, [r5, r3]
 430:masked-decode-inside.c **** 			    d[u + 1] = alpha_to[s[u + 1]];
 1543              		.loc 1 430 9 view .LVU573
 1544 01d6 5A1C     		adds	r2, r3, #1
 431:masked-decode-inside.c **** 			  else{
 1545              		.loc 1 431 8 is_stmt 1 view .LVU574
 431:masked-decode-inside.c **** 			  else{
 1546              		.loc 1 431 27 is_stmt 0 view .LVU575
 1547 01d8 16BF     		itet	ne
 1548 01da 5344     		addne	r3, r3, r10
 433:masked-decode-inside.c ****               }
 1549              		.loc 1 433 17 view .LVU576
 1550 01dc 0023     		moveq	r3, #0
 431:masked-decode-inside.c **** 			  else{
 1551              		.loc 1 431 27 view .LVU577
 1552 01de 93F92D30 		ldrsbne	r3, [r3, #45]
 1553 01e2 88F80030 		strb	r3, [r8]
 436:masked-decode-inside.c ****                   d[u + 1] ^= alpha_to[(s[u + 1 - i] 
 1554              		.loc 1 436 56 view .LVU578
 1555 01e6 CDAB     		add	r3, sp, #820
 433:masked-decode-inside.c ****               }
 1556              		.loc 1 433 17 view .LVU579
 1557 01e8 3A46     		mov	r2, r7
 436:masked-decode-inside.c ****                   d[u + 1] ^= alpha_to[(s[u + 1 - i] 
 1558              		.loc 1 436 23 view .LVU580
 1559 01ea 0DF5D47C 		add	ip, sp, #424
 436:masked-decode-inside.c ****                   d[u + 1] ^= alpha_to[(s[u + 1 - i] 
 1560              		.loc 1 436 56 view .LVU581
 1561 01ee 04FB0534 		mla	r4, r4, r5, r3
 1562              	.L118:
 1563              	.LVL139:
 435:masked-decode-inside.c ****                 if ((s[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 1564              		.loc 1 435 27 is_stmt 1 discriminator 1 view .LVU582
 435:masked-decode-inside.c ****                 if ((s[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 1565              		.loc 1 435 15 is_stmt 0 discriminator 1 view .LVU583
 1566 01f2 8242     		cmp	r2, r0
 437:masked-decode-inside.c ****                               + index_of[elp[u + 1][i]]) % n];
 1567              		.loc 1 437 28 discriminator 1 view .LVU584
 1568 01f4 98F90010 		ldrsb	r1, [r8]
 435:masked-decode-inside.c ****                 if ((s[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 1569              		.loc 1 435 15 discriminator 1 view .LVU585
 1570 01f8 5BDD     		ble	.L120
 440:masked-decode-inside.c **** 			}
 1571              		.loc 1 440 6 is_stmt 1 view .LVU586
 440:masked-decode-inside.c **** 			}
 1572              		.loc 1 440 25 is_stmt 0 view .LVU587
 1573 01fa 5144     		add	r1, r1, r10
 440:masked-decode-inside.c **** 			}
 1574              		.loc 1 440 15 view .LVU588
 1575 01fc 91F8B030 		ldrb	r3, [r1, #176]	@ zero_extendqisi2
 1576 0200 88F80030 		strb	r3, [r8]
 442:masked-decode-inside.c ****  
 1577              		.loc 1 442 11 is_stmt 1 view .LVU589
 442:masked-decode-inside.c ****  
 1578              		.loc 1 442 3 is_stmt 0 view .LVU590
 1579 0204 DDE90023 		ldrd	r2, r3, [sp]
 1580              	.LVL140:
 442:masked-decode-inside.c ****  
 1581              		.loc 1 442 3 view .LVU591
 1582 0208 9342     		cmp	r3, r2
 1583 020a 6BD9     		bls	.L121
 442:masked-decode-inside.c ****  
 1584              		.loc 1 442 21 discriminator 1 view .LVU592
 1585 020c 029B     		ldr	r3, [sp, #8]
 1586 020e 9842     		cmp	r0, r3
 1587 0210 05F10105 		add	r5, r5, #1
 1588 0214 7FF743AF 		ble	.L122
 1589              	.LVL141:
 1590              	.L123:
 480:masked-decode-inside.c **** }
 1591              		.loc 1 480 12 view .LVU593
 1592 0218 4FF0FF30 		mov	r0, #-1
 1593              	.L97:
 481:masked-decode-inside.c **** 
 1594              		.loc 1 481 1 view .LVU594
 1595 021c 0DF21C5D 		addw	sp, sp, #1308
 1596              	.LCFI12:
 1597              		.cfi_remember_state
 1598              		.cfi_def_cfa_offset 36
 1599              		@ sp needed
 1600 0220 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1601              	.LVL142:
 1602              	.L101:
 1603              	.LCFI13:
 1604              		.cfi_restore_state
 381:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 1605              		.loc 1 381 6 is_stmt 1 discriminator 3 view .LVU595
 381:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 1606              		.loc 1 381 28 is_stmt 0 discriminator 3 view .LVU596
 1607 0224 14F903C0 		ldrsb	ip, [r4, r3]
 381:masked-decode-inside.c **** 					elp[u][i] = index_of[elp[u][i]];
 1608              		.loc 1 381 20 discriminator 3 view .LVU597
 1609 0228 01F803C0 		strb	ip, [r1, r3]
 382:masked-decode-inside.c **** 				}
 1610              		.loc 1 382 6 is_stmt 1 discriminator 3 view .LVU598
 382:masked-decode-inside.c **** 				}
 1611              		.loc 1 382 33 is_stmt 0 discriminator 3 view .LVU599
 1612 022c 14F903C0 		ldrsb	ip, [r4, r3]
 382:masked-decode-inside.c **** 				}
 1613              		.loc 1 382 26 discriminator 3 view .LVU600
 1614 0230 D444     		add	ip, ip, r10
 382:masked-decode-inside.c **** 				}
 1615              		.loc 1 382 16 discriminator 3 view .LVU601
 1616 0232 9CF8B0C0 		ldrb	ip, [ip, #176]	@ zero_extendqisi2
 1617 0236 04F803C0 		strb	ip, [r4, r3]
 380:masked-decode-inside.c **** 					elp[u + 1][i] = elp[u][i];
 1618              		.loc 1 380 28 is_stmt 1 discriminator 3 view .LVU602
 1619              	.LVL143:
 380:masked-decode-inside.c **** 					elp[u + 1][i] = elp[u][i];
 1620              		.loc 1 380 28 is_stmt 0 discriminator 3 view .LVU603
 1621 023a B9E7     		b	.L100
 1622              	.LVL144:
 1623              	.L105:
 392:masked-decode-inside.c **** 				/* have found first non-zero d[q]  */
 1624              		.loc 1 392 6 is_stmt 1 view .LVU604
 392:masked-decode-inside.c **** 				/* have found first non-zero d[q]  */
 1625              		.loc 1 392 7 is_stmt 0 view .LVU605
 1626 023c 013C     		subs	r4, r4, #1
 1627              	.LVL145:
 392:masked-decode-inside.c **** 				/* have found first non-zero d[q]  */
 1628              		.loc 1 392 7 view .LVU606
 1629 023e E4B2     		uxtb	r4, r4
 392:masked-decode-inside.c **** 				/* have found first non-zero d[q]  */
 1630              		.loc 1 392 7 view .LVU607
 1631 0240 3FE7     		b	.L99
 1632              	.L104:
 394:masked-decode-inside.c **** 				  j = q;
 1633              		.loc 1 394 5 is_stmt 1 view .LVU608
 394:masked-decode-inside.c **** 				  j = q;
 1634              		.loc 1 394 8 is_stmt 0 view .LVU609
 1635 0242 002C     		cmp	r4, #0
 1636 0244 3FF445AF 		beq	.L106
 1637 0248 631E     		subs	r3, r4, #1
 1638 024a DBB2     		uxtb	r3, r3
 398:masked-decode-inside.c **** 				      q = j;
 1639              		.loc 1 398 15 view .LVU610
 1640 024c 07A9     		add	r1, sp, #28
 1641              	.LVL146:
 1642              	.L108:
 396:masked-decode-inside.c **** 				    j--;
 1643              		.loc 1 396 7 is_stmt 1 view .LVU611
 397:masked-decode-inside.c **** 				    if ((d[j] != -1) && (u_lu[q] < u_lu[j]))
 1644              		.loc 1 397 9 view .LVU612
 398:masked-decode-inside.c **** 				      q = j;
 1645              		.loc 1 398 12 is_stmt 0 view .LVU613
 1646 024e 13F901C0 		ldrsb	ip, [r3, r1]
 1647 0252 BCF1FF3F 		cmp	ip, #-1
 1648 0256 D8B2     		uxtb	r0, r3
 1649              	.LVL147:
 398:masked-decode-inside.c **** 				      q = j;
 1650              		.loc 1 398 9 is_stmt 1 view .LVU614
 398:masked-decode-inside.c **** 				      q = j;
 1651              		.loc 1 398 12 is_stmt 0 view .LVU615
 1652 0258 08D0     		beq	.L107
 398:masked-decode-inside.c **** 				      q = j;
 1653              		.loc 1 398 26 discriminator 1 view .LVU616
 1654 025a DDF810C0 		ldr	ip, [sp, #16]
 1655 025e 1CF904E0 		ldrsb	lr, [ip, r4]
 1656 0262 13F90CC0 		ldrsb	ip, [r3, ip]
 397:masked-decode-inside.c **** 				    if ((d[j] != -1) && (u_lu[q] < u_lu[j]))
 1657              		.loc 1 397 10 discriminator 1 view .LVU617
 1658 0266 E645     		cmp	lr, ip
 1659 0268 B8BF     		it	lt
 1660 026a 0446     		movlt	r4, r0
 1661              	.L107:
 400:masked-decode-inside.c **** 				}
 1662              		.loc 1 400 15 is_stmt 1 view .LVU618
 400:masked-decode-inside.c **** 				}
 1663              		.loc 1 400 7 is_stmt 0 view .LVU619
 1664 026c 013B     		subs	r3, r3, #1
 1665 026e EED2     		bcs	.L108
 1666 0270 2FE7     		b	.L106
 1667              	.LVL148:
 1668              	.L109:
 411:masked-decode-inside.c ****  
 1669              		.loc 1 411 6 is_stmt 1 view .LVU620
 411:masked-decode-inside.c ****  
 1670              		.loc 1 411 26 is_stmt 0 view .LVU621
 1671 0272 009B     		ldr	r3, [sp]
 1672 0274 1B1B     		subs	r3, r3, r4
 1673 0276 0344     		add	r3, r3, r0
 411:masked-decode-inside.c ****  
 1674              		.loc 1 411 15 view .LVU622
 1675 0278 89F80030 		strb	r3, [r9]
 1676 027c 33E7     		b	.L111
 1677              	.LVL149:
 1678              	.L113:
 417:masked-decode-inside.c **** 						elp[u + 1][i + u - q] = 
 1679              		.loc 1 417 6 is_stmt 1 view .LVU623
 417:masked-decode-inside.c **** 						elp[u + 1][i + u - q] = 
 1680              		.loc 1 417 16 is_stmt 0 view .LVU624
 1681 027e 11F902B0 		ldrsb	fp, [r1, r2]
 417:masked-decode-inside.c **** 						elp[u + 1][i + u - q] = 
 1682              		.loc 1 417 9 view .LVU625
 1683 0282 BBF1FF3F 		cmp	fp, #-1
 1684 0286 12D0     		beq	.L112
 418:masked-decode-inside.c ****                                    alpha_to[(d[u] + n - d[q] + elp[q][i]) % n];
 1685              		.loc 1 418 7 is_stmt 1 view .LVU626
 418:masked-decode-inside.c ****                                    alpha_to[(d[u] + n - d[q] + elp[q][i]) % n];
 1686              		.loc 1 418 24 is_stmt 0 view .LVU627
 1687 0288 039B     		ldr	r3, [sp, #12]
 1688 028a 1A44     		add	r2, r2, r3
 419:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 1689              		.loc 1 419 58 view .LVU628
 1690 028c 07AB     		add	r3, sp, #28
 418:masked-decode-inside.c ****                                    alpha_to[(d[u] + n - d[q] + elp[q][i]) % n];
 1691              		.loc 1 418 24 view .LVU629
 1692 028e 121B     		subs	r2, r2, r4
 419:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 1693              		.loc 1 419 58 view .LVU630
 1694 0290 1B57     		ldrsb	r3, [r3, r4]
 419:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 1695              		.loc 1 419 55 view .LVU631
 1696 0292 AEEB0303 		sub	r3, lr, r3
 419:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 1697              		.loc 1 419 62 view .LVU632
 1698 0296 5B44     		add	r3, r3, fp
 419:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 1699              		.loc 1 419 75 view .LVU633
 1700 0298 93FBF6FB 		sdiv	fp, r3, r6
 1701 029c 06FB1B33 		mls	r3, r6, fp, r3
 419:masked-decode-inside.c **** 				for (i = 0; i <= l[u]; i++) {
 1702              		.loc 1 419 44 view .LVU634
 1703 02a0 5344     		add	r3, r3, r10
 418:masked-decode-inside.c ****                                    alpha_to[(d[u] + n - d[q] + elp[q][i]) % n];
 1704              		.loc 1 418 29 view .LVU635
 1705 02a2 DDF814B0 		ldr	fp, [sp, #20]
 1706 02a6 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 1707 02aa 0BF80230 		strb	r3, [fp, r2]
 1708              	.L112:
 416:masked-decode-inside.c **** 					if (elp[q][i] != -1)
 1709              		.loc 1 416 28 is_stmt 1 discriminator 2 view .LVU636
 1710              	.LVL150:
 416:masked-decode-inside.c **** 					if (elp[q][i] != -1)
 1711              		.loc 1 416 28 is_stmt 0 discriminator 2 view .LVU637
 1712 02ae 0130     		adds	r0, r0, #1
 1713              	.LVL151:
 416:masked-decode-inside.c **** 					if (elp[q][i] != -1)
 1714              		.loc 1 416 28 discriminator 2 view .LVU638
 1715 02b0 2DE7     		b	.L110
 1716              	.LVL152:
 1717              	.L120:
 436:masked-decode-inside.c ****                   d[u + 1] ^= alpha_to[(s[u + 1 - i] 
 1718              		.loc 1 436 17 is_stmt 1 view .LVU639
 436:masked-decode-inside.c ****                   d[u + 1] ^= alpha_to[(s[u + 1 - i] 
 1719              		.loc 1 436 30 is_stmt 0 view .LVU640
 1720 02b2 AB1A     		subs	r3, r5, r2
 436:masked-decode-inside.c ****                   d[u + 1] ^= alpha_to[(s[u + 1 - i] 
 1721              		.loc 1 436 23 view .LVU641
 1722 02b4 1CF903E0 		ldrsb	lr, [ip, r3]
 436:masked-decode-inside.c ****                   d[u + 1] ^= alpha_to[(s[u + 1 - i] 
 1723              		.loc 1 436 20 view .LVU642
 1724 02b8 BEF1FF3F 		cmp	lr, #-1
 1725 02bc 0FD0     		beq	.L119
 436:masked-decode-inside.c ****                   d[u + 1] ^= alpha_to[(s[u + 1 - i] 
 1726              		.loc 1 436 56 discriminator 1 view .LVU643
 1727 02be A356     		ldrsb	r3, [r4, r2]
 436:masked-decode-inside.c ****                   d[u + 1] ^= alpha_to[(s[u + 1 - i] 
 1728              		.loc 1 436 42 discriminator 1 view .LVU644
 1729 02c0 6BB1     		cbz	r3, .L119
 437:masked-decode-inside.c ****                               + index_of[elp[u + 1][i]]) % n];
 1730              		.loc 1 437 19 is_stmt 1 view .LVU645
 438:masked-decode-inside.c **** 			  /* put d[u+1] into index form */
 1731              		.loc 1 438 41 is_stmt 0 view .LVU646
 1732 02c2 5344     		add	r3, r3, r10
 1733 02c4 93F9B030 		ldrsb	r3, [r3, #176]
 438:masked-decode-inside.c **** 			  /* put d[u+1] into index form */
 1734              		.loc 1 438 31 view .LVU647
 1735 02c8 7344     		add	r3, r3, lr
 438:masked-decode-inside.c **** 			  /* put d[u+1] into index form */
 1736              		.loc 1 438 58 view .LVU648
 1737 02ca 93FBF6FE 		sdiv	lr, r3, r6
 1738 02ce 06FB1E33 		mls	r3, r6, lr, r3
 437:masked-decode-inside.c ****                               + index_of[elp[u + 1][i]]) % n];
 1739              		.loc 1 437 39 view .LVU649
 1740 02d2 5344     		add	r3, r3, r10
 437:masked-decode-inside.c ****                               + index_of[elp[u + 1][i]]) % n];
 1741              		.loc 1 437 28 view .LVU650
 1742 02d4 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 1743 02d8 4B40     		eors	r3, r3, r1
 1744 02da 88F80030 		strb	r3, [r8]
 1745              	.L119:
 435:masked-decode-inside.c ****                 if ((s[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 1746              		.loc 1 435 42 is_stmt 1 discriminator 2 view .LVU651
 435:masked-decode-inside.c ****                 if ((s[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 1747              		.loc 1 435 43 is_stmt 0 discriminator 2 view .LVU652
 1748 02de 0132     		adds	r2, r2, #1
 1749              	.LVL153:
 435:masked-decode-inside.c ****                 if ((s[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 1750              		.loc 1 435 43 discriminator 2 view .LVU653
 1751 02e0 D2B2     		uxtb	r2, r2
 1752              	.LVL154:
 435:masked-decode-inside.c ****                 if ((s[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 1753              		.loc 1 435 43 discriminator 2 view .LVU654
 1754 02e2 86E7     		b	.L118
 1755              	.LVL155:
 1756              	.L121:
 444:masked-decode-inside.c **** 		if (l[u] <= t) {/* Can correct errors */
 1757              		.loc 1 444 3 is_stmt 1 view .LVU655
 445:masked-decode-inside.c **** 			/* put elp into index form */
 1758              		.loc 1 445 3 view .LVU656
 445:masked-decode-inside.c **** 			/* put elp into index form */
 1759              		.loc 1 445 6 is_stmt 0 view .LVU657
 1760 02e4 029B     		ldr	r3, [sp, #8]
 1761 02e6 9842     		cmp	r0, r3
 1762 02e8 96DC     		bgt	.L123
 448:masked-decode-inside.c **** 
 1763              		.loc 1 448 15 view .LVU658
 1764 02ea 1623     		movs	r3, #22
 1765 02ec CDAA     		add	r2, sp, #820
 448:masked-decode-inside.c **** 
 1766              		.loc 1 448 25 view .LVU659
 1767 02ee DFF80CC0 		ldr	ip, .L156
 1768 02f2 0021     		movs	r1, #0
 448:masked-decode-inside.c **** 
 1769              		.loc 1 448 15 view .LVU660
 1770 02f4 03FB0523 		mla	r3, r3, r5, r2
 1771 02f8 09E0     		b	.L124
 1772              	.L157:
 1773 02fa 00BF     		.align	2
 1774              	.L156:
 1775 02fc 00000000 		.word	.LANCHOR0
 1776 0300 BF020000 		.word	.LANCHOR0+703
 1777              	.LVL156:
 1778              	.L125:
 448:masked-decode-inside.c **** 
 1779              		.loc 1 448 5 is_stmt 1 discriminator 3 view .LVU661
 448:masked-decode-inside.c **** 
 1780              		.loc 1 448 32 is_stmt 0 discriminator 3 view .LVU662
 1781 0304 9C56     		ldrsb	r4, [r3, r2]
 448:masked-decode-inside.c **** 
 1782              		.loc 1 448 25 discriminator 3 view .LVU663
 1783 0306 6444     		add	r4, r4, ip
 448:masked-decode-inside.c **** 
 1784              		.loc 1 448 15 discriminator 3 view .LVU664
 1785 0308 94F8B040 		ldrb	r4, [r4, #176]	@ zero_extendqisi2
 1786 030c 9C54     		strb	r4, [r3, r2]
 447:masked-decode-inside.c **** 				elp[u][i] = index_of[elp[u][i]];
 1787              		.loc 1 447 27 is_stmt 1 discriminator 3 view .LVU665
 1788              	.LVL157:
 1789              	.L124:
 447:masked-decode-inside.c **** 				elp[u][i] = index_of[elp[u][i]];
 1790              		.loc 1 447 16 discriminator 1 view .LVU666
 447:masked-decode-inside.c **** 				elp[u][i] = index_of[elp[u][i]];
 1791              		.loc 1 447 18 is_stmt 0 discriminator 1 view .LVU667
 1792 030e CAB2     		uxtb	r2, r1
 447:masked-decode-inside.c **** 				elp[u][i] = index_of[elp[u][i]];
 1793              		.loc 1 447 4 discriminator 1 view .LVU668
 1794 0310 8242     		cmp	r2, r0
 1795 0312 01F10101 		add	r1, r1, #1
 1796              	.LVL158:
 447:masked-decode-inside.c **** 				elp[u][i] = index_of[elp[u][i]];
 1797              		.loc 1 447 4 discriminator 1 view .LVU669
 1798 0316 F5DD     		ble	.L125
 452:masked-decode-inside.c **** 			count = 0;
 1799              		.loc 1 452 20 view .LVU670
 1800 0318 1621     		movs	r1, #22
 1801 031a CDAC     		add	r4, sp, #820
 451:masked-decode-inside.c **** 				reg[i] = elp[u][i];
 1802              		.loc 1 451 11 view .LVU671
 1803 031c 3B46     		mov	r3, r7
 452:masked-decode-inside.c **** 			count = 0;
 1804              		.loc 1 452 12 view .LVU672
 1805 031e ACAA     		add	r2, sp, #688
 1806              	.LVL159:
 452:masked-decode-inside.c **** 			count = 0;
 1807              		.loc 1 452 20 view .LVU673
 1808 0320 01FB0545 		mla	r5, r1, r5, r4
 1809              	.L126:
 1810              	.LVL160:
 451:masked-decode-inside.c **** 				reg[i] = elp[u][i];
 1811              		.loc 1 451 16 is_stmt 1 discriminator 1 view .LVU674
 451:masked-decode-inside.c **** 				reg[i] = elp[u][i];
 1812              		.loc 1 451 4 is_stmt 0 discriminator 1 view .LVU675
 1813 0324 8342     		cmp	r3, r0
 1814 0326 10DD     		ble	.L127
 459:masked-decode-inside.c **** 					}
 1815              		.loc 1 459 20 view .LVU676
 1816 0328 DFF884E0 		ldr	lr, .L158
 454:masked-decode-inside.c **** 				q = 1;
 1817              		.loc 1 454 11 view .LVU677
 1818 032c 3C46     		mov	r4, r7
 453:masked-decode-inside.c **** 			for (i = 1; i <= n; i++) {
 1819              		.loc 1 453 10 view .LVU678
 1820 032e 0021     		movs	r1, #0
 458:masked-decode-inside.c **** 						q ^= alpha_to[reg[j]];
 1821              		.loc 1 458 20 view .LVU679
 1822 0330 0DF52C7C 		add	ip, sp, #688
 463:masked-decode-inside.c **** 					count++;
 1823              		.loc 1 463 17 view .LVU680
 1824 0334 0DF50B78 		add	r8, sp, #556
 1825              	.LVL161:
 1826              	.L128:
 454:masked-decode-inside.c **** 				q = 1;
 1827              		.loc 1 454 16 is_stmt 1 discriminator 1 view .LVU681
 454:masked-decode-inside.c **** 				q = 1;
 1828              		.loc 1 454 4 is_stmt 0 discriminator 1 view .LVU682
 1829 0338 A642     		cmp	r6, r4
 1830 033a 26D2     		bcs	.L137
 467:masked-decode-inside.c **** 			/* no. roots = degree of elp hence <= t errors */
 1831              		.loc 1 467 4 is_stmt 1 view .LVU683
 467:masked-decode-inside.c **** 			/* no. roots = degree of elp hence <= t errors */
 1832              		.loc 1 467 7 is_stmt 0 view .LVU684
 1833 033c 8142     		cmp	r1, r0
 1834 033e 7FF46BAF 		bne	.L123
 470:masked-decode-inside.c ****                 //buffer[0] = count;
 1835              		.loc 1 470 19 view .LVU685
 1836 0342 1B4D     		ldr	r5, .L158
 1837 0344 0022     		movs	r2, #0
 470:masked-decode-inside.c ****                 //buffer[0] = count;
 1838              		.loc 1 470 14 view .LVU686
 1839 0346 8BAC     		add	r4, sp, #556
 1840              	.LVL162:
 470:masked-decode-inside.c ****                 //buffer[0] = count;
 1841              		.loc 1 470 14 view .LVU687
 1842 0348 2AE0     		b	.L132
 1843              	.LVL163:
 1844              	.L127:
 452:masked-decode-inside.c **** 			count = 0;
 1845              		.loc 1 452 5 is_stmt 1 discriminator 3 view .LVU688
 452:masked-decode-inside.c **** 			count = 0;
 1846              		.loc 1 452 12 is_stmt 0 discriminator 3 view .LVU689
 1847 034a E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 1848 034c D154     		strb	r1, [r2, r3]
 451:masked-decode-inside.c **** 				reg[i] = elp[u][i];
 1849              		.loc 1 451 27 is_stmt 1 discriminator 3 view .LVU690
 451:masked-decode-inside.c **** 				reg[i] = elp[u][i];
 1850              		.loc 1 451 28 is_stmt 0 discriminator 3 view .LVU691
 1851 034e 0133     		adds	r3, r3, #1
 1852              	.LVL164:
 451:masked-decode-inside.c **** 				reg[i] = elp[u][i];
 1853              		.loc 1 451 28 discriminator 3 view .LVU692
 1854 0350 DBB2     		uxtb	r3, r3
 1855              	.LVL165:
 451:masked-decode-inside.c **** 				reg[i] = elp[u][i];
 1856              		.loc 1 451 28 discriminator 3 view .LVU693
 1857 0352 E7E7     		b	.L126
 1858              	.LVL166:
 1859              	.L129:
 457:masked-decode-inside.c **** 						reg[j] = (reg[j] + j) % n;
 1860              		.loc 1 457 6 is_stmt 1 view .LVU694
 458:masked-decode-inside.c **** 						q ^= alpha_to[reg[j]];
 1861              		.loc 1 458 7 view .LVU695
 458:masked-decode-inside.c **** 						q ^= alpha_to[reg[j]];
 1862              		.loc 1 458 20 is_stmt 0 view .LVU696
 1863 0354 1CF80230 		ldrb	r3, [ip, r2]	@ zero_extendqisi2
 458:masked-decode-inside.c **** 						q ^= alpha_to[reg[j]];
 1864              		.loc 1 458 24 view .LVU697
 1865 0358 1344     		add	r3, r3, r2
 458:masked-decode-inside.c **** 						q ^= alpha_to[reg[j]];
 1866              		.loc 1 458 29 view .LVU698
 1867 035a B3FBF6F9 		udiv	r9, r3, r6
 1868 035e 06FB1933 		mls	r3, r6, r9, r3
 458:masked-decode-inside.c **** 						q ^= alpha_to[reg[j]];
 1869              		.loc 1 458 14 view .LVU699
 1870 0362 0CF80230 		strb	r3, [ip, r2]
 459:masked-decode-inside.c **** 					}
 1871              		.loc 1 459 7 is_stmt 1 view .LVU700
 459:masked-decode-inside.c **** 					}
 1872              		.loc 1 459 20 is_stmt 0 view .LVU701
 1873 0366 7344     		add	r3, r3, lr
 456:masked-decode-inside.c **** 					if (reg[j] != -1) {
 1874              		.loc 1 456 29 view .LVU702
 1875 0368 0132     		adds	r2, r2, #1
 1876              	.LVL167:
 459:masked-decode-inside.c **** 					}
 1877              		.loc 1 459 9 view .LVU703
 1878 036a 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 1879 036e 5D40     		eors	r5, r5, r3
 1880              	.LVL168:
 459:masked-decode-inside.c **** 					}
 1881              		.loc 1 459 9 view .LVU704
 1882 0370 EDB2     		uxtb	r5, r5
 1883              	.LVL169:
 456:masked-decode-inside.c **** 					if (reg[j] != -1) {
 1884              		.loc 1 456 28 is_stmt 1 view .LVU705
 456:masked-decode-inside.c **** 					if (reg[j] != -1) {
 1885              		.loc 1 456 29 is_stmt 0 view .LVU706
 1886 0372 D2B2     		uxtb	r2, r2
 1887              	.LVL170:
 1888              	.L131:
 456:masked-decode-inside.c **** 					if (reg[j] != -1) {
 1889              		.loc 1 456 17 is_stmt 1 discriminator 1 view .LVU707
 456:masked-decode-inside.c **** 					if (reg[j] != -1) {
 1890              		.loc 1 456 5 is_stmt 0 discriminator 1 view .LVU708
 1891 0374 8242     		cmp	r2, r0
 1892 0376 EDDD     		ble	.L129
 461:masked-decode-inside.c **** 						 * location number indices */
 1893              		.loc 1 461 5 is_stmt 1 view .LVU709
 461:masked-decode-inside.c **** 						 * location number indices */
 1894              		.loc 1 461 8 is_stmt 0 view .LVU710
 1895 0378 25B9     		cbnz	r5, .L130
 463:masked-decode-inside.c **** 					count++;
 1896              		.loc 1 463 6 is_stmt 1 view .LVU711
 463:masked-decode-inside.c **** 					count++;
 1897              		.loc 1 463 21 is_stmt 0 view .LVU712
 1898 037a 331B     		subs	r3, r6, r4
 463:masked-decode-inside.c **** 					count++;
 1899              		.loc 1 463 17 view .LVU713
 1900 037c 08F80130 		strb	r3, [r8, r1]
 464:masked-decode-inside.c **** 				}
 1901              		.loc 1 464 6 is_stmt 1 view .LVU714
 464:masked-decode-inside.c **** 				}
 1902              		.loc 1 464 11 is_stmt 0 view .LVU715
 1903 0380 0131     		adds	r1, r1, #1
 1904              	.LVL171:
 464:masked-decode-inside.c **** 				}
 1905              		.loc 1 464 11 view .LVU716
 1906 0382 C9B2     		uxtb	r1, r1
 1907              	.LVL172:
 1908              	.L130:
 454:masked-decode-inside.c **** 				q = 1;
 1909              		.loc 1 454 24 is_stmt 1 discriminator 2 view .LVU717
 454:masked-decode-inside.c **** 				q = 1;
 1910              		.loc 1 454 25 is_stmt 0 discriminator 2 view .LVU718
 1911 0384 0134     		adds	r4, r4, #1
 1912              	.LVL173:
 454:masked-decode-inside.c **** 				q = 1;
 1913              		.loc 1 454 25 discriminator 2 view .LVU719
 1914 0386 E4B2     		uxtb	r4, r4
 1915              	.LVL174:
 454:masked-decode-inside.c **** 				q = 1;
 1916              		.loc 1 454 25 discriminator 2 view .LVU720
 1917 0388 D6E7     		b	.L128
 1918              	.LVL175:
 1919              	.L137:
 455:masked-decode-inside.c **** 				for (j = 1; j <= l[u]; j++)
 1920              		.loc 1 455 7 view .LVU721
 1921 038a 3D46     		mov	r5, r7
 456:masked-decode-inside.c **** 					if (reg[j] != -1) {
 1922              		.loc 1 456 12 view .LVU722
 1923 038c 3A46     		mov	r2, r7
 1924 038e F1E7     		b	.L131
 1925              	.LVL176:
 1926              	.L133:
 470:masked-decode-inside.c ****                 //buffer[0] = count;
 1927              		.loc 1 470 6 is_stmt 1 discriminator 3 view .LVU723
 470:masked-decode-inside.c ****                 //buffer[0] = count;
 1928              		.loc 1 470 19 is_stmt 0 discriminator 3 view .LVU724
 1929 0390 E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
 1930 0392 2B44     		add	r3, r3, r5
 1931 0394 93F8BF12 		ldrb	r1, [r3, #703]	@ zero_extendqisi2
 1932 0398 81F00101 		eor	r1, r1, #1
 1933 039c 83F8BF12 		strb	r1, [r3, #703]
 469:masked-decode-inside.c **** 					recd[loc[i]] ^= 1;
 1934              		.loc 1 469 27 is_stmt 1 discriminator 3 view .LVU725
 1935              	.LVL177:
 1936              	.L132:
 469:masked-decode-inside.c **** 					recd[loc[i]] ^= 1;
 1937              		.loc 1 469 17 discriminator 1 view .LVU726
 469:masked-decode-inside.c **** 					recd[loc[i]] ^= 1;
 1938              		.loc 1 469 19 is_stmt 0 discriminator 1 view .LVU727
 1939 03a0 1346     		mov	r3, r2
 469:masked-decode-inside.c **** 					recd[loc[i]] ^= 1;
 1940              		.loc 1 469 5 discriminator 1 view .LVU728
 1941 03a2 8342     		cmp	r3, r0
 1942 03a4 02F10102 		add	r2, r2, #1
 1943              	.LVL178:
 469:masked-decode-inside.c **** 					recd[loc[i]] ^= 1;
 1944              		.loc 1 469 5 discriminator 1 view .LVU729
 1945 03a8 F2DB     		blt	.L133
 1946 03aa 37E7     		b	.L97
 1947              	.LVL179:
 1948              	.L134:
 479:masked-decode-inside.c ****     return -1;
 1949              		.loc 1 479 17 view .LVU730
 1950 03ac 3846     		mov	r0, r7
 1951 03ae 35E7     		b	.L97
 1952              	.L159:
 1953              		.align	2
 1954              	.L158:
 1955 03b0 00000000 		.word	.LANCHOR0
 1956              		.cfi_endproc
 1957              	.LFE7:
 1959              		.section	.text.preset,"ax",%progbits
 1960              		.align	1
 1961              		.global	preset
 1962              		.syntax unified
 1963              		.thumb
 1964              		.thumb_func
 1965              		.fpu softvfp
 1967              	preset:
 1968              	.LVL180:
 1969              	.LFB9:
 499:masked-decode-inside.c ****     
 1970              		.loc 1 499 38 is_stmt 1 view -0
 1971              		.cfi_startproc
 1972              		@ args = 0, pretend = 0, frame = 0
 1973              		@ frame_needed = 0, uses_anonymous_args = 0
 1974              		@ link register save eliminated.
 514:masked-decode-inside.c **** 	for(i = 0; i < 4; i++) {
 1975              		.loc 1 514 5 view .LVU732
 515:masked-decode-inside.c **** 		base32[i] = 0;
 1976              		.loc 1 515 2 view .LVU733
 515:masked-decode-inside.c **** 		base32[i] = 0;
 1977              		.loc 1 515 13 view .LVU734
 516:masked-decode-inside.c ****         // recd[i] ^= info[i];
 1978              		.loc 1 516 3 view .LVU735
 516:masked-decode-inside.c ****         // recd[i] ^= info[i];
 1979              		.loc 1 516 13 is_stmt 0 view .LVU736
 1980 0000 034B     		ldr	r3, .L161
 1981 0002 0022     		movs	r2, #0
 1982 0004 C3E9D122 		strd	r2, r2, [r3, #836]
 515:masked-decode-inside.c **** 		base32[i] = 0;
 1983              		.loc 1 515 20 is_stmt 1 view .LVU737
 1984              	.LVL181:
 515:masked-decode-inside.c **** 		base32[i] = 0;
 1985              		.loc 1 515 13 view .LVU738
 516:masked-decode-inside.c ****         // recd[i] ^= info[i];
 1986              		.loc 1 516 3 view .LVU739
 516:masked-decode-inside.c ****         // recd[i] ^= info[i];
 1987              		.loc 1 516 13 is_stmt 0 view .LVU740
 1988 0008 C3E9D322 		strd	r2, r2, [r3, #844]
 515:masked-decode-inside.c **** 		base32[i] = 0;
 1989              		.loc 1 515 20 is_stmt 1 view .LVU741
 1990              	.LVL182:
 515:masked-decode-inside.c **** 		base32[i] = 0;
 1991              		.loc 1 515 13 view .LVU742
 522:masked-decode-inside.c **** 
 1992              		.loc 1 522 1 is_stmt 0 view .LVU743
 1993 000c 7047     		bx	lr
 1994              	.L162:
 1995 000e 00BF     		.align	2
 1996              	.L161:
 1997 0010 00000000 		.word	.LANCHOR0
 1998              		.cfi_endproc
 1999              	.LFE9:
 2001              		.section	.text.handle,"ax",%progbits
 2002              		.align	1
 2003              		.global	handle
 2004              		.syntax unified
 2005              		.thumb
 2006              		.thumb_func
 2007              		.fpu softvfp
 2009              	handle:
 2010              	.LVL183:
 2011              	.LFB10:
 527:masked-decode-inside.c **** 	uint16_t i;
 2012              		.loc 1 527 1 is_stmt 1 view -0
 2013              		.cfi_startproc
 2014              		@ args = 0, pretend = 0, frame = 0
 2015              		@ frame_needed = 0, uses_anonymous_args = 0
 2016              		@ link register save eliminated.
 528:masked-decode-inside.c ****     
 2017              		.loc 1 528 2 view .LVU745
 544:masked-decode-inside.c **** 		base32[i] = (((uint32_t*)mem)[i] ^ ((uint32_t*)pt)[i+4]);
 2018              		.loc 1 544 5 view .LVU746
 544:masked-decode-inside.c **** 		base32[i] = (((uint32_t*)mem)[i] ^ ((uint32_t*)pt)[i+4]);
 2019              		.loc 1 544 16 view .LVU747
 527:masked-decode-inside.c **** 	uint16_t i;
 2020              		.loc 1 527 1 is_stmt 0 view .LVU748
 2021 0000 F0B4     		push	{r4, r5, r6, r7}
 2022              	.LCFI14:
 2023              		.cfi_def_cfa_offset 16
 2024              		.cfi_offset 4, -16
 2025              		.cfi_offset 5, -12
 2026              		.cfi_offset 6, -8
 2027              		.cfi_offset 7, -4
 2028 0002 1B4C     		ldr	r4, .L170
 2029 0004 00F10C02 		add	r2, r0, #12
 2030 0008 04F24333 		addw	r3, r4, #835
 2031 000c 00F11C07 		add	r7, r0, #28
 527:masked-decode-inside.c **** 	uint16_t i;
 2032              		.loc 1 527 1 view .LVU749
 2033 0010 1D46     		mov	r5, r3
 2034 0012 1646     		mov	r6, r2
 2035              	.LVL184:
 2036              	.L164:
 545:masked-decode-inside.c ****         // recd[i] ^= info[i];
 2037              		.loc 1 545 3 is_stmt 1 discriminator 3 view .LVU750
 545:masked-decode-inside.c ****         // recd[i] ^= info[i];
 2038              		.loc 1 545 36 is_stmt 0 discriminator 3 view .LVU751
 2039 0014 52F804CF 		ldr	ip, [r2, #4]!
 2040 0018 54F8041B 		ldr	r1, [r4], #4
 2041              	.LVL185:
 544:masked-decode-inside.c **** 		base32[i] = (((uint32_t*)mem)[i] ^ ((uint32_t*)pt)[i+4]);
 2042              		.loc 1 544 5 discriminator 3 view .LVU752
 2043 001c BA42     		cmp	r2, r7
 545:masked-decode-inside.c ****         // recd[i] ^= info[i];
 2044              		.loc 1 545 36 discriminator 3 view .LVU753
 2045 001e 81EA0C01 		eor	r1, r1, ip
 545:masked-decode-inside.c ****         // recd[i] ^= info[i];
 2046              		.loc 1 545 13 discriminator 3 view .LVU754
 2047 0022 45F8041B 		str	r1, [r5], #4
 544:masked-decode-inside.c **** 		base32[i] = (((uint32_t*)mem)[i] ^ ((uint32_t*)pt)[i+4]);
 2048              		.loc 1 544 23 is_stmt 1 discriminator 3 view .LVU755
 2049              	.LVL186:
 544:masked-decode-inside.c **** 		base32[i] = (((uint32_t*)mem)[i] ^ ((uint32_t*)pt)[i+4]);
 2050              		.loc 1 544 16 discriminator 3 view .LVU756
 544:masked-decode-inside.c **** 		base32[i] = (((uint32_t*)mem)[i] ^ ((uint32_t*)pt)[i+4]);
 2051              		.loc 1 544 5 is_stmt 0 discriminator 3 view .LVU757
 2052 0026 F5D1     		bne	.L164
 2053 0028 0438     		subs	r0, r0, #4
 2054              	.LVL187:
 2055              	.L165:
 549:masked-decode-inside.c ****         // recd[i] ^= info[i];
 2056              		.loc 1 549 3 is_stmt 1 discriminator 3 view .LVU758
 549:masked-decode-inside.c ****         // recd[i] ^= info[i];
 2057              		.loc 1 549 13 is_stmt 0 discriminator 3 view .LVU759
 2058 002a 50F8042F 		ldr	r2, [r0, #4]!
 2059 002e 1968     		ldr	r1, [r3]
 548:masked-decode-inside.c **** 		base32[i] ^= ((uint32_t*)pt)[i];
 2060              		.loc 1 548 5 discriminator 3 view .LVU760
 2061 0030 B042     		cmp	r0, r6
 549:masked-decode-inside.c ****         // recd[i] ^= info[i];
 2062              		.loc 1 549 13 discriminator 3 view .LVU761
 2063 0032 82EA0102 		eor	r2, r2, r1
 2064 0036 43F8042B 		str	r2, [r3], #4
 2065              	.LVL188:
 548:masked-decode-inside.c **** 		base32[i] ^= ((uint32_t*)pt)[i];
 2066              		.loc 1 548 23 is_stmt 1 discriminator 3 view .LVU762
 548:masked-decode-inside.c **** 		base32[i] ^= ((uint32_t*)pt)[i];
 2067              		.loc 1 548 16 discriminator 3 view .LVU763
 548:masked-decode-inside.c **** 		base32[i] ^= ((uint32_t*)pt)[i];
 2068              		.loc 1 548 5 is_stmt 0 discriminator 3 view .LVU764
 2069 003a F6D1     		bne	.L165
 568:masked-decode-inside.c **** 		recd[i] = (((uint8_t*)base32)[i/8] >> (i%8)) & 1;
 2070              		.loc 1 568 19 view .LVU765
 2071 003c 0D48     		ldr	r0, .L170+4
 2072 003e 90F82C50 		ldrb	r5, [r0, #44]	@ zero_extendqisi2
 2073 0042 00F2BF24 		addw	r4, r0, #703
 2074 0046 0021     		movs	r1, #0
 2075              	.LVL189:
 2076              	.L166:
 568:masked-decode-inside.c **** 		recd[i] = (((uint8_t*)base32)[i/8] >> (i%8)) & 1;
 2077              		.loc 1 568 19 view .LVU766
 2078 0048 8BB2     		uxth	r3, r1
 2079              	.LVL190:
 568:masked-decode-inside.c **** 		recd[i] = (((uint8_t*)base32)[i/8] >> (i%8)) & 1;
 2080              		.loc 1 568 17 is_stmt 1 discriminator 1 view .LVU767
 568:masked-decode-inside.c **** 		recd[i] = (((uint8_t*)base32)[i/8] >> (i%8)) & 1;
 2081              		.loc 1 568 5 is_stmt 0 discriminator 1 view .LVU768
 2082 004a 9D42     		cmp	r5, r3
 2083 004c 02D8     		bhi	.L167
 573:masked-decode-inside.c ****     
 2084              		.loc 1 573 2 is_stmt 1 view .LVU769
 578:masked-decode-inside.c **** 
 2085              		.loc 1 578 1 is_stmt 0 view .LVU770
 2086 004e F0BC     		pop	{r4, r5, r6, r7}
 2087              	.LCFI15:
 2088              		.cfi_remember_state
 2089              		.cfi_restore 7
 2090              		.cfi_restore 6
 2091              		.cfi_restore 5
 2092              		.cfi_restore 4
 2093              		.cfi_def_cfa_offset 0
 2094              	.LVL191:
 573:masked-decode-inside.c ****     
 2095              		.loc 1 573 16 view .LVU771
 2096 0050 FFF7FEBF 		b	pompom
 2097              	.LVL192:
 2098              	.L167:
 2099              	.LCFI16:
 2100              		.cfi_restore_state
 569:masked-decode-inside.c ****     }
 2101              		.loc 1 569 3 is_stmt 1 discriminator 3 view .LVU772
 569:masked-decode-inside.c ****     }
 2102              		.loc 1 569 32 is_stmt 0 discriminator 3 view .LVU773
 2103 0054 00EBD302 		add	r2, r0, r3, lsr #3
 569:masked-decode-inside.c ****     }
 2104              		.loc 1 569 43 discriminator 3 view .LVU774
 2105 0058 03F00703 		and	r3, r3, #7
 2106              	.LVL193:
 569:masked-decode-inside.c ****     }
 2107              		.loc 1 569 32 discriminator 3 view .LVU775
 2108 005c 92F84423 		ldrb	r2, [r2, #836]	@ zero_extendqisi2
 569:masked-decode-inside.c ****     }
 2109              		.loc 1 569 38 discriminator 3 view .LVU776
 2110 0060 42FA03F3 		asr	r3, r2, r3
 569:masked-decode-inside.c ****     }
 2111              		.loc 1 569 48 discriminator 3 view .LVU777
 2112 0064 03F00103 		and	r3, r3, #1
 569:masked-decode-inside.c ****     }
 2113              		.loc 1 569 11 discriminator 3 view .LVU778
 2114 0068 04F8013B 		strb	r3, [r4], #1
 568:masked-decode-inside.c **** 		recd[i] = (((uint8_t*)base32)[i/8] >> (i%8)) & 1;
 2115              		.loc 1 568 29 is_stmt 1 discriminator 3 view .LVU779
 2116              	.LVL194:
 568:masked-decode-inside.c **** 		recd[i] = (((uint8_t*)base32)[i/8] >> (i%8)) & 1;
 2117              		.loc 1 568 29 is_stmt 0 discriminator 3 view .LVU780
 2118 006c 0131     		adds	r1, r1, #1
 2119              	.LVL195:
 568:masked-decode-inside.c **** 		recd[i] = (((uint8_t*)base32)[i/8] >> (i%8)) & 1;
 2120              		.loc 1 568 29 discriminator 3 view .LVU781
 2121 006e EBE7     		b	.L166
 2122              	.L171:
 2123              		.align	2
 2124              	.L170:
 2125 0070 01000000 		.word	.LANCHOR0+1
 2126 0074 00000000 		.word	.LANCHOR0
 2127              		.cfi_endproc
 2128              	.LFE10:
 2130              		.section	.text.finish,"ax",%progbits
 2131              		.align	1
 2132              		.global	finish
 2133              		.syntax unified
 2134              		.thumb
 2135              		.thumb_func
 2136              		.fpu softvfp
 2138              	finish:
 2139              	.LVL196:
 2140              	.LFB11:
 581:masked-decode-inside.c ****  //    for (int i = length - k; i < length; i++) { 
 2141              		.loc 1 581 51 is_stmt 1 view -0
 2142              		.cfi_startproc
 2143              		@ args = 0, pretend = 0, frame = 0
 2144              		@ frame_needed = 0, uses_anonymous_args = 0
 585:masked-decode-inside.c ****     uint8_t x = 0;
 2145              		.loc 1 585 5 view .LVU783
 586:masked-decode-inside.c ****     int x_ = 0;
 2146              		.loc 1 586 5 view .LVU784
 587:masked-decode-inside.c ****     for (i = start; i < length; i++) { 
 2147              		.loc 1 587 5 view .LVU785
 588:masked-decode-inside.c **** 		// if (data[i - length + k] != recd[i]) {
 2148              		.loc 1 588 5 view .LVU786
 581:masked-decode-inside.c ****  //    for (int i = length - k; i < length; i++) { 
 2149              		.loc 1 581 51 is_stmt 0 view .LVU787
 2150 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2151              	.LCFI17:
 2152              		.cfi_def_cfa_offset 20
 2153              		.cfi_offset 4, -20
 2154              		.cfi_offset 5, -16
 2155              		.cfi_offset 6, -12
 2156              		.cfi_offset 7, -8
 2157              		.cfi_offset 14, -4
 587:masked-decode-inside.c ****     for (i = start; i < length; i++) { 
 2158              		.loc 1 587 9 view .LVU788
 2159 0002 0023     		movs	r3, #0
 588:masked-decode-inside.c **** 		// if (data[i - length + k] != recd[i]) {
 2160              		.loc 1 588 23 view .LVU789
 2161 0004 104E     		ldr	r6, .L180
 586:masked-decode-inside.c ****     int x_ = 0;
 2162              		.loc 1 586 13 view .LVU790
 2163 0006 1C46     		mov	r4, r3
 2164              	.LVL197:
 2165              	.L173:
 588:masked-decode-inside.c **** 		// if (data[i - length + k] != recd[i]) {
 2166              		.loc 1 588 21 is_stmt 1 discriminator 1 view .LVU791
 588:masked-decode-inside.c **** 		// if (data[i - length + k] != recd[i]) {
 2167              		.loc 1 588 23 is_stmt 0 discriminator 1 view .LVU792
 2168 0008 96F82C50 		ldrb	r5, [r6, #44]	@ zero_extendqisi2
 588:masked-decode-inside.c **** 		// if (data[i - length + k] != recd[i]) {
 2169              		.loc 1 588 5 discriminator 1 view .LVU793
 2170 000c 8D42     		cmp	r5, r1
 2171 000e 08DC     		bgt	.L175
 605:masked-decode-inside.c ****         pt[x_/8] = x >> (8-(x_% 8));
 2172              		.loc 1 605 5 is_stmt 1 view .LVU794
 605:masked-decode-inside.c ****         pt[x_/8] = x >> (8-(x_% 8));
 2173              		.loc 1 605 7 is_stmt 0 view .LVU795
 2174 0010 13F00702 		ands	r2, r3, #7
 2175              	.LVL198:
 606:masked-decode-inside.c ****     }
 2176              		.loc 1 606 9 is_stmt 1 view .LVU796
 606:masked-decode-inside.c ****     }
 2177              		.loc 1 606 14 is_stmt 0 view .LVU797
 2178 0014 1FBF     		itttt	ne
 2179 0016 DB10     		asrne	r3, r3, #3
 2180              	.LVL199:
 606:masked-decode-inside.c ****     }
 2181              		.loc 1 606 27 view .LVU798
 2182 0018 C2F10802 		rsbne	r2, r2, #8
 606:masked-decode-inside.c ****     }
 2183              		.loc 1 606 22 view .LVU799
 2184 001c 1441     		asrne	r4, r4, r2
 2185              	.LVL200:
 606:masked-decode-inside.c ****     }
 2186              		.loc 1 606 18 view .LVU800
 2187 001e C454     		strbne	r4, [r0, r3]
 623:masked-decode-inside.c **** 
 2188              		.loc 1 623 1 view .LVU801
 2189 0020 F0BD     		pop	{r4, r5, r6, r7, pc}
 2190              	.LVL201:
 2191              	.L175:
 593:masked-decode-inside.c ****         x += from[i] << 7;
 2192              		.loc 1 593 9 is_stmt 1 view .LVU802
 594:masked-decode-inside.c **** 
 2193              		.loc 1 594 9 view .LVU803
 594:masked-decode-inside.c **** 
 2194              		.loc 1 594 22 is_stmt 0 view .LVU804
 2195 0022 555C     		ldrb	r5, [r2, r1]	@ zero_extendqisi2
 600:masked-decode-inside.c ****             pt[x_/8-1] = x;
 2196              		.loc 1 600 11 view .LVU805
 2197 0024 0133     		adds	r3, r3, #1
 2198              	.LVL202:
 594:masked-decode-inside.c **** 
 2199              		.loc 1 594 22 view .LVU806
 2200 0026 ED01     		lsls	r5, r5, #7
 594:masked-decode-inside.c **** 
 2201              		.loc 1 594 11 view .LVU807
 2202 0028 05EB5404 		add	r4, r5, r4, lsr #1
 2203              	.LVL203:
 600:masked-decode-inside.c ****             pt[x_/8-1] = x;
 2204              		.loc 1 600 11 view .LVU808
 2205 002c 13F00705 		ands	r5, r3, #7
 601:masked-decode-inside.c ****             x = 0;
 2206              		.loc 1 601 24 view .LVU809
 2207 0030 08BF     		it	eq
 2208 0032 00EBE307 		addeq	r7, r0, r3, asr #3
 594:masked-decode-inside.c **** 
 2209              		.loc 1 594 11 view .LVU810
 2210 0036 E4B2     		uxtb	r4, r4
 2211              	.LVL204:
 600:masked-decode-inside.c ****             pt[x_/8-1] = x;
 2212              		.loc 1 600 9 is_stmt 1 view .LVU811
 601:masked-decode-inside.c ****             x = 0;
 2213              		.loc 1 601 13 view .LVU812
 601:masked-decode-inside.c ****             x = 0;
 2214              		.loc 1 601 24 is_stmt 0 view .LVU813
 2215 0038 08BF     		it	eq
 2216 003a 07F8014C 		strbeq	r4, [r7, #-1]
 602:masked-decode-inside.c ****         }
 2217              		.loc 1 602 13 is_stmt 1 view .LVU814
 2218              	.LVL205:
 588:masked-decode-inside.c **** 		// if (data[i - length + k] != recd[i]) {
 2219              		.loc 1 588 34 is_stmt 0 view .LVU815
 2220 003e 01F10101 		add	r1, r1, #1
 2221              	.LVL206:
 602:masked-decode-inside.c ****         }
 2222              		.loc 1 602 15 view .LVU816
 2223 0042 08BF     		it	eq
 2224 0044 2C46     		moveq	r4, r5
 2225              	.LVL207:
 588:masked-decode-inside.c **** 		// if (data[i - length + k] != recd[i]) {
 2226              		.loc 1 588 33 is_stmt 1 view .LVU817
 588:masked-decode-inside.c **** 		// if (data[i - length + k] != recd[i]) {
 2227              		.loc 1 588 33 is_stmt 0 view .LVU818
 2228 0046 DFE7     		b	.L173
 2229              	.L181:
 2230              		.align	2
 2231              	.L180:
 2232 0048 00000000 		.word	.LANCHOR0
 2233              		.cfi_endproc
 2234              	.LFE11:
 2236              		.section	.text.get_pt,"ax",%progbits
 2237              		.align	1
 2238              		.global	get_pt
 2239              		.syntax unified
 2240              		.thumb
 2241              		.thumb_func
 2242              		.fpu softvfp
 2244              	get_pt:
 2245              	.LVL208:
 2246              	.LFB14:
 645:masked-decode-inside.c ****     uint8_t buffer[16];
 2247              		.loc 1 645 1 is_stmt 1 view -0
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 16
 2250              		@ frame_needed = 0, uses_anonymous_args = 0
 646:masked-decode-inside.c ****     preset(pt, buffer);
 2251              		.loc 1 646 5 view .LVU820
 647:masked-decode-inside.c ****     noop;
 2252              		.loc 1 647 5 view .LVU821
 645:masked-decode-inside.c ****     uint8_t buffer[16];
 2253              		.loc 1 645 1 is_stmt 0 view .LVU822
 2254 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 2255              	.LCFI18:
 2256              		.cfi_def_cfa_offset 24
 2257              		.cfi_offset 4, -8
 2258              		.cfi_offset 14, -4
 645:masked-decode-inside.c ****     uint8_t buffer[16];
 2259              		.loc 1 645 1 view .LVU823
 2260 0002 0446     		mov	r4, r0
 647:masked-decode-inside.c ****     noop;
 2261              		.loc 1 647 5 view .LVU824
 2262 0004 6946     		mov	r1, sp
 2263              	.LVL209:
 647:masked-decode-inside.c ****     noop;
 2264              		.loc 1 647 5 view .LVU825
 2265 0006 FFF7FEFF 		bl	preset
 2266              	.LVL210:
 648:masked-decode-inside.c ****     noop;
 2267              		.loc 1 648 5 is_stmt 1 view .LVU826
 649:masked-decode-inside.c ****     noop;
 2268              		.loc 1 649 5 view .LVU827
 650:masked-decode-inside.c ****     noop;
 2269              		.loc 1 650 5 view .LVU828
 651:masked-decode-inside.c ****     noop;
 2270              		.loc 1 651 5 view .LVU829
 652:masked-decode-inside.c ****     noop;
 2271              		.loc 1 652 5 view .LVU830
 653:masked-decode-inside.c ****     noop;
 2272              		.loc 1 653 5 view .LVU831
 654:masked-decode-inside.c ****     noop;
 2273              		.loc 1 654 5 view .LVU832
 655:masked-decode-inside.c ****     noop;
 2274              		.loc 1 655 5 view .LVU833
 656:masked-decode-inside.c ****     noop;
 2275              		.loc 1 656 5 view .LVU834
 657:masked-decode-inside.c ****     noop;
 2276              		.loc 1 657 5 view .LVU835
 658:masked-decode-inside.c ****     noop;
 2277              		.loc 1 658 5 view .LVU836
 659:masked-decode-inside.c ****     noop;
 2278              		.loc 1 659 5 view .LVU837
 660:masked-decode-inside.c ****     noop;
 2279              		.loc 1 660 5 view .LVU838
 661:masked-decode-inside.c **** 	trigger_high();
 2280              		.loc 1 661 5 view .LVU839
 662:masked-decode-inside.c ****     
 2281              		.loc 1 662 2 view .LVU840
 2282 000a FFF7FEFF 		bl	trigger_high
 2283              	.LVL211:
 668:masked-decode-inside.c **** 
 2284              		.loc 1 668 5 view .LVU841
 2285 000e 6946     		mov	r1, sp
 2286 0010 2046     		mov	r0, r4
 2287 0012 FFF7FEFF 		bl	handle
 2288              	.LVL212:
 670:masked-decode-inside.c ****     uint8_t i;
 2289              		.loc 1 670 5 view .LVU842
 2290 0016 FFF7FEFF 		bl	trigger_low
 2291              	.LVL213:
 671:masked-decode-inside.c ****  //    for(i = length-k; i < length; i++) {
 2292              		.loc 1 671 5 view .LVU843
 675:masked-decode-inside.c **** 
 2293              		.loc 1 675 5 view .LVU844
 2294 001a 0A4A     		ldr	r2, .L183
 2295 001c 92F83531 		ldrb	r3, [r2, #309]	@ zero_extendqisi2
 2296 0020 92F82C10 		ldrb	r1, [r2, #44]	@ zero_extendqisi2
 2297 0024 C91A     		subs	r1, r1, r3
 2298 0026 2046     		mov	r0, r4
 2299 0028 02F2BF22 		addw	r2, r2, #703
 2300 002c C9B2     		uxtb	r1, r1
 2301 002e FFF7FEFF 		bl	finish
 2302              	.LVL214:
 678:masked-decode-inside.c **** 	return 0x00;
 2303              		.loc 1 678 2 view .LVU845
 2304 0032 2246     		mov	r2, r4
 2305 0034 1021     		movs	r1, #16
 2306 0036 7220     		movs	r0, #114
 2307 0038 FFF7FEFF 		bl	simpleserial_put
 2308              	.LVL215:
 679:masked-decode-inside.c **** }
 2309              		.loc 1 679 2 view .LVU846
 680:masked-decode-inside.c **** 
 2310              		.loc 1 680 1 is_stmt 0 view .LVU847
 2311 003c 0020     		movs	r0, #0
 2312 003e 04B0     		add	sp, sp, #16
 2313              	.LCFI19:
 2314              		.cfi_def_cfa_offset 8
 2315              		@ sp needed
 2316 0040 10BD     		pop	{r4, pc}
 2317              	.LVL216:
 2318              	.L184:
 680:masked-decode-inside.c **** 
 2319              		.loc 1 680 1 view .LVU848
 2320 0042 00BF     		.align	2
 2321              	.L183:
 2322 0044 00000000 		.word	.LANCHOR0
 2323              		.cfi_endproc
 2324              	.LFE14:
 2326              		.section	.text.get_enc,"ax",%progbits
 2327              		.align	1
 2328              		.global	get_enc
 2329              		.syntax unified
 2330              		.thumb
 2331              		.thumb_func
 2332              		.fpu softvfp
 2334              	get_enc:
 2335              	.LVL217:
 2336              	.LFB16:
 688:masked-decode-inside.c **** 
 689:masked-decode-inside.c **** uint8_t get_enc(uint8_t* pt, uint8_t len) {
 2337              		.loc 1 689 43 is_stmt 1 view -0
 2338              		.cfi_startproc
 2339              		@ args = 0, pretend = 0, frame = 0
 2340              		@ frame_needed = 0, uses_anonymous_args = 0
 690:masked-decode-inside.c ****     uint16_t i=0;
 2341              		.loc 1 690 5 view .LVU850
 691:masked-decode-inside.c ****     for (i = 0; i < k; i++){ // puts input in recd (to decode later)
 2342              		.loc 1 691 5 view .LVU851
 689:masked-decode-inside.c ****     uint16_t i=0;
 2343              		.loc 1 689 43 is_stmt 0 view .LVU852
 2344 0000 70B5     		push	{r4, r5, r6, lr}
 2345              	.LCFI20:
 2346              		.cfi_def_cfa_offset 16
 2347              		.cfi_offset 4, -16
 2348              		.cfi_offset 5, -12
 2349              		.cfi_offset 6, -8
 2350              		.cfi_offset 14, -4
 2351              		.loc 1 691 19 view .LVU853
 2352 0002 224C     		ldr	r4, .L192
 2353 0004 94F83561 		ldrb	r6, [r4, #309]	@ zero_extendqisi2
 689:masked-decode-inside.c ****     uint16_t i=0;
 2354              		.loc 1 689 43 view .LVU854
 2355 0008 0546     		mov	r5, r0
 2356              		.loc 1 691 5 view .LVU855
 2357 000a 0021     		movs	r1, #0
 2358              	.LVL218:
 2359              		.loc 1 691 5 view .LVU856
 2360 000c 04F50F70 		add	r0, r4, #572
 2361              	.LVL219:
 2362              	.L186:
 2363              		.loc 1 691 5 view .LVU857
 2364 0010 8BB2     		uxth	r3, r1
 2365              	.LVL220:
 2366              		.loc 1 691 17 is_stmt 1 discriminator 1 view .LVU858
 2367              		.loc 1 691 5 is_stmt 0 discriminator 1 view .LVU859
 2368 0012 9E42     		cmp	r6, r3
 2369 0014 25D8     		bhi	.L187
 2370 0016 0023     		movs	r3, #0
 2371              	.LVL221:
 692:masked-decode-inside.c **** 		data[i] = (pt[i/8] >> (i%8)) & 1;
 693:masked-decode-inside.c ****     }
 694:masked-decode-inside.c ****     for (i =0; i<length; i++) {
 695:masked-decode-inside.c ****         pt[i]=0;
 2372              		.loc 1 695 14 view .LVU860
 2373 0018 1846     		mov	r0, r3
 2374              	.LVL222:
 2375              	.L188:
 694:masked-decode-inside.c ****         pt[i]=0;
 2376              		.loc 1 694 16 is_stmt 1 discriminator 1 view .LVU861
 694:masked-decode-inside.c ****         pt[i]=0;
 2377              		.loc 1 694 5 is_stmt 0 discriminator 1 view .LVU862
 2378 001a 94F82C10 		ldrb	r1, [r4, #44]	@ zero_extendqisi2
 2379 001e 9AB2     		uxth	r2, r3
 2380 0020 9142     		cmp	r1, r2
 2381 0022 2AD8     		bhi	.L189
 696:masked-decode-inside.c ****     }
 697:masked-decode-inside.c ****     encode_bch();
 2382              		.loc 1 697 5 is_stmt 1 view .LVU863
 2383 0024 FFF7FEFF 		bl	encode_bch
 2384              	.LVL223:
 698:masked-decode-inside.c ****     for (i = 0; i < length - k; i++)
 2385              		.loc 1 698 5 view .LVU864
 2386              		.loc 1 698 28 is_stmt 0 view .LVU865
 2387 0028 94F83521 		ldrb	r2, [r4, #309]	@ zero_extendqisi2
 2388 002c 94F82C00 		ldrb	r0, [r4, #44]	@ zero_extendqisi2
 2389              		.loc 1 698 5 view .LVU866
 2390 0030 0021     		movs	r1, #0
 2391              		.loc 1 698 28 view .LVU867
 2392 0032 801A     		subs	r0, r0, r2
 2393              	.LVL224:
 2394              	.L190:
 2395              		.loc 1 698 17 is_stmt 1 discriminator 1 view .LVU868
 2396              		.loc 1 698 19 is_stmt 0 discriminator 1 view .LVU869
 2397 0034 8BB2     		uxth	r3, r1
 2398              		.loc 1 698 5 discriminator 1 view .LVU870
 2399 0036 8342     		cmp	r3, r0
 2400 0038 01F10101 		add	r1, r1, #1
 2401              	.LVL225:
 2402              		.loc 1 698 5 discriminator 1 view .LVU871
 2403 003c 20DB     		blt	.L191
 699:masked-decode-inside.c **** 		recd[i] = bb[i];
 700:masked-decode-inside.c **** 	for (i = 0; i < k; i++)
 701:masked-decode-inside.c **** 		recd[i + length - k] = data[i];
 2404              		.loc 1 701 24 view .LVU872
 2405 003e 144C     		ldr	r4, .L192+4
 2406 0040 A4F18301 		sub	r1, r4, #131
 2407 0044 2044     		add	r0, r0, r4
 2408 0046 FFF7FEFF 		bl	memcpy
 2409              	.LVL226:
 702:masked-decode-inside.c ****     finish(pt, 0, &(recd[0]));
 2410              		.loc 1 702 5 is_stmt 1 view .LVU873
 2411 004a 2246     		mov	r2, r4
 2412 004c 2846     		mov	r0, r5
 2413 004e 0021     		movs	r1, #0
 2414 0050 FFF7FEFF 		bl	finish
 2415              	.LVL227:
 703:masked-decode-inside.c ****     simpleserial_put('r', 16, pt);
 2416              		.loc 1 703 5 view .LVU874
 2417 0054 2A46     		mov	r2, r5
 2418 0056 1021     		movs	r1, #16
 2419 0058 7220     		movs	r0, #114
 2420 005a FFF7FEFF 		bl	simpleserial_put
 2421              	.LVL228:
 704:masked-decode-inside.c ****     return 0x00;
 2422              		.loc 1 704 5 view .LVU875
 705:masked-decode-inside.c **** }
 2423              		.loc 1 705 1 is_stmt 0 view .LVU876
 2424 005e 0020     		movs	r0, #0
 2425 0060 70BD     		pop	{r4, r5, r6, pc}
 2426              	.LVL229:
 2427              	.L187:
 692:masked-decode-inside.c ****     }
 2428              		.loc 1 692 3 is_stmt 1 discriminator 3 view .LVU877
 692:masked-decode-inside.c ****     }
 2429              		.loc 1 692 18 is_stmt 0 discriminator 3 view .LVU878
 2430 0062 DA08     		lsrs	r2, r3, #3
 692:masked-decode-inside.c ****     }
 2431              		.loc 1 692 27 discriminator 3 view .LVU879
 2432 0064 03F00703 		and	r3, r3, #7
 2433              	.LVL230:
 692:masked-decode-inside.c ****     }
 2434              		.loc 1 692 16 discriminator 3 view .LVU880
 2435 0068 AA5C     		ldrb	r2, [r5, r2]	@ zero_extendqisi2
 692:masked-decode-inside.c ****     }
 2436              		.loc 1 692 22 discriminator 3 view .LVU881
 2437 006a 42FA03F3 		asr	r3, r2, r3
 692:masked-decode-inside.c ****     }
 2438              		.loc 1 692 32 discriminator 3 view .LVU882
 2439 006e 03F00103 		and	r3, r3, #1
 692:masked-decode-inside.c ****     }
 2440              		.loc 1 692 11 discriminator 3 view .LVU883
 2441 0072 00F8013B 		strb	r3, [r0], #1
 691:masked-decode-inside.c **** 		data[i] = (pt[i/8] >> (i%8)) & 1;
 2442              		.loc 1 691 24 is_stmt 1 discriminator 3 view .LVU884
 2443              	.LVL231:
 691:masked-decode-inside.c **** 		data[i] = (pt[i/8] >> (i%8)) & 1;
 2444              		.loc 1 691 24 is_stmt 0 discriminator 3 view .LVU885
 2445 0076 0131     		adds	r1, r1, #1
 2446              	.LVL232:
 691:masked-decode-inside.c **** 		data[i] = (pt[i/8] >> (i%8)) & 1;
 2447              		.loc 1 691 24 discriminator 3 view .LVU886
 2448 0078 CAE7     		b	.L186
 2449              	.LVL233:
 2450              	.L189:
 695:masked-decode-inside.c ****     }
 2451              		.loc 1 695 9 is_stmt 1 discriminator 3 view .LVU887
 695:masked-decode-inside.c ****     }
 2452              		.loc 1 695 14 is_stmt 0 discriminator 3 view .LVU888
 2453 007a E854     		strb	r0, [r5, r3]
 694:masked-decode-inside.c ****         pt[i]=0;
 2454              		.loc 1 694 26 is_stmt 1 discriminator 3 view .LVU889
 2455              	.LVL234:
 694:masked-decode-inside.c ****         pt[i]=0;
 2456              		.loc 1 694 26 is_stmt 0 discriminator 3 view .LVU890
 2457 007c 0133     		adds	r3, r3, #1
 2458              	.LVL235:
 694:masked-decode-inside.c ****         pt[i]=0;
 2459              		.loc 1 694 26 discriminator 3 view .LVU891
 2460 007e CCE7     		b	.L188
 2461              	.LVL236:
 2462              	.L191:
 699:masked-decode-inside.c **** 	for (i = 0; i < k; i++)
 2463              		.loc 1 699 3 is_stmt 1 discriminator 3 view .LVU892
 699:masked-decode-inside.c **** 	for (i = 0; i < k; i++)
 2464              		.loc 1 699 11 is_stmt 0 discriminator 3 view .LVU893
 2465 0080 2344     		add	r3, r3, r4
 2466              	.LVL237:
 699:masked-decode-inside.c **** 	for (i = 0; i < k; i++)
 2467              		.loc 1 699 11 discriminator 3 view .LVU894
 2468 0082 93F8B961 		ldrb	r6, [r3, #441]	@ zero_extendqisi2
 2469 0086 83F8BF62 		strb	r6, [r3, #703]
 698:masked-decode-inside.c **** 		recd[i] = bb[i];
 2470              		.loc 1 698 33 is_stmt 1 discriminator 3 view .LVU895
 2471              	.LVL238:
 698:masked-decode-inside.c **** 		recd[i] = bb[i];
 2472              		.loc 1 698 33 is_stmt 0 discriminator 3 view .LVU896
 2473 008a D3E7     		b	.L190
 2474              	.L193:
 2475              		.align	2
 2476              	.L192:
 2477 008c 00000000 		.word	.LANCHOR0
 2478 0090 BF020000 		.word	.LANCHOR0+703
 2479              		.cfi_endproc
 2480              	.LFE16:
 2482              		.section	.text.reset,"ax",%progbits
 2483              		.align	1
 2484              		.global	reset
 2485              		.syntax unified
 2486              		.thumb
 2487              		.thumb_func
 2488              		.fpu softvfp
 2490              	reset:
 2491              	.LVL239:
 2492              	.LFB17:
 706:masked-decode-inside.c **** 
 707:masked-decode-inside.c **** uint8_t reset(uint8_t* x, uint8_t len)
 708:masked-decode-inside.c **** {
 2493              		.loc 1 708 1 is_stmt 1 view -0
 2494              		.cfi_startproc
 2495              		@ args = 0, pretend = 0, frame = 0
 2496              		@ frame_needed = 0, uses_anonymous_args = 0
 2497              		@ link register save eliminated.
 709:masked-decode-inside.c ****     // Reset key here if needed
 710:masked-decode-inside.c **** 	return 0x00;
 2498              		.loc 1 710 2 view .LVU898
 711:masked-decode-inside.c **** }
 2499              		.loc 1 711 1 is_stmt 0 view .LVU899
 2500 0000 0020     		movs	r0, #0
 2501              	.LVL240:
 2502              		.loc 1 711 1 view .LVU900
 2503 0002 7047     		bx	lr
 2504              		.cfi_endproc
 2505              	.LFE17:
 2507              		.section	.text.startup.main,"ax",%progbits
 2508              		.align	1
 2509              		.global	main
 2510              		.syntax unified
 2511              		.thumb
 2512              		.thumb_func
 2513              		.fpu softvfp
 2515              	main:
 2516              	.LFB18:
 712:masked-decode-inside.c **** int main(void)
 713:masked-decode-inside.c **** {
 2517              		.loc 1 713 1 is_stmt 1 view -0
 2518              		.cfi_startproc
 2519              		@ Volatile: function does not return.
 2520              		@ args = 0, pretend = 0, frame = 0
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
 714:masked-decode-inside.c **** 	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 2522              		.loc 1 714 2 view .LVU902
 715:masked-decode-inside.c **** 
 716:masked-decode-inside.c ****     platform_init();
 2523              		.loc 1 716 5 view .LVU903
 713:masked-decode-inside.c **** 	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 2524              		.loc 1 713 1 is_stmt 0 view .LVU904
 2525 0000 08B5     		push	{r3, lr}
 2526              	.LCFI21:
 2527              		.cfi_def_cfa_offset 8
 2528              		.cfi_offset 3, -8
 2529              		.cfi_offset 14, -4
 2530              		.loc 1 716 5 view .LVU905
 2531 0002 FFF7FEFF 		bl	platform_init
 2532              	.LVL241:
 717:masked-decode-inside.c ****     init_uart();
 2533              		.loc 1 717 5 is_stmt 1 view .LVU906
 2534 0006 FFF7FEFF 		bl	init_uart
 2535              	.LVL242:
 718:masked-decode-inside.c ****     trigger_setup();
 2536              		.loc 1 718 5 view .LVU907
 2537 000a FFF7FEFF 		bl	trigger_setup
 2538              	.LVL243:
 719:masked-decode-inside.c **** 
 720:masked-decode-inside.c **** 
 721:masked-decode-inside.c ****     /* Uncomment this to get a HELLO message for debug */
 722:masked-decode-inside.c **** 	read_p();               /* Read m */
 2539              		.loc 1 722 2 view .LVU908
 2540 000e FFF7FEFF 		bl	read_p
 2541              	.LVL244:
 723:masked-decode-inside.c **** 	generate_gf();          /* Construct the Galois Field GF(2**m) */
 2542              		.loc 1 723 2 view .LVU909
 2543 0012 FFF7FEFF 		bl	generate_gf
 2544              	.LVL245:
 724:masked-decode-inside.c **** 	gen_poly();             /* Compute the generator polynomial of BCH code */
 2545              		.loc 1 724 2 view .LVU910
 2546 0016 FFF7FEFF 		bl	gen_poly
 2547              	.LVL246:
 725:masked-decode-inside.c **** 	seed = 56214563;
 2548              		.loc 1 725 2 view .LVU911
 2549              		.loc 1 725 7 is_stmt 0 view .LVU912
 2550 001a 144B     		ldr	r3, .L197
 2551 001c 1448     		ldr	r0, .L197+4
 2552 001e 9861     		str	r0, [r3, #24]
 726:masked-decode-inside.c **** 	srandom(seed);
 2553              		.loc 1 726 2 is_stmt 1 view .LVU913
 2554 0020 FFF7FEFF 		bl	srandom
 2555              	.LVL247:
 727:masked-decode-inside.c ****     // putch('h');
 728:masked-decode-inside.c ****     // putch('e');
 729:masked-decode-inside.c ****     // putch('l');
 730:masked-decode-inside.c ****     // putch('l');
 731:masked-decode-inside.c ****     // putch('o');
 732:masked-decode-inside.c ****     // putch('\n');
 733:masked-decode-inside.c **** 
 734:masked-decode-inside.c **** 	simpleserial_init();
 2556              		.loc 1 734 2 view .LVU914
 2557 0024 FFF7FEFF 		bl	simpleserial_init
 2558              	.LVL248:
 735:masked-decode-inside.c ****     // #if SS_VER == SS_VER_2_1
 736:masked-decode-inside.c ****     // simpleserial_addcmd(0x01, 16, aes);
 737:masked-decode-inside.c ****     // #else
 738:masked-decode-inside.c ****     simpleserial_addcmd('k', 16, get_key);
 2559              		.loc 1 738 5 view .LVU915
 2560 0028 124A     		ldr	r2, .L197+8
 2561 002a 1021     		movs	r1, #16
 2562 002c 6B20     		movs	r0, #107
 2563 002e FFF7FEFF 		bl	simpleserial_addcmd
 2564              	.LVL249:
 739:masked-decode-inside.c ****     simpleserial_addcmd('p', 32,  get_pt);
 2565              		.loc 1 739 5 view .LVU916
 2566 0032 114A     		ldr	r2, .L197+12
 2567 0034 2021     		movs	r1, #32
 2568 0036 7020     		movs	r0, #112
 2569 0038 FFF7FEFF 		bl	simpleserial_addcmd
 2570              	.LVL250:
 740:masked-decode-inside.c ****     simpleserial_addcmd('e', 16,  get_enc);
 2571              		.loc 1 740 5 view .LVU917
 2572 003c 0F4A     		ldr	r2, .L197+16
 2573 003e 1021     		movs	r1, #16
 2574 0040 6520     		movs	r0, #101
 2575 0042 FFF7FEFF 		bl	simpleserial_addcmd
 2576              	.LVL251:
 741:masked-decode-inside.c ****     simpleserial_addcmd('t', 1,  set_diff);
 2577              		.loc 1 741 5 view .LVU918
 2578 0046 0E4A     		ldr	r2, .L197+20
 2579 0048 0121     		movs	r1, #1
 2580 004a 7420     		movs	r0, #116
 2581 004c FFF7FEFF 		bl	simpleserial_addcmd
 2582              	.LVL252:
 742:masked-decode-inside.c ****     simpleserial_addcmd('s', 4,  set_seed);
 2583              		.loc 1 742 5 view .LVU919
 2584 0050 0C4A     		ldr	r2, .L197+24
 2585 0052 0421     		movs	r1, #4
 2586 0054 7320     		movs	r0, #115
 2587 0056 FFF7FEFF 		bl	simpleserial_addcmd
 2588              	.LVL253:
 743:masked-decode-inside.c ****     //simpleserial_addcmd('x',  0,   reset);
 744:masked-decode-inside.c ****     simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
 2589              		.loc 1 744 5 view .LVU920
 2590 005a 0B4A     		ldr	r2, .L197+28
 2591 005c 0123     		movs	r3, #1
 2592 005e 1221     		movs	r1, #18
 2593 0060 6D20     		movs	r0, #109
 2594 0062 FFF7FEFF 		bl	simpleserial_addcmd_flags
 2595              	.LVL254:
 2596              	.L196:
 745:masked-decode-inside.c ****     //simpleserial_addcmd('s', 2, enc_multi_setnum);
 746:masked-decode-inside.c ****     //simpleserial_addcmd('f', 16, enc_multi_getpt);
 747:masked-decode-inside.c ****     // #endif
 748:masked-decode-inside.c ****     while(1)
 2597              		.loc 1 748 5 discriminator 1 view .LVU921
 749:masked-decode-inside.c ****         simpleserial_get();
 2598              		.loc 1 749 9 discriminator 1 view .LVU922
 2599 0066 FFF7FEFF 		bl	simpleserial_get
 2600              	.LVL255:
 748:masked-decode-inside.c ****         simpleserial_get();
 2601              		.loc 1 748 10 discriminator 1 view .LVU923
 2602 006a FCE7     		b	.L196
 2603              	.L198:
 2604              		.align	2
 2605              	.L197:
 2606 006c 00000000 		.word	.LANCHOR0
 2607 0070 23C45903 		.word	56214563
 2608 0074 00000000 		.word	get_key
 2609 0078 00000000 		.word	get_pt
 2610 007c 00000000 		.word	get_enc
 2611 0080 00000000 		.word	set_diff
 2612 0084 00000000 		.word	set_seed
 2613 0088 00000000 		.word	get_mask
 2614              		.cfi_endproc
 2615              	.LFE18:
 2617              		.global	base32
 2618              		.global	helper
 2619              		.global	diff
 2620              		.global	mem
 2621              		.global	decerror
 2622              		.global	errpos
 2623              		.global	numerr
 2624              		.global	seed
 2625              		.global	bb
 2626              		.global	data
 2627              		.global	recd
 2628              		.global	g
 2629              		.global	index_of
 2630              		.global	alpha_to
 2631              		.global	p
 2632              		.global	d
 2633              		.global	t
 2634              		.global	k
 2635              		.global	length
 2636              		.global	n
 2637              		.global	m
 2638              		.bss
 2639              		.align	2
 2640              		.set	.LANCHOR0,. + 0
 2643              	diff:
 2644 0000 00       		.space	1
 2647              	mem:
 2648 0001 00000000 		.space	20
 2648      00000000 
 2648      00000000 
 2648      00000000 
 2648      00000000 
 2649 0015 000000   		.space	3
 2652              	seed:
 2653 0018 00000000 		.space	4
 2656              	m:
 2657 001c 00       		.space	1
 2660              	p:
 2661 001d 00000000 		.space	14
 2661      00000000 
 2661      00000000 
 2661      0000
 2664              	n:
 2665 002b 00       		.space	1
 2668              	length:
 2669 002c 00       		.space	1
 2672              	alpha_to:
 2673 002d 00000000 		.space	131
 2673      00000000 
 2673      00000000 
 2673      00000000 
 2673      00000000 
 2676              	index_of:
 2677 00b0 00000000 		.space	131
 2677      00000000 
 2677      00000000 
 2677      00000000 
 2677      00000000 
 2680              	t:
 2681 0133 00       		.space	1
 2684              	d:
 2685 0134 00       		.space	1
 2688              	k:
 2689 0135 00       		.space	1
 2692              	g:
 2693 0136 00000000 		.space	131
 2693      00000000 
 2693      00000000 
 2693      00000000 
 2693      00000000 
 2696              	bb:
 2697 01b9 00000000 		.space	131
 2697      00000000 
 2697      00000000 
 2697      00000000 
 2697      00000000 
 2700              	data:
 2701 023c 00000000 		.space	131
 2701      00000000 
 2701      00000000 
 2701      00000000 
 2701      00000000 
 2704              	recd:
 2705 02bf 00000000 		.space	131
 2705      00000000 
 2705      00000000 
 2705      00000000 
 2705      00000000 
 2706 0342 0000     		.space	2
 2709              	base32:
 2710 0344 00000000 		.space	16
 2710      00000000 
 2710      00000000 
 2710      00000000 
 2713              	helper:
 2714 0354 00       		.space	1
 2717              	decerror:
 2718 0355 00       		.space	1
 2721              	errpos:
 2722 0356 00000000 		.space	131
 2722      00000000 
 2722      00000000 
 2722      00000000 
 2722      00000000 
 2725              	numerr:
 2726 03d9 00       		.space	1
 2727              		.text
 2728              	.Letext0:
 2729              		.file 2 "f:\\programs\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\mach
 2730              		.file 3 "f:\\programs\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\
 2731              		.file 4 "../.././hal/hal.h"
 2732              		.file 5 "../.././hal/stm32f3/stm32f3_hal.h"
 2733              		.file 6 "f:\\programs\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\stdl
 2734              		.file 7 "../.././simpleserial/simpleserial.h"
 2735              		.file 8 "../.././crypto/aes-independant.h"
 2736              		.file 9 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 masked-decode-inside.c
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:16     .text.set_diff:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:24     .text.set_diff:00000000 set_diff
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:63     .text.set_diff:00000018 $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:68     .text.get_key:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:75     .text.get_key:00000000 get_key
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:121    .text.get_key:00000024 $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:126    .text.get_mask:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:133    .text.get_mask:00000000 get_mask
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:158    .text.set_seed:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:165    .text.set_seed:00000000 set_seed
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:206    .text.set_seed:0000001c $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:211    .text.read_p:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:218    .text.read_p:00000000 read_p
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:323    .text.read_p:00000030 $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:328    .text.generate_gf:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:335    .text.generate_gf:00000000 generate_gf
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:484    .text.generate_gf:00000094 $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:489    .text.gen_poly:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:496    .text.gen_poly:00000000 gen_poly
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1004   .text.gen_poly:00000228 $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1010   .text.encode_bch:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1017   .text.encode_bch:00000000 encode_bch
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1162   .text.encode_bch:000000a0 $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1167   .text.pompom:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1174   .text.pompom:00000000 pompom
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1775   .text.pompom:000002fc $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1781   .text.pompom:00000304 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1955   .text.pompom:000003b0 $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1960   .text.preset:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1967   .text.preset:00000000 preset
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:1997   .text.preset:00000010 $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2002   .text.handle:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2009   .text.handle:00000000 handle
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2125   .text.handle:00000070 $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2131   .text.finish:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2138   .text.finish:00000000 finish
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2232   .text.finish:00000048 $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2237   .text.get_pt:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2244   .text.get_pt:00000000 get_pt
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2322   .text.get_pt:00000044 $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2327   .text.get_enc:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2334   .text.get_enc:00000000 get_enc
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2477   .text.get_enc:0000008c $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2483   .text.reset:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2490   .text.reset:00000000 reset
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2508   .text.startup.main:00000000 $t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2515   .text.startup.main:00000000 main
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2606   .text.startup.main:0000006c $d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2709   .bss:00000344 base32
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2713   .bss:00000354 helper
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2643   .bss:00000000 diff
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2647   .bss:00000001 mem
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2717   .bss:00000355 decerror
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2721   .bss:00000356 errpos
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2725   .bss:000003d9 numerr
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2652   .bss:00000018 seed
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2696   .bss:000001b9 bb
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2700   .bss:0000023c data
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2704   .bss:000002bf recd
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2692   .bss:00000136 g
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2676   .bss:000000b0 index_of
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2672   .bss:0000002d alpha_to
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2660   .bss:0000001d p
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2684   .bss:00000134 d
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2680   .bss:00000133 t
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2688   .bss:00000135 k
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2668   .bss:0000002c length
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2664   .bss:0000002b n
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2656   .bss:0000001c m
C:\Users\Erez_T\AppData\Local\Temp\cc04jYzK.s:2639   .bss:00000000 $d

UNDEFINED SYMBOLS
simpleserial_put
aes_indep_mask
srandom
memset
memmove
trigger_high
trigger_low
memcpy
platform_init
init_uart
trigger_setup
simpleserial_init
simpleserial_addcmd
simpleserial_addcmd_flags
simpleserial_get
