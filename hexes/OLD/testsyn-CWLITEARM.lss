
testsyn-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a8  080031a8  00020270  2**0
                  CONTENTS
  4 .ARM          00000000  080031a8  080031a8  00020270  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031a8  080031a8  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  080031b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ac  20000270  08003420  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000a1c  08003420  00020a1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005980  00000000  00000000  0002029a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011f4  00000000  00000000  00025c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00003980  00000000  00000000  00026e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e0  00000000  00000000  0002a78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005c8  00000000  00000000  0002aa6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000040ac  00000000  00000000  0002b036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001675  00000000  00000000  0002f0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  00030757  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000138c  00000000  00000000  000307a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000204  00000000  00000000  00031b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000205  00000000  00000000  00031d34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003000 	.word	0x08003000

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08003000 	.word	0x08003000

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <set_diff>:
uint8_t info[128];
uint8_t diff = 0;
uint8_t helper = 0;

uint8_t
set_diff(uint8_t* m, uint8_t len) {
 8000270:	b508      	push	{r3, lr}
    diff = m[0];
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <set_diff+0x18>)
 8000274:	7801      	ldrb	r1, [r0, #0]
 8000276:	7019      	strb	r1, [r3, #0]
set_diff(uint8_t* m, uint8_t len) {
 8000278:	4602      	mov	r2, r0
    simpleserial_put('r', 1, m);
 800027a:	2101      	movs	r1, #1
 800027c:	2072      	movs	r0, #114	; 0x72
 800027e:	f000 fde3 	bl	8000e48 <simpleserial_put>
    return 0x00;
}
 8000282:	2000      	movs	r0, #0
 8000284:	bd08      	pop	{r3, pc}
 8000286:	bf00      	nop
 8000288:	2000028c 	.word	0x2000028c

0800028c <get_mask>:
}



uint8_t get_mask(uint8_t* m, uint8_t len)
{
 800028c:	b508      	push	{r3, lr}
  aes_indep_mask(m, len);
 800028e:	f001 fe0e 	bl	8001eae <aes_indep_mask>
  return 0x00;
}
 8000292:	2000      	movs	r0, #0
 8000294:	bd08      	pop	{r3, pc}
 8000296:	0000      	movs	r0, r0

08000298 <set_seed>:

	simpleserial_put('r', 16, pt);
	return 0x00;
}

uint8_t set_seed(uint8_t* pt, uint8_t len) {
 8000298:	b510      	push	{r4, lr}
    seed =  * (int*) pt;
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <set_seed+0x1c>)
uint8_t set_seed(uint8_t* pt, uint8_t len) {
 800029c:	4604      	mov	r4, r0
    seed =  * (int*) pt;
 800029e:	6800      	ldr	r0, [r0, #0]
 80002a0:	6058      	str	r0, [r3, #4]
    srandom(seed);
 80002a2:	f001 fe85 	bl	8001fb0 <srandom>
    simpleserial_put('r', 4, pt);
 80002a6:	4622      	mov	r2, r4
 80002a8:	2104      	movs	r1, #4
 80002aa:	2072      	movs	r0, #114	; 0x72
 80002ac:	f000 fdcc 	bl	8000e48 <simpleserial_put>
    return 0x00;
}
 80002b0:	2000      	movs	r0, #0
 80002b2:	bd10      	pop	{r4, pc}
 80002b4:	2000028c 	.word	0x2000028c

080002b8 <read_p>:
    m=M;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <read_p+0x24>)
 80002ba:	2207      	movs	r2, #7
 80002bc:	721a      	strb	r2, [r3, #8]
		p[i] = 0;
 80002be:	2200      	movs	r2, #0
 80002c0:	72da      	strb	r2, [r3, #11]
 80002c2:	731a      	strb	r2, [r3, #12]
 80002c4:	735a      	strb	r2, [r3, #13]
 80002c6:	739a      	strb	r2, [r3, #14]
 80002c8:	73da      	strb	r2, [r3, #15]
	p[0] = p[m] = 1;
 80002ca:	2201      	movs	r2, #1
 80002cc:	741a      	strb	r2, [r3, #16]
 80002ce:	725a      	strb	r2, [r3, #9]
	else if (m == 7)	p[1] = 1;
 80002d0:	729a      	strb	r2, [r3, #10]
	n = n - 1;
 80002d2:	227f      	movs	r2, #127	; 0x7f
 80002d4:	75da      	strb	r2, [r3, #23]
	length = LEN;
 80002d6:	761a      	strb	r2, [r3, #24]
}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	2000028c 	.word	0x2000028c

080002e0 <generate_gf>:
{
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	alpha_to[m] = 0;
 80002e2:	4821      	ldr	r0, [pc, #132]	; (8000368 <generate_gf+0x88>)
 80002e4:	7a03      	ldrb	r3, [r0, #8]
 80002e6:	18c6      	adds	r6, r0, r3
 80002e8:	2400      	movs	r4, #0
 80002ea:	f100 0519 	add.w	r5, r0, #25
 80002ee:	7674      	strb	r4, [r6, #25]
	for (i = 0; i < m; i++) {
 80002f0:	f100 0c09 	add.w	ip, r0, #9
	mask = 1;
 80002f4:	2101      	movs	r1, #1
 80002f6:	462a      	mov	r2, r5
	for (i = 0; i < m; i++) {
 80002f8:	b2e7      	uxtb	r7, r4
 80002fa:	42bb      	cmp	r3, r7
 80002fc:	d810      	bhi.n	8000320 <generate_gf+0x40>
	index_of[alpha_to[m]] = m;
 80002fe:	18c5      	adds	r5, r0, r3
	for (i = m + 1; i < n; i++) {
 8000300:	7dc6      	ldrb	r6, [r0, #23]
	index_of[alpha_to[m]] = m;
 8000302:	7e6c      	ldrb	r4, [r5, #25]
 8000304:	4404      	add	r4, r0
	mask >>= 1;
 8000306:	0849      	lsrs	r1, r1, #1
	index_of[alpha_to[m]] = m;
 8000308:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
	for (i = m + 1; i < n; i++) {
 800030c:	3301      	adds	r3, #1
 800030e:	b2dc      	uxtb	r4, r3
 8000310:	fa52 f283 	uxtab	r2, r2, r3
 8000314:	42a6      	cmp	r6, r4
 8000316:	d812      	bhi.n	800033e <generate_gf+0x5e>
	index_of[0] = -1;
 8000318:	23ff      	movs	r3, #255	; 0xff
 800031a:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
}
 800031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		index_of[alpha_to[i]] = i;
 8000320:	1847      	adds	r7, r0, r1
		alpha_to[i] = mask;
 8000322:	f805 1b01 	strb.w	r1, [r5], #1
		index_of[alpha_to[i]] = i;
 8000326:	f887 409c 	strb.w	r4, [r7, #156]	; 0x9c
		if (p[i] != 0)
 800032a:	f81c 7b01 	ldrb.w	r7, [ip], #1
 800032e:	b117      	cbz	r7, 8000336 <generate_gf+0x56>
			alpha_to[m] ^= mask;
 8000330:	7e77      	ldrb	r7, [r6, #25]
 8000332:	404f      	eors	r7, r1
 8000334:	7677      	strb	r7, [r6, #25]
		mask <<= 1;
 8000336:	0049      	lsls	r1, r1, #1
 8000338:	b2c9      	uxtb	r1, r1
	for (i = 0; i < m; i++) {
 800033a:	3401      	adds	r4, #1
 800033c:	e7dc      	b.n	80002f8 <generate_gf+0x18>
		if (alpha_to[i - 1] >= mask)
 800033e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8000342:	428b      	cmp	r3, r1
		  alpha_to[i] = alpha_to[m] ^ ((alpha_to[i - 1] ^ mask) << 1);
 8000344:	bf21      	itttt	cs
 8000346:	404b      	eorcs	r3, r1
 8000348:	7e6f      	ldrbcs	r7, [r5, #25]
 800034a:	b2db      	uxtbcs	r3, r3
 800034c:	ea87 0343 	eorcs.w	r3, r7, r3, lsl #1
		  alpha_to[i] = alpha_to[i - 1] << 1;
 8000350:	bf38      	it	cc
 8000352:	005b      	lslcc	r3, r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	f802 3b01 	strb.w	r3, [r2], #1
		index_of[alpha_to[i]] = i;
 800035a:	4403      	add	r3, r0
 800035c:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	for (i = m + 1; i < n; i++) {
 8000360:	3401      	adds	r4, #1
 8000362:	b2e4      	uxtb	r4, r4
 8000364:	e7d6      	b.n	8000314 <generate_gf+0x34>
 8000366:	bf00      	nop
 8000368:	2000028c 	.word	0x2000028c

0800036c <gen_poly>:
{
 800036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			cycle[jj][ii] = (cycle[jj][ii - 1] * 2) % n;
 8000370:	4a87      	ldr	r2, [pc, #540]	; (8000590 <gen_poly+0x224>)
{
 8000372:	f2ad 7d34 	subw	sp, sp, #1844	; 0x734
	cycle[0][0] = 0;
 8000376:	ad63      	add	r5, sp, #396	; 0x18c
 8000378:	2300      	movs	r3, #0
			cycle[jj][ii] = (cycle[jj][ii - 1] * 2) % n;
 800037a:	7dd0      	ldrb	r0, [r2, #23]
	cycle[0][0] = 0;
 800037c:	702b      	strb	r3, [r5, #0]
	size[0] = 1;
 800037e:	2301      	movs	r3, #1
 8000380:	f88d 3000 	strb.w	r3, [sp]
	cycle[1][0] = 1;
 8000384:	72eb      	strb	r3, [r5, #11]
	size[1] = 1;
 8000386:	f88d 3001 	strb.w	r3, [sp, #1]
			cycle[jj][ii] = (cycle[jj][ii - 1] * 2) % n;
 800038a:	469e      	mov	lr, r3
 800038c:	f04f 0c0b 	mov.w	ip, #11
		} while ((test) && (ll < (n - 1)));
 8000390:	1e47      	subs	r7, r0, #1
			cycle[jj][ii] = (cycle[jj][ii - 1] * 2) % n;
 8000392:	2401      	movs	r4, #1
 8000394:	fb0c 5603 	mla	r6, ip, r3, r5
 8000398:	1931      	adds	r1, r6, r4
 800039a:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800039e:	0049      	lsls	r1, r1, #1
 80003a0:	fbb1 f8f0 	udiv	r8, r1, r0
 80003a4:	fb00 1118 	mls	r1, r0, r8, r1
 80003a8:	5531      	strb	r1, [r6, r4]
			aux = (cycle[jj][ii] * 2) % n;
 80003aa:	0049      	lsls	r1, r1, #1
 80003ac:	fbb1 f8f0 	udiv	r8, r1, r0
 80003b0:	fb00 1118 	mls	r1, r0, r8, r1
		} while (aux != cycle[jj][0]);
 80003b4:	f896 8000 	ldrb.w	r8, [r6]
 80003b8:	b2c9      	uxtb	r1, r1
			size[jj]++;
 80003ba:	3401      	adds	r4, #1
		} while (aux != cycle[jj][0]);
 80003bc:	4588      	cmp	r8, r1
			size[jj]++;
 80003be:	b2e4      	uxtb	r4, r4
		} while (aux != cycle[jj][0]);
 80003c0:	d1ea      	bne.n	8000398 <gen_poly+0x2c>
 80003c2:	f80d 4003 	strb.w	r4, [sp, r3]
		ll = 0;
 80003c6:	2400      	movs	r4, #0
			ll++;
 80003c8:	3401      	adds	r4, #1
 80003ca:	b2e4      	uxtb	r4, r4
			test = 0;
 80003cc:	2600      	movs	r6, #0
			for (ii = 1; ((ii <= jj) && (!test)); ii++)	
 80003ce:	2101      	movs	r1, #1
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d81c      	bhi.n	800040e <gen_poly+0xa2>
 80003d4:	b9f6      	cbnz	r6, 8000414 <gen_poly+0xa8>
 80003d6:	eb01 0881 	add.w	r8, r1, r1, lsl #2
 80003da:	eb01 0848 	add.w	r8, r1, r8, lsl #1
			  for (kaux = 0; ((kaux < size[ii]) && (!test)); kaux++)
 80003de:	f81d a001 	ldrb.w	sl, [sp, r1]
 80003e2:	44a8      	add	r8, r5
 80003e4:	46b1      	mov	r9, r6
 80003e6:	e007      	b.n	80003f8 <gen_poly+0x8c>
			     if (ll == cycle[ii][kaux])
 80003e8:	f818 6b01 	ldrb.w	r6, [r8], #1
			        test = 1;
 80003ec:	eba6 0b04 	sub.w	fp, r6, r4
 80003f0:	f1db 0600 	rsbs	r6, fp, #0
 80003f4:	eb46 060b 	adc.w	r6, r6, fp
			  for (kaux = 0; ((kaux < size[ii]) && (!test)); kaux++)
 80003f8:	fa5f fb89 	uxtb.w	fp, r9
 80003fc:	45da      	cmp	sl, fp
 80003fe:	d903      	bls.n	8000408 <gen_poly+0x9c>
 8000400:	f109 0901 	add.w	r9, r9, #1
 8000404:	2e00      	cmp	r6, #0
 8000406:	d0ef      	beq.n	80003e8 <gen_poly+0x7c>
			for (ii = 1; ((ii <= jj) && (!test)); ii++)	
 8000408:	3101      	adds	r1, #1
 800040a:	b2c9      	uxtb	r1, r1
 800040c:	e7e0      	b.n	80003d0 <gen_poly+0x64>
		} while ((test) && (ll < (n - 1)));
 800040e:	2e00      	cmp	r6, #0
 8000410:	f000 80b2 	beq.w	8000578 <gen_poly+0x20c>
 8000414:	42bc      	cmp	r4, r7
 8000416:	dbd7      	blt.n	80003c8 <gen_poly+0x5c>
    t = EFFORT;
 8000418:	210a      	movs	r1, #10
 800041a:	f882 111f 	strb.w	r1, [r2, #287]	; 0x11f
	d = 2 * t + 1;
 800041e:	2115      	movs	r1, #21
 8000420:	f882 1120 	strb.w	r1, [r2, #288]	; 0x120
	rdncy = 0;
 8000424:	2700      	movs	r7, #0
    t2 = 2*t;
 8000426:	2114      	movs	r1, #20
 8000428:	f882 1121 	strb.w	r1, [r2, #289]	; 0x121
	kaux = 0;
 800042c:	463c      	mov	r4, r7
	for (ii = 1; ii <= nocycles; ii++) {
 800042e:	2101      	movs	r1, #1
 8000430:	ae21      	add	r6, sp, #132	; 0x84
 8000432:	428b      	cmp	r3, r1
 8000434:	d215      	bcs.n	8000462 <gen_poly+0xf6>
 8000436:	f04f 0e00 	mov.w	lr, #0
	kaux = 1;
 800043a:	2301      	movs	r3, #1
			zeros[kaux] = cycle[min[ii]][jj];
 800043c:	f50d 7884 	add.w	r8, sp, #264	; 0x108
	for (ii = 0; ii < noterms; ii++)
 8000440:	fa5f f18e 	uxtb.w	r1, lr
 8000444:	428c      	cmp	r4, r1
 8000446:	d952      	bls.n	80004ee <gen_poly+0x182>
		for (jj = 0; jj < size[min[ii]]; jj++) {
 8000448:	f816 cb01 	ldrb.w	ip, [r6], #1
 800044c:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8000450:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8000454:	f81d c00c 	ldrb.w	ip, [sp, ip]
 8000458:	449c      	add	ip, r3
 800045a:	4429      	add	r1, r5
 800045c:	fa5f fc8c 	uxtb.w	ip, ip
 8000460:	e040      	b.n	80004e4 <gen_poly+0x178>
		min[kaux] = 0;
 8000462:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 8000466:	f04f 0c00 	mov.w	ip, #0
 800046a:	eb01 0e4e 	add.w	lr, r1, lr, lsl #1
		for (jj = 0; ((jj < size[ii]) && (!test)); jj++)
 800046e:	f04f 0900 	mov.w	r9, #0
 8000472:	f81d a001 	ldrb.w	sl, [sp, r1]
		min[kaux] = 0;
 8000476:	f806 c004 	strb.w	ip, [r6, r4]
		for (jj = 0; ((jj < size[ii]) && (!test)); jj++)
 800047a:	44ae      	add	lr, r5
		test = 0;
 800047c:	46cc      	mov	ip, r9
		for (jj = 0; ((jj < size[ii]) && (!test)); jj++)
 800047e:	fa5f f889 	uxtb.w	r8, r9
 8000482:	45c2      	cmp	sl, r8
 8000484:	d902      	bls.n	800048c <gen_poly+0x120>
 8000486:	f1bc 0f00 	cmp.w	ip, #0
 800048a:	d00d      	beq.n	80004a8 <gen_poly+0x13c>
		if (min[kaux]) {
 800048c:	f816 c004 	ldrb.w	ip, [r6, r4]
 8000490:	f1bc 0f00 	cmp.w	ip, #0
 8000494:	d005      	beq.n	80004a2 <gen_poly+0x136>
			rdncy += size[min[kaux]];
 8000496:	f81d c00c 	ldrb.w	ip, [sp, ip]
			kaux++;
 800049a:	3401      	adds	r4, #1
			rdncy += size[min[kaux]];
 800049c:	4467      	add	r7, ip
 800049e:	b2ff      	uxtb	r7, r7
			kaux++;
 80004a0:	b2e4      	uxtb	r4, r4
	for (ii = 1; ii <= nocycles; ii++) {
 80004a2:	3101      	adds	r1, #1
 80004a4:	b2c9      	uxtb	r1, r1
 80004a6:	e7c4      	b.n	8000432 <gen_poly+0xc6>
				if (root == cycle[ii][jj])  {
 80004a8:	f81e bb01 	ldrb.w	fp, [lr], #1
			for (root = 1; ((root < d) && (!test)); root++)
 80004ac:	f04f 0801 	mov.w	r8, #1
				if (root == cycle[ii][jj])  {
 80004b0:	45c3      	cmp	fp, r8
			for (root = 1; ((root < d) && (!test)); root++)
 80004b2:	f108 0801 	add.w	r8, r8, #1
 80004b6:	fa5f f888 	uxtb.w	r8, r8
					min[kaux] = ii;
 80004ba:	bf06      	itte	eq
 80004bc:	5531      	strbeq	r1, [r6, r4]
					test = 1;
 80004be:	f04f 0c01 	moveq.w	ip, #1
 80004c2:	f04f 0c00 	movne.w	ip, #0
			for (root = 1; ((root < d) && (!test)); root++)
 80004c6:	f1b8 0f15 	cmp.w	r8, #21
 80004ca:	d002      	beq.n	80004d2 <gen_poly+0x166>
 80004cc:	f1bc 0f00 	cmp.w	ip, #0
 80004d0:	d0ee      	beq.n	80004b0 <gen_poly+0x144>
		for (jj = 0; ((jj < size[ii]) && (!test)); jj++)
 80004d2:	f109 0901 	add.w	r9, r9, #1
 80004d6:	e7d2      	b.n	800047e <gen_poly+0x112>
			zeros[kaux] = cycle[min[ii]][jj];
 80004d8:	f811 9b01 	ldrb.w	r9, [r1], #1
 80004dc:	f808 9003 	strb.w	r9, [r8, r3]
			kaux++;
 80004e0:	3301      	adds	r3, #1
 80004e2:	b2db      	uxtb	r3, r3
		for (jj = 0; jj < size[min[ii]]; jj++) {
 80004e4:	4563      	cmp	r3, ip
 80004e6:	d1f7      	bne.n	80004d8 <gen_poly+0x16c>
	for (ii = 0; ii < noterms; ii++)
 80004e8:	f10e 0e01 	add.w	lr, lr, #1
 80004ec:	e7a8      	b.n	8000440 <gen_poly+0xd4>
	k = length - rdncy;
 80004ee:	7e13      	ldrb	r3, [r2, #24]
 80004f0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8000594 <gen_poly+0x228>
	g[0] = alpha_to[zeros[1]];
 80004f4:	ad42      	add	r5, sp, #264	; 0x108
	k = length - rdncy;
 80004f6:	1bdb      	subs	r3, r3, r7
 80004f8:	f882 3122 	strb.w	r3, [r2, #290]	; 0x122
	g[0] = alpha_to[zeros[1]];
 80004fc:	786b      	ldrb	r3, [r5, #1]
 80004fe:	4413      	add	r3, r2
	g[1] = 1;		/* g(x) = (X + zeros[1]) initially */
 8000500:	2601      	movs	r6, #1
	g[0] = alpha_to[zeros[1]];
 8000502:	7e5b      	ldrb	r3, [r3, #25]
 8000504:	f882 3123 	strb.w	r3, [r2, #291]	; 0x123
	g[1] = 1;		/* g(x) = (X + zeros[1]) initially */
 8000508:	f882 6124 	strb.w	r6, [r2, #292]	; 0x124
	for (ii = 2; ii <= rdncy; ii++) {
 800050c:	2302      	movs	r3, #2
 800050e:	42bb      	cmp	r3, r7
 8000510:	d903      	bls.n	800051a <gen_poly+0x1ae>
}
 8000512:	f20d 7d34 	addw	sp, sp, #1844	; 0x734
 8000516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  g[ii] = 1;
 800051a:	18d1      	adds	r1, r2, r3
	  for (jj = ii - 1; jj > 0; jj--)
 800051c:	f103 3eff 	add.w	lr, r3, #4294967295
	      g[jj] = g[jj - 1] ^ alpha_to[(index_of[g[jj]] + zeros[ii]) % n];
 8000520:	f815 8003 	ldrb.w	r8, [r5, r3]
	  g[ii] = 1;
 8000524:	f881 6123 	strb.w	r6, [r1, #291]	; 0x123
	  for (jj = ii - 1; jj > 0; jj--)
 8000528:	fa5c fe8e 	uxtab	lr, ip, lr
 800052c:	45f4      	cmp	ip, lr
 800052e:	d110      	bne.n	8000552 <gen_poly+0x1e6>
	  g[0] = alpha_to[(index_of[g[0]] + zeros[ii]) % n];
 8000530:	f892 1123 	ldrb.w	r1, [r2, #291]	; 0x123
 8000534:	4411      	add	r1, r2
	for (ii = 2; ii <= rdncy; ii++) {
 8000536:	3301      	adds	r3, #1
	  g[0] = alpha_to[(index_of[g[0]] + zeros[ii]) % n];
 8000538:	f991 109c 	ldrsb.w	r1, [r1, #156]	; 0x9c
 800053c:	4441      	add	r1, r8
 800053e:	fb91 f4f0 	sdiv	r4, r1, r0
 8000542:	fb00 1114 	mls	r1, r0, r4, r1
 8000546:	4411      	add	r1, r2
	for (ii = 2; ii <= rdncy; ii++) {
 8000548:	b2db      	uxtb	r3, r3
	  g[0] = alpha_to[(index_of[g[0]] + zeros[ii]) % n];
 800054a:	7e49      	ldrb	r1, [r1, #25]
 800054c:	f882 1123 	strb.w	r1, [r2, #291]	; 0x123
	for (ii = 2; ii <= rdncy; ii++) {
 8000550:	e7dd      	b.n	800050e <gen_poly+0x1a2>
	    if (g[jj] != 0)
 8000552:	f89e 4000 	ldrb.w	r4, [lr]
	      g[jj] = g[jj - 1] ^ alpha_to[(index_of[g[jj]] + zeros[ii]) % n];
 8000556:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
	    if (g[jj] != 0)
 800055a:	b154      	cbz	r4, 8000572 <gen_poly+0x206>
	      g[jj] = g[jj - 1] ^ alpha_to[(index_of[g[jj]] + zeros[ii]) % n];
 800055c:	4414      	add	r4, r2
 800055e:	f994 409c 	ldrsb.w	r4, [r4, #156]	; 0x9c
 8000562:	4444      	add	r4, r8
 8000564:	fb94 f9f0 	sdiv	r9, r4, r0
 8000568:	fb00 4419 	mls	r4, r0, r9, r4
 800056c:	4414      	add	r4, r2
 800056e:	7e64      	ldrb	r4, [r4, #25]
 8000570:	4061      	eors	r1, r4
 8000572:	f80e 1901 	strb.w	r1, [lr], #-1
	  for (jj = ii - 1; jj > 0; jj--)
 8000576:	e7d9      	b.n	800052c <gen_poly+0x1c0>
			jj++;	/* next cycle set index */
 8000578:	3301      	adds	r3, #1
 800057a:	b2db      	uxtb	r3, r3
			cycle[jj][0] = ll;
 800057c:	fb0c f103 	mul.w	r1, ip, r3
	} while (ll < (n - 1));
 8000580:	42bc      	cmp	r4, r7
			cycle[jj][0] = ll;
 8000582:	546c      	strb	r4, [r5, r1]
			size[jj] = 1;
 8000584:	f80d e003 	strb.w	lr, [sp, r3]
	} while (ll < (n - 1));
 8000588:	f6ff af03 	blt.w	8000392 <gen_poly+0x26>
 800058c:	e744      	b.n	8000418 <gen_poly+0xac>
 800058e:	bf00      	nop
 8000590:	2000028c 	.word	0x2000028c
 8000594:	200003af 	.word	0x200003af

08000598 <encode_bch>:
{
 8000598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < length - k; i++)
 800059c:	4c26      	ldr	r4, [pc, #152]	; (8000638 <encode_bch+0xa0>)
 800059e:	f894 5122 	ldrb.w	r5, [r4, #290]	; 0x122
 80005a2:	7e26      	ldrb	r6, [r4, #24]
 80005a4:	1b76      	subs	r6, r6, r5
		bb[i] = 0;
 80005a6:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
 80005aa:	2100      	movs	r1, #0
 80005ac:	f504 70d3 	add.w	r0, r4, #422	; 0x1a6
 80005b0:	f001 fcf6 	bl	8001fa0 <memset>
			bb[0] = g[0] && feedback;
 80005b4:	f894 7123 	ldrb.w	r7, [r4, #291]	; 0x123
 80005b8:	3f00      	subs	r7, #0
	for (i = k - 1; i >= 0; i--) {
 80005ba:	f105 35ff 	add.w	r5, r5, #4294967295
			bb[0] = g[0] && feedback;
 80005be:	bf18      	it	ne
 80005c0:	2701      	movne	r7, #1
		feedback = data[i] ^ bb[length - k - 1];
 80005c2:	f204 2929 	addw	r9, r4, #553	; 0x229
 80005c6:	f504 78d3 	add.w	r8, r4, #422	; 0x1a6
				if (g[j] != 0)
 80005ca:	f204 1a23 	addw	sl, r4, #291	; 0x123
	for (i = k - 1; i >= 0; i--) {
 80005ce:	1c6b      	adds	r3, r5, #1
 80005d0:	d101      	bne.n	80005d6 <encode_bch+0x3e>
}
 80005d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		feedback = data[i] ^ bb[length - k - 1];
 80005d6:	1e72      	subs	r2, r6, #1
 80005d8:	18a1      	adds	r1, r4, r2
 80005da:	f815 3009 	ldrb.w	r3, [r5, r9]
 80005de:	f891 11a6 	ldrb.w	r1, [r1, #422]	; 0x1a6
		if (feedback != 0) {
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d113      	bne.n	800060e <encode_bch+0x76>
				bb[j] = bb[j - 1];
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	f1c6 0002 	rsb	r0, r6, #2
 80005ec:	f1a6 0102 	sub.w	r1, r6, #2
 80005f0:	bfd8      	it	le
 80005f2:	2001      	movle	r0, #1
 80005f4:	4401      	add	r1, r0
 80005f6:	4410      	add	r0, r2
 80005f8:	4441      	add	r1, r8
 80005fa:	bfd8      	it	le
 80005fc:	2200      	movle	r2, #0
 80005fe:	4440      	add	r0, r8
 8000600:	f001 fcb4 	bl	8001f6c <memmove>
			bb[0] = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
	for (i = k - 1; i >= 0; i--) {
 800060a:	3d01      	subs	r5, #1
 800060c:	e7df      	b.n	80005ce <encode_bch+0x36>
		feedback = data[i] ^ bb[length - k - 1];
 800060e:	404b      	eors	r3, r1
 8000610:	eb08 0102 	add.w	r1, r8, r2
			for (j = length - k - 1; j > 0; j--)
 8000614:	2a00      	cmp	r2, #0
 8000616:	dc02      	bgt.n	800061e <encode_bch+0x86>
			bb[0] = g[0] && feedback;
 8000618:	f884 71a6 	strb.w	r7, [r4, #422]	; 0x1a6
 800061c:	e7f5      	b.n	800060a <encode_bch+0x72>
				if (g[j] != 0)
 800061e:	f812 c00a 	ldrb.w	ip, [r2, sl]
					bb[j] = bb[j - 1] ^ feedback;
 8000622:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8000626:	3a01      	subs	r2, #1
				if (g[j] != 0)
 8000628:	f1bc 0f00 	cmp.w	ip, #0
 800062c:	d000      	beq.n	8000630 <encode_bch+0x98>
					bb[j] = bb[j - 1] ^ feedback;
 800062e:	4058      	eors	r0, r3
 8000630:	f801 0901 	strb.w	r0, [r1], #-1
			for (j = length - k - 1; j > 0; j--)
 8000634:	e7ee      	b.n	8000614 <encode_bch+0x7c>
 8000636:	bf00      	nop
 8000638:	2000028c 	.word	0x2000028c

0800063c <syndrome>:
{
 800063c:	b5f0      	push	{r4, r5, r6, r7, lr}
    s[0] = 0;
 800063e:	4c15      	ldr	r4, [pc, #84]	; (8000694 <syndrome+0x58>)
 8000640:	2300      	movs	r3, #0
	for (i = 1; i <= t2; i++) {
 8000642:	f894 6121 	ldrb.w	r6, [r4, #289]	; 0x121
		for (j = 0; j < length; j++)
 8000646:	7e27      	ldrb	r7, [r4, #24]
				temp ^= alpha_to[(i * j) % n];
 8000648:	7de5      	ldrb	r5, [r4, #23]
    s[0] = 0;
 800064a:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
	for (i = 1; i <= t2; i++) {
 800064e:	2301      	movs	r3, #1
 8000650:	429e      	cmp	r6, r3
 8000652:	d21b      	bcs.n	800068c <syndrome+0x50>
}
 8000654:	2000      	movs	r0, #0
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (recd[j] != 0)
 8000658:	18a0      	adds	r0, r4, r2
 800065a:	f890 032f 	ldrb.w	r0, [r0, #815]	; 0x32f
 800065e:	b140      	cbz	r0, 8000672 <syndrome+0x36>
				temp ^= alpha_to[(i * j) % n];
 8000660:	fb12 f003 	smulbb	r0, r2, r3
 8000664:	fbb0 fcf5 	udiv	ip, r0, r5
 8000668:	fb05 001c 	mls	r0, r5, ip, r0
 800066c:	4420      	add	r0, r4
 800066e:	7e40      	ldrb	r0, [r0, #25]
 8000670:	4041      	eors	r1, r0
		for (j = 0; j < length; j++)
 8000672:	3201      	adds	r2, #1
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	4297      	cmp	r7, r2
 8000678:	d8ee      	bhi.n	8000658 <syndrome+0x1c>
		s[i] ^= temp;
 800067a:	18e2      	adds	r2, r4, r3
	for (i = 1; i <= t2; i++) {
 800067c:	3301      	adds	r3, #1
		s[i] ^= temp;
 800067e:	f892 02ac 	ldrb.w	r0, [r2, #684]	; 0x2ac
 8000682:	4041      	eors	r1, r0
 8000684:	f882 12ac 	strb.w	r1, [r2, #684]	; 0x2ac
	for (i = 1; i <= t2; i++) {
 8000688:	b2db      	uxtb	r3, r3
 800068a:	e7e1      	b.n	8000650 <syndrome+0x14>
		temp = 0;
 800068c:	2100      	movs	r1, #0
		for (j = 0; j < length; j++)
 800068e:	460a      	mov	r2, r1
 8000690:	e7f1      	b.n	8000676 <syndrome+0x3a>
 8000692:	bf00      	nop
 8000694:	2000028c 	.word	0x2000028c

08000698 <get_key>:
{
 8000698:	b570      	push	{r4, r5, r6, lr}
    for (i = 0; i < length; i++){
 800069a:	4c13      	ldr	r4, [pc, #76]	; (80006e8 <get_key+0x50>)
 800069c:	7e25      	ldrb	r5, [r4, #24]
 800069e:	f204 312f 	addw	r1, r4, #815	; 0x32f
 80006a2:	2300      	movs	r3, #0
 80006a4:	429d      	cmp	r5, r3
 80006a6:	dc14      	bgt.n	80006d2 <get_key+0x3a>
    for (i=0; i<16; i++) k[i] = 0;
 80006a8:	2210      	movs	r2, #16
 80006aa:	2100      	movs	r1, #0
 80006ac:	f001 fc78 	bl	8001fa0 <memset>
    syndrome();
 80006b0:	f7ff ffc4 	bl	800063c <syndrome>
        mem[i] = s[i];
 80006b4:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <get_key+0x54>)
 80006ba:	3201      	adds	r2, #1
 80006bc:	f501 7083 	add.w	r0, r1, #262	; 0x106
 80006c0:	f001 fc46 	bl	8001f50 <memcpy>
	simpleserial_put('r', 20, mem+1);
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <get_key+0x58>)
 80006c6:	2114      	movs	r1, #20
 80006c8:	2072      	movs	r0, #114	; 0x72
 80006ca:	f000 fbbd 	bl	8000e48 <simpleserial_put>
}
 80006ce:	2000      	movs	r0, #0
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
		recd[i] = (k[i/8] >> (i%8)) & 1;
 80006d2:	10da      	asrs	r2, r3, #3
 80006d4:	f003 0607 	and.w	r6, r3, #7
 80006d8:	5c82      	ldrb	r2, [r0, r2]
 80006da:	4132      	asrs	r2, r6
 80006dc:	f002 0201 	and.w	r2, r2, #1
 80006e0:	f801 2b01 	strb.w	r2, [r1], #1
    for (i = 0; i < length; i++){
 80006e4:	3301      	adds	r3, #1
 80006e6:	e7dd      	b.n	80006a4 <get_key+0xc>
 80006e8:	2000028c 	.word	0x2000028c
 80006ec:	20000538 	.word	0x20000538
 80006f0:	2000063f 	.word	0x2000063f

080006f4 <pompom>:
pompom() {
 80006f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (j = 0; j < length; j++) error[j] = 0;
 80006f8:	4ca9      	ldr	r4, [pc, #676]	; (80009a0 <pompom+0x2ac>)
pompom() {
 80006fa:	f2ad 4db4 	subw	sp, sp, #1204	; 0x4b4
    for (j = 0; j < length; j++) error[j] = 0;
 80006fe:	2100      	movs	r1, #0
 8000700:	7e22      	ldrb	r2, [r4, #24]
 8000702:	f204 4032 	addw	r0, r4, #1074	; 0x432
 8000706:	f001 fc4b 	bl	8001fa0 <memset>
    for (i = 0; i <= t2; i++) {
 800070a:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	2100      	movs	r1, #0
    uint8_t __flag = 1;
 8000712:	2501      	movs	r5, #1
    for (i = 0; i <= t2; i++) {
 8000714:	9b01      	ldr	r3, [sp, #4]
 8000716:	b2ca      	uxtb	r2, r1
 8000718:	4293      	cmp	r3, r2
 800071a:	d205      	bcs.n	8000728 <pompom+0x34>
    if (__flag) return 0;
 800071c:	b18d      	cbz	r5, 8000742 <pompom+0x4e>
 800071e:	2000      	movs	r0, #0
}
 8000720:	f20d 4db4 	addw	sp, sp, #1204	; 0x4b4
 8000724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(s[i]) __flag = 0;
 8000728:	18a3      	adds	r3, r4, r2
        s_[i] = index_of[s[i]];
 800072a:	a808      	add	r0, sp, #32
        if(s[i]) __flag = 0;
 800072c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8000730:	2b00      	cmp	r3, #0
        s_[i] = index_of[s[i]];
 8000732:	4423      	add	r3, r4
        if(s[i]) __flag = 0;
 8000734:	bf18      	it	ne
 8000736:	2500      	movne	r5, #0
        s_[i] = index_of[s[i]];
 8000738:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800073c:	5483      	strb	r3, [r0, r2]
    for (i = 0; i <= t2; i++) {
 800073e:	3101      	adds	r1, #1
 8000740:	e7e8      	b.n	8000714 <pompom+0x20>
    d[1] = s_[1];		/* index form */
 8000742:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8000746:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    elp[1][0] = 1;		/* polynomial form */
 800074a:	2301      	movs	r3, #1
 800074c:	f88d 32e2 	strb.w	r3, [sp, #738]	; 0x2e2
        elp[0][i] = -1;	/* index form */
 8000750:	9b01      	ldr	r3, [sp, #4]
    d[0] = 0;			/* index form */
 8000752:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
        elp[0][i] = -1;	/* index form */
 8000756:	1e5e      	subs	r6, r3, #1
 8000758:	2b00      	cmp	r3, #0
 800075a:	b2f6      	uxtb	r6, r6
 800075c:	bf08      	it	eq
 800075e:	2600      	moveq	r6, #0
 8000760:	4632      	mov	r2, r6
 8000762:	21ff      	movs	r1, #255	; 0xff
 8000764:	f20d 20cd 	addw	r0, sp, #717	; 0x2cd
    elp[0][0] = 0;		/* index form */
 8000768:	f88d 52cc 	strb.w	r5, [sp, #716]	; 0x2cc
        elp[0][i] = -1;	/* index form */
 800076c:	f001 fc18 	bl	8001fa0 <memset>
        elp[1][i] = 0;	/* polynomial form */
 8000770:	4632      	mov	r2, r6
 8000772:	4629      	mov	r1, r5
 8000774:	f20d 20e3 	addw	r0, sp, #739	; 0x2e3
 8000778:	f001 fc12 	bl	8001fa0 <memset>
    u_lu[0] = -1;
 800077c:	22ff      	movs	r2, #255	; 0xff
 800077e:	ab50      	add	r3, sp, #320	; 0x140
 8000780:	f88d 2140 	strb.w	r2, [sp, #320]	; 0x140
                               alpha_to[(d[u] + n - d[q] + elp[q][i]) % n];
 8000784:	7de7      	ldrb	r7, [r4, #23]
    } while ((u < t2) && (l[u + 1] <= t));
 8000786:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
                elp[u][i] = index_of[elp[u][i]];
 800078a:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80009a0 <pompom+0x2ac>
    l[0] = 0;
 800078e:	f88d 50bc 	strb.w	r5, [sp, #188]	; 0xbc
    l[1] = 0;
 8000792:	f88d 50bd 	strb.w	r5, [sp, #189]	; 0xbd
    u_lu[1] = 0;
 8000796:	f88d 5141 	strb.w	r5, [sp, #321]	; 0x141
    } while ((u < t2) && (l[u + 1] <= t));
 800079a:	9205      	str	r2, [sp, #20]
 800079c:	f10d 0839 	add.w	r8, sp, #57	; 0x39
 80007a0:	f10d 0abd 	add.w	sl, sp, #189	; 0xbd
    u = 0;
 80007a4:	9502      	str	r5, [sp, #8]
    } while ((u < t2) && (l[u + 1] <= t));
 80007a6:	2602      	movs	r6, #2
                if ((d[j] != -1) && (u_lu[q] < u_lu[j]))
 80007a8:	9304      	str	r3, [sp, #16]
        u++;
 80007aa:	9c02      	ldr	r4, [sp, #8]
        if (d[u] == -1) {
 80007ac:	f998 b000 	ldrsb.w	fp, [r8]
            l[u + 1] = l[u];
 80007b0:	f91a 2b01 	ldrsb.w	r2, [sl], #1
 80007b4:	9606      	str	r6, [sp, #24]
        u++;
 80007b6:	1c63      	adds	r3, r4, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	9302      	str	r3, [sp, #8]
        if (d[u] == -1) {
 80007bc:	f1bb 3fff 	cmp.w	fp, #4294967295
 80007c0:	f106 33ff 	add.w	r3, r6, #4294967295
 80007c4:	9303      	str	r3, [sp, #12]
 80007c6:	4643      	mov	r3, r8
 80007c8:	f108 0801 	add.w	r8, r8, #1
 80007cc:	d045      	beq.n	800085a <pompom+0x166>
 80007ce:	3b01      	subs	r3, #1
            while ((d[q] == -1) && (q > 0))
 80007d0:	f913 1901 	ldrsb.w	r1, [r3], #-1
 80007d4:	3101      	adds	r1, #1
 80007d6:	f040 8091 	bne.w	80008fc <pompom+0x208>
 80007da:	2c00      	cmp	r4, #0
 80007dc:	f040 808b 	bne.w	80008f6 <pompom+0x202>
            if (l[u] > l[q] + u - q)
 80007e0:	ab2f      	add	r3, sp, #188	; 0xbc
 80007e2:	5718      	ldrsb	r0, [r3, r4]
 80007e4:	9b03      	ldr	r3, [sp, #12]
 80007e6:	18c1      	adds	r1, r0, r3
 80007e8:	1b09      	subs	r1, r1, r4
 80007ea:	428a      	cmp	r2, r1
 80007ec:	f340 809e 	ble.w	800092c <pompom+0x238>
                l[u + 1] = l[u];
 80007f0:	f88a 2000 	strb.w	r2, [sl]
                elp[u + 1][i] = 0;
 80007f4:	2316      	movs	r3, #22
 80007f6:	aab3      	add	r2, sp, #716	; 0x2cc
 80007f8:	fb03 2206 	mla	r2, r3, r6, r2
 80007fc:	9207      	str	r2, [sp, #28]
 80007fe:	2100      	movs	r1, #0
 8000800:	9a01      	ldr	r2, [sp, #4]
 8000802:	9807      	ldr	r0, [sp, #28]
 8000804:	f001 fbcc 	bl	8001fa0 <memset>
            for (i = 0; i <= l[q]; i++)
 8000808:	ab2f      	add	r3, sp, #188	; 0xbc
                if (elp[q][i] != -1)
 800080a:	aab3      	add	r2, sp, #716	; 0x2cc
            for (i = 0; i <= l[q]; i++)
 800080c:	f913 c004 	ldrsb.w	ip, [r3, r4]
                if (elp[q][i] != -1)
 8000810:	2316      	movs	r3, #22
                               alpha_to[(d[u] + n - d[q] + elp[q][i]) % n];
 8000812:	eb0b 0e07 	add.w	lr, fp, r7
 8000816:	2000      	movs	r0, #0
                if (elp[q][i] != -1)
 8000818:	fb03 2104 	mla	r1, r3, r4, r2
            for (i = 0; i <= l[q]; i++)
 800081c:	b2c2      	uxtb	r2, r0
 800081e:	4562      	cmp	r2, ip
 8000820:	f340 808a 	ble.w	8000938 <pompom+0x244>
                elp[u + 1][i] ^= elp[u][i];
 8000824:	9803      	ldr	r0, [sp, #12]
            for (i = 0; i <= l[u]; i++) {
 8000826:	f91a cc01 	ldrsb.w	ip, [sl, #-1]
                elp[u + 1][i] ^= elp[u][i];
 800082a:	2216      	movs	r2, #22
 800082c:	abb3      	add	r3, sp, #716	; 0x2cc
 800082e:	fb02 3406 	mla	r4, r2, r6, r3
            for (i = 0; i <= l[u]; i++) {
 8000832:	2100      	movs	r1, #0
                elp[u + 1][i] ^= elp[u][i];
 8000834:	fb02 3200 	mla	r2, r2, r0, r3
            for (i = 0; i <= l[u]; i++) {
 8000838:	b2cb      	uxtb	r3, r1
 800083a:	4563      	cmp	r3, ip
 800083c:	f101 0101 	add.w	r1, r1, #1
 8000840:	dc1a      	bgt.n	8000878 <pompom+0x184>
                elp[u + 1][i] ^= elp[u][i];
 8000842:	5ce0      	ldrb	r0, [r4, r3]
 8000844:	f812 e003 	ldrb.w	lr, [r2, r3]
 8000848:	ea80 000e 	eor.w	r0, r0, lr
 800084c:	54e0      	strb	r0, [r4, r3]
                elp[u][i] = index_of[elp[u][i]];
 800084e:	56d0      	ldrsb	r0, [r2, r3]
 8000850:	4448      	add	r0, r9
 8000852:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
 8000856:	54d0      	strb	r0, [r2, r3]
            for (i = 0; i <= l[u]; i++) {
 8000858:	e7ee      	b.n	8000838 <pompom+0x144>
                elp[u + 1][i] = elp[u][i];
 800085a:	2116      	movs	r1, #22
 800085c:	abb3      	add	r3, sp, #716	; 0x2cc
 800085e:	1e74      	subs	r4, r6, #1
 8000860:	fb01 3404 	mla	r4, r1, r4, r3
            l[u + 1] = l[u];
 8000864:	f88a 2000 	strb.w	r2, [sl]
            for (i = 0; i <= l[u]; i++) {
 8000868:	2000      	movs	r0, #0
                elp[u + 1][i] = elp[u][i];
 800086a:	fb01 3106 	mla	r1, r1, r6, r3
            for (i = 0; i <= l[u]; i++) {
 800086e:	b2c3      	uxtb	r3, r0
 8000870:	4293      	cmp	r3, r2
 8000872:	f100 0001 	add.w	r0, r0, #1
 8000876:	dd32      	ble.n	80008de <pompom+0x1ea>
        u_lu[u + 1] = u - l[u + 1];
 8000878:	f99a 0000 	ldrsb.w	r0, [sl]
 800087c:	9b02      	ldr	r3, [sp, #8]
 800087e:	9a04      	ldr	r2, [sp, #16]
 8000880:	1a1b      	subs	r3, r3, r0
 8000882:	54b3      	strb	r3, [r6, r2]
        if (u < t2) {	
 8000884:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8000888:	4293      	cmp	r3, r2
 800088a:	d91c      	bls.n	80008c6 <pompom+0x1d2>
          if (s_[u + 1] != -1)
 800088c:	ab08      	add	r3, sp, #32
            if ((s_[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 800088e:	2416      	movs	r4, #22
          if (s_[u + 1] != -1)
 8000890:	579b      	ldrsb	r3, [r3, r6]
 8000892:	1c5a      	adds	r2, r3, #1
            d[u + 1] = alpha_to[s_[u + 1]];
 8000894:	bf16      	itet	ne
 8000896:	444b      	addne	r3, r9
            d[u + 1] = 0;
 8000898:	2300      	moveq	r3, #0
            d[u + 1] = alpha_to[s_[u + 1]];
 800089a:	f993 3019 	ldrsbne.w	r3, [r3, #25]
 800089e:	f888 3000 	strb.w	r3, [r8]
            if ((s_[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 80008a2:	abb3      	add	r3, sp, #716	; 0x2cc
            d[u + 1] = 0;
 80008a4:	2201      	movs	r2, #1
            if ((s_[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 80008a6:	fb04 3406 	mla	r4, r4, r6, r3
          for (i = 1; i <= l[u + 1]; i++)
 80008aa:	4282      	cmp	r2, r0
              d[u + 1] ^= alpha_to[(s_[u + 1 - i] 
 80008ac:	f998 1000 	ldrsb.w	r1, [r8]
          for (i = 1; i <= l[u + 1]; i++)
 80008b0:	dd5b      	ble.n	800096a <pompom+0x276>
          d[u + 1] = index_of[d[u + 1]];	
 80008b2:	4449      	add	r1, r9
    } while ((u < t2) && (l[u + 1] <= t));
 80008b4:	3601      	adds	r6, #1
          d[u + 1] = index_of[d[u + 1]];	
 80008b6:	f891 309c 	ldrb.w	r3, [r1, #156]	; 0x9c
 80008ba:	f888 3000 	strb.w	r3, [r8]
    } while ((u < t2) && (l[u + 1] <= t));
 80008be:	9b05      	ldr	r3, [sp, #20]
 80008c0:	4298      	cmp	r0, r3
 80008c2:	f77f af72 	ble.w	80007aa <pompom+0xb6>
    if (l[u] <= t) {/* Can correct errors */
 80008c6:	9b05      	ldr	r3, [sp, #20]
 80008c8:	4283      	cmp	r3, r0
 80008ca:	f6ff af28 	blt.w	800071e <pompom+0x2a>
            elp[u][i] = index_of[elp[u][i]];
 80008ce:	9c06      	ldr	r4, [sp, #24]
 80008d0:	4e33      	ldr	r6, [pc, #204]	; (80009a0 <pompom+0x2ac>)
 80008d2:	2316      	movs	r3, #22
 80008d4:	aab3      	add	r2, sp, #716	; 0x2cc
 80008d6:	2100      	movs	r1, #0
 80008d8:	fb03 2304 	mla	r3, r3, r4, r2
 80008dc:	e067      	b.n	80009ae <pompom+0x2ba>
                elp[u + 1][i] = elp[u][i];
 80008de:	f914 c003 	ldrsb.w	ip, [r4, r3]
 80008e2:	f801 c003 	strb.w	ip, [r1, r3]
                elp[u][i] = index_of[elp[u][i]];
 80008e6:	f914 c003 	ldrsb.w	ip, [r4, r3]
 80008ea:	44cc      	add	ip, r9
 80008ec:	f89c c09c 	ldrb.w	ip, [ip, #156]	; 0x9c
 80008f0:	f804 c003 	strb.w	ip, [r4, r3]
            for (i = 0; i <= l[u]; i++) {
 80008f4:	e7bb      	b.n	800086e <pompom+0x17a>
                q--;
 80008f6:	3c01      	subs	r4, #1
 80008f8:	b2e4      	uxtb	r4, r4
 80008fa:	e769      	b.n	80007d0 <pompom+0xdc>
            if (q > 0) {
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	f43f af6f 	beq.w	80007e0 <pompom+0xec>
 8000902:	1e63      	subs	r3, r4, #1
 8000904:	b2db      	uxtb	r3, r3
                if ((d[j] != -1) && (u_lu[q] < u_lu[j]))
 8000906:	a90e      	add	r1, sp, #56	; 0x38
 8000908:	f913 c001 	ldrsb.w	ip, [r3, r1]
 800090c:	f1bc 3fff 	cmp.w	ip, #4294967295
 8000910:	b2d8      	uxtb	r0, r3
 8000912:	d008      	beq.n	8000926 <pompom+0x232>
 8000914:	f8dd c010 	ldr.w	ip, [sp, #16]
 8000918:	f91c e004 	ldrsb.w	lr, [ip, r4]
 800091c:	f913 c00c 	ldrsb.w	ip, [r3, ip]
                j--;
 8000920:	45e6      	cmp	lr, ip
 8000922:	bfb8      	it	lt
 8000924:	4604      	movlt	r4, r0
              } while (j > 0);
 8000926:	3b01      	subs	r3, #1
 8000928:	d2ee      	bcs.n	8000908 <pompom+0x214>
 800092a:	e759      	b.n	80007e0 <pompom+0xec>
                l[u + 1] = l[q] + u - q;
 800092c:	9b02      	ldr	r3, [sp, #8]
 800092e:	1b1b      	subs	r3, r3, r4
 8000930:	4403      	add	r3, r0
 8000932:	f88a 3000 	strb.w	r3, [sl]
 8000936:	e75d      	b.n	80007f4 <pompom+0x100>
                if (elp[q][i] != -1)
 8000938:	f911 b002 	ldrsb.w	fp, [r1, r2]
 800093c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8000940:	d011      	beq.n	8000966 <pompom+0x272>
                    elp[u + 1][i + u - q] = 
 8000942:	9b03      	ldr	r3, [sp, #12]
 8000944:	441a      	add	r2, r3
                               alpha_to[(d[u] + n - d[q] + elp[q][i]) % n];
 8000946:	ab0e      	add	r3, sp, #56	; 0x38
                    elp[u + 1][i + u - q] = 
 8000948:	1b12      	subs	r2, r2, r4
                               alpha_to[(d[u] + n - d[q] + elp[q][i]) % n];
 800094a:	571b      	ldrsb	r3, [r3, r4]
 800094c:	ebae 0303 	sub.w	r3, lr, r3
 8000950:	445b      	add	r3, fp
 8000952:	fb93 fbf7 	sdiv	fp, r3, r7
 8000956:	fb07 331b 	mls	r3, r7, fp, r3
 800095a:	444b      	add	r3, r9
                    elp[u + 1][i + u - q] = 
 800095c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8000960:	7e5b      	ldrb	r3, [r3, #25]
 8000962:	f80b 3002 	strb.w	r3, [fp, r2]
            for (i = 0; i <= l[q]; i++)
 8000966:	3001      	adds	r0, #1
 8000968:	e758      	b.n	800081c <pompom+0x128>
            if ((s_[u + 1 - i] != -1) && (elp[u + 1][i] != 0))
 800096a:	1ab3      	subs	r3, r6, r2
 800096c:	f10d 0c20 	add.w	ip, sp, #32
 8000970:	f91c c003 	ldrsb.w	ip, [ip, r3]
 8000974:	f1bc 3fff 	cmp.w	ip, #4294967295
 8000978:	d00e      	beq.n	8000998 <pompom+0x2a4>
 800097a:	56a3      	ldrsb	r3, [r4, r2]
 800097c:	b163      	cbz	r3, 8000998 <pompom+0x2a4>
                          + index_of[elp[u + 1][i]]) % n];
 800097e:	444b      	add	r3, r9
 8000980:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8000984:	4463      	add	r3, ip
 8000986:	fb93 fcf7 	sdiv	ip, r3, r7
 800098a:	fb07 331c 	mls	r3, r7, ip, r3
              d[u + 1] ^= alpha_to[(s_[u + 1 - i] 
 800098e:	444b      	add	r3, r9
 8000990:	7e5b      	ldrb	r3, [r3, #25]
 8000992:	4059      	eors	r1, r3
 8000994:	f888 1000 	strb.w	r1, [r8]
          for (i = 1; i <= l[u + 1]; i++)
 8000998:	3201      	adds	r2, #1
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	e785      	b.n	80008aa <pompom+0x1b6>
 800099e:	bf00      	nop
 80009a0:	2000028c 	.word	0x2000028c
            elp[u][i] = index_of[elp[u][i]];
 80009a4:	569c      	ldrsb	r4, [r3, r2]
 80009a6:	4434      	add	r4, r6
 80009a8:	f894 409c 	ldrb.w	r4, [r4, #156]	; 0x9c
 80009ac:	549c      	strb	r4, [r3, r2]
        for (i = 0; i <= l[u]; i++)
 80009ae:	b2ca      	uxtb	r2, r1
 80009b0:	4290      	cmp	r0, r2
 80009b2:	f101 0101 	add.w	r1, r1, #1
 80009b6:	daf5      	bge.n	80009a4 <pompom+0x2b0>
            reg[i] = elp[u][i];
 80009b8:	9e06      	ldr	r6, [sp, #24]
 80009ba:	2216      	movs	r2, #22
 80009bc:	acb3      	add	r4, sp, #716	; 0x2cc
        for (i = 1; i <= l[u]; i++)
 80009be:	2301      	movs	r3, #1
            reg[i] = elp[u][i];
 80009c0:	a992      	add	r1, sp, #584	; 0x248
 80009c2:	fb02 4206 	mla	r2, r2, r6, r4
        for (i = 1; i <= l[u]; i++)
 80009c6:	4298      	cmp	r0, r3
 80009c8:	da18      	bge.n	80009fc <pompom+0x308>
                    q ^= alpha_to[reg[j]];
 80009ca:	4e1e      	ldr	r6, [pc, #120]	; (8000a44 <pompom+0x350>)
        for (i = 1; i <= n; i++) {
 80009cc:	2101      	movs	r1, #1
                    reg[j] = (reg[j] + j) % n;
 80009ce:	ac92      	add	r4, sp, #584	; 0x248
                loc[count] = n - i;
 80009d0:	f50d 7ce2 	add.w	ip, sp, #452	; 0x1c4
        for (i = 1; i <= n; i++) {
 80009d4:	428f      	cmp	r7, r1
 80009d6:	d230      	bcs.n	8000a3a <pompom+0x346>
                error[loc[i]] ^= 1;
 80009d8:	4d1a      	ldr	r5, [pc, #104]	; (8000a44 <pompom+0x350>)
 80009da:	2200      	movs	r2, #0
 80009dc:	ac71      	add	r4, sp, #452	; 0x1c4
            for (i = 0; i < l[u]; i++)
 80009de:	b2d3      	uxtb	r3, r2
 80009e0:	4298      	cmp	r0, r3
 80009e2:	f102 0201 	add.w	r2, r2, #1
 80009e6:	f77f ae9b 	ble.w	8000720 <pompom+0x2c>
                error[loc[i]] ^= 1;
 80009ea:	5ce3      	ldrb	r3, [r4, r3]
 80009ec:	442b      	add	r3, r5
 80009ee:	f893 1432 	ldrb.w	r1, [r3, #1074]	; 0x432
 80009f2:	f081 0101 	eor.w	r1, r1, #1
 80009f6:	f883 1432 	strb.w	r1, [r3, #1074]	; 0x432
            for (i = 0; i < l[u]; i++)
 80009fa:	e7f0      	b.n	80009de <pompom+0x2ea>
            reg[i] = elp[u][i];
 80009fc:	5cd4      	ldrb	r4, [r2, r3]
 80009fe:	54cc      	strb	r4, [r1, r3]
        for (i = 1; i <= l[u]; i++)
 8000a00:	3301      	adds	r3, #1
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	e7df      	b.n	80009c6 <pompom+0x2d2>
                    reg[j] = (reg[j] + j) % n;
 8000a06:	5ca3      	ldrb	r3, [r4, r2]
 8000a08:	4413      	add	r3, r2
 8000a0a:	fbb3 f8f7 	udiv	r8, r3, r7
 8000a0e:	fb07 3318 	mls	r3, r7, r8, r3
 8000a12:	54a3      	strb	r3, [r4, r2]
                    q ^= alpha_to[reg[j]];
 8000a14:	4433      	add	r3, r6
            for (j = 1; j <= l[u]; j++)
 8000a16:	3201      	adds	r2, #1
                    q ^= alpha_to[reg[j]];
 8000a18:	7e5b      	ldrb	r3, [r3, #25]
            for (j = 1; j <= l[u]; j++)
 8000a1a:	b2d2      	uxtb	r2, r2
                    q ^= alpha_to[reg[j]];
 8000a1c:	ea8e 0e03 	eor.w	lr, lr, r3
            for (j = 1; j <= l[u]; j++)
 8000a20:	4290      	cmp	r0, r2
 8000a22:	daf0      	bge.n	8000a06 <pompom+0x312>
            if (!q) {	/* store root and error
 8000a24:	f1be 0f00 	cmp.w	lr, #0
 8000a28:	d104      	bne.n	8000a34 <pompom+0x340>
                loc[count] = n - i;
 8000a2a:	1a7b      	subs	r3, r7, r1
 8000a2c:	f80c 3005 	strb.w	r3, [ip, r5]
                count++;
 8000a30:	3501      	adds	r5, #1
 8000a32:	b2ed      	uxtb	r5, r5
        for (i = 1; i <= n; i++) {
 8000a34:	3101      	adds	r1, #1
 8000a36:	b2c9      	uxtb	r1, r1
 8000a38:	e7cc      	b.n	80009d4 <pompom+0x2e0>
            q = 1;
 8000a3a:	f04f 0e01 	mov.w	lr, #1
            for (j = 1; j <= l[u]; j++)
 8000a3e:	4672      	mov	r2, lr
 8000a40:	e7ee      	b.n	8000a20 <pompom+0x32c>
 8000a42:	bf00      	nop
 8000a44:	2000028c 	.word	0x2000028c

08000a48 <preset>:
preset(uint8_t* pt, uint8_t* buffer) {
 8000a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (i = 0; i < length; i++){ // puts input in recd (to decode later)
 8000a4a:	4c20      	ldr	r4, [pc, #128]	; (8000acc <preset+0x84>)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	7e26      	ldrb	r6, [r4, #24]
 8000a50:	f204 45b5 	addw	r5, r4, #1205	; 0x4b5
 8000a54:	f204 4132 	addw	r1, r4, #1074	; 0x432
        error[i] = 0;
 8000a58:	461f      	mov	r7, r3
    for (i = 0; i < length; i++){ // puts input in recd (to decode later)
 8000a5a:	429e      	cmp	r6, r3
 8000a5c:	dc1d      	bgt.n	8000a9a <preset+0x52>
 8000a5e:	1f03      	subs	r3, r0, #4
 8000a60:	f100 010c 	add.w	r1, r0, #12
		pt32[i] ^= pt32[i+4];
 8000a64:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8000a68:	691d      	ldr	r5, [r3, #16]
    for(i = 0; i < 4; i++) {
 8000a6a:	4299      	cmp	r1, r3
		pt32[i] ^= pt32[i+4];
 8000a6c:	ea82 0205 	eor.w	r2, r2, r5
 8000a70:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 4; i++) {
 8000a72:	d1f7      	bne.n	8000a64 <preset+0x1c>
    for(i = 0; i < length; i++) {
 8000a74:	7e25      	ldrb	r5, [r4, #24]
 8000a76:	4916      	ldr	r1, [pc, #88]	; (8000ad0 <preset+0x88>)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	429d      	cmp	r5, r3
 8000a7c:	dc1b      	bgt.n	8000ab6 <preset+0x6e>
        pt[i]=0;
 8000a7e:	2210      	movs	r2, #16
 8000a80:	2100      	movs	r1, #0
 8000a82:	f001 fa8d 	bl	8001fa0 <memset>
        s[i] = mem[i];
 8000a86:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
 8000a8a:	4912      	ldr	r1, [pc, #72]	; (8000ad4 <preset+0x8c>)
}
 8000a8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        s[i] = mem[i];
 8000a90:	3201      	adds	r2, #1
 8000a92:	f5a1 7083 	sub.w	r0, r1, #262	; 0x106
 8000a96:	f001 ba5b 	b.w	8001f50 <memcpy>
		info[i] = (pt[i/8] >> (i%8)) & 1;
 8000a9a:	10da      	asrs	r2, r3, #3
 8000a9c:	f003 0c07 	and.w	ip, r3, #7
 8000aa0:	5c82      	ldrb	r2, [r0, r2]
        error[i] = 0;
 8000aa2:	f801 7b01 	strb.w	r7, [r1], #1
		info[i] = (pt[i/8] >> (i%8)) & 1;
 8000aa6:	fa42 f20c 	asr.w	r2, r2, ip
 8000aaa:	f002 0201 	and.w	r2, r2, #1
 8000aae:	f805 2b01 	strb.w	r2, [r5], #1
    for (i = 0; i < length; i++){ // puts input in recd (to decode later)
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	e7d1      	b.n	8000a5a <preset+0x12>
		recd[i] = (pt[i/8] >> (i%8)) & 1;
 8000ab6:	10da      	asrs	r2, r3, #3
 8000ab8:	f003 0607 	and.w	r6, r3, #7
 8000abc:	5c82      	ldrb	r2, [r0, r2]
 8000abe:	4132      	asrs	r2, r6
 8000ac0:	f002 0201 	and.w	r2, r2, #1
 8000ac4:	f801 2b01 	strb.w	r2, [r1], #1
    for(i = 0; i < length; i++) {
 8000ac8:	3301      	adds	r3, #1
 8000aca:	e7d6      	b.n	8000a7a <preset+0x32>
 8000acc:	2000028c 	.word	0x2000028c
 8000ad0:	200005bb 	.word	0x200005bb
 8000ad4:	2000063e 	.word	0x2000063e

08000ad8 <finish>:
finish(uint8_t* pt, uint8_t start, uint8_t* from) { // 
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int x_ = 0;
 8000ada:	2300      	movs	r3, #0
    for (i = start; i < length; i++) { 
 8000adc:	4e10      	ldr	r6, [pc, #64]	; (8000b20 <finish+0x48>)
    uint8_t x = 0;
 8000ade:	461c      	mov	r4, r3
    for (i = start; i < length; i++) { 
 8000ae0:	7e35      	ldrb	r5, [r6, #24]
 8000ae2:	428d      	cmp	r5, r1
 8000ae4:	dc08      	bgt.n	8000af8 <finish+0x20>
    if(x_ % 8 != 0) {
 8000ae6:	f013 0207 	ands.w	r2, r3, #7
        pt[x_/8] = x >> (8-(x_% 8));
 8000aea:	bf1f      	itttt	ne
 8000aec:	10db      	asrne	r3, r3, #3
 8000aee:	f1c2 0208 	rsbne	r2, r2, #8
 8000af2:	4114      	asrne	r4, r2
 8000af4:	54c4      	strbne	r4, [r0, r3]
}
 8000af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        x += from[i] << 7;
 8000af8:	5c55      	ldrb	r5, [r2, r1]
        if((++x_) % 8 == 0) {
 8000afa:	3301      	adds	r3, #1
        x += from[i] << 7;
 8000afc:	01ed      	lsls	r5, r5, #7
 8000afe:	eb05 0454 	add.w	r4, r5, r4, lsr #1
        if((++x_) % 8 == 0) {
 8000b02:	f013 0507 	ands.w	r5, r3, #7
            pt[x_/8-1] = x;
 8000b06:	bf08      	it	eq
 8000b08:	eb00 07e3 	addeq.w	r7, r0, r3, asr #3
        x += from[i] << 7;
 8000b0c:	b2e4      	uxtb	r4, r4
            pt[x_/8-1] = x;
 8000b0e:	bf08      	it	eq
 8000b10:	f807 4c01 	strbeq.w	r4, [r7, #-1]
    for (i = start; i < length; i++) { 
 8000b14:	f101 0101 	add.w	r1, r1, #1
            x = 0;
 8000b18:	bf08      	it	eq
 8000b1a:	462c      	moveq	r4, r5
    for (i = start; i < length; i++) { 
 8000b1c:	e7e0      	b.n	8000ae0 <finish+0x8>
 8000b1e:	bf00      	nop
 8000b20:	2000028c 	.word	0x2000028c

08000b24 <get_decode>:
uint8_t get_decode(uint8_t* pt, uint8_t len) {
 8000b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (i = 0; i < length; i++){ // puts input in recd (to decode later)
 8000b26:	4c1b      	ldr	r4, [pc, #108]	; (8000b94 <get_decode+0x70>)
uint8_t get_decode(uint8_t* pt, uint8_t len) {
 8000b28:	4605      	mov	r5, r0
 8000b2a:	f204 362f 	addw	r6, r4, #815	; 0x32f
    for (i = 0; i < length; i++){ // puts input in recd (to decode later)
 8000b2e:	7e20      	ldrb	r0, [r4, #24]
 8000b30:	4631      	mov	r1, r6
 8000b32:	2300      	movs	r3, #0
 8000b34:	4298      	cmp	r0, r3
 8000b36:	dc1a      	bgt.n	8000b6e <get_decode+0x4a>
    syndrome();
 8000b38:	f7ff fd80 	bl	800063c <syndrome>
    pompom();
 8000b3c:	f7ff fdda 	bl	80006f4 <pompom>
    for (i = 0; i < length; i++)
 8000b40:	7e21      	ldrb	r1, [r4, #24]
 8000b42:	4815      	ldr	r0, [pc, #84]	; (8000b98 <get_decode+0x74>)
 8000b44:	2300      	movs	r3, #0
 8000b46:	4299      	cmp	r1, r3
 8000b48:	dc1c      	bgt.n	8000b84 <get_decode+0x60>
    finish(pt, length - k, &(recd[0]));
 8000b4a:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8000b4e:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <get_decode+0x78>)
 8000b50:	1ac9      	subs	r1, r1, r3
 8000b52:	4628      	mov	r0, r5
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	f7ff ffbf 	bl	8000ad8 <finish>
    pt[15] = info[127];
 8000b5a:	f894 3534 	ldrb.w	r3, [r4, #1332]	; 0x534
 8000b5e:	73eb      	strb	r3, [r5, #15]
    simpleserial_put('r', 16, pt);
 8000b60:	462a      	mov	r2, r5
 8000b62:	2110      	movs	r1, #16
 8000b64:	2072      	movs	r0, #114	; 0x72
 8000b66:	f000 f96f 	bl	8000e48 <simpleserial_put>
}
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		recd[i] = (pt[i/8] >> (i%8)) & 1;
 8000b6e:	10da      	asrs	r2, r3, #3
 8000b70:	f003 0707 	and.w	r7, r3, #7
 8000b74:	5caa      	ldrb	r2, [r5, r2]
 8000b76:	413a      	asrs	r2, r7
 8000b78:	f002 0201 	and.w	r2, r2, #1
 8000b7c:	f801 2b01 	strb.w	r2, [r1], #1
    for (i = 0; i < length; i++){ // puts input in recd (to decode later)
 8000b80:	3301      	adds	r3, #1
 8000b82:	e7d7      	b.n	8000b34 <get_decode+0x10>
		recd[i] ^= error[i];
 8000b84:	7832      	ldrb	r2, [r6, #0]
 8000b86:	f810 7b01 	ldrb.w	r7, [r0], #1
 8000b8a:	407a      	eors	r2, r7
 8000b8c:	f806 2b01 	strb.w	r2, [r6], #1
    for (i = 0; i < length; i++)
 8000b90:	3301      	adds	r3, #1
 8000b92:	e7d8      	b.n	8000b46 <get_decode+0x22>
 8000b94:	2000028c 	.word	0x2000028c
 8000b98:	200006be 	.word	0x200006be
 8000b9c:	200005bb 	.word	0x200005bb

08000ba0 <get_pt>:
{
 8000ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	b085      	sub	sp, #20
    aes_indep_enc_pretrigger(pt);
 8000ba6:	f001 f980 	bl	8001eaa <aes_indep_enc_pretrigger>
    preset(pt, buffer);
 8000baa:	4669      	mov	r1, sp
 8000bac:	4620      	mov	r0, r4
 8000bae:	f7ff ff4b 	bl	8000a48 <preset>
	trigger_high();
 8000bb2:	f000 faa9 	bl	8001108 <trigger_high>
    syndrome();
 8000bb6:	f7ff fd41 	bl	800063c <syndrome>
    pompom();
 8000bba:	f7ff fd9b 	bl	80006f4 <pompom>
    trigger_low();
 8000bbe:	f000 faaa 	bl	8001116 <trigger_low>
    for (i = 0; i < length; i++)
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <get_pt+0x70>)
 8000bc4:	7e19      	ldrb	r1, [r3, #24]
 8000bc6:	f203 4532 	addw	r5, r3, #1074	; 0x432
 8000bca:	f203 46b5 	addw	r6, r3, #1205	; 0x4b5
 8000bce:	f203 372f 	addw	r7, r3, #815	; 0x32f
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	4291      	cmp	r1, r2
 8000bd6:	d811      	bhi.n	8000bfc <get_pt+0x5c>
    finish(pt, length - k, &(recd[0]));
 8000bd8:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <get_pt+0x74>)
 8000bde:	1ac9      	subs	r1, r1, r3
 8000be0:	4620      	mov	r0, r4
 8000be2:	b2c9      	uxtb	r1, r1
 8000be4:	f7ff ff78 	bl	8000ad8 <finish>
    aes_indep_enc_posttrigger(pt);
 8000be8:	f001 f960 	bl	8001eac <aes_indep_enc_posttrigger>
	simpleserial_put('r', 16, pt);
 8000bec:	4622      	mov	r2, r4
 8000bee:	2110      	movs	r1, #16
 8000bf0:	2072      	movs	r0, #114	; 0x72
 8000bf2:	f000 f929 	bl	8000e48 <simpleserial_put>
}
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	b005      	add	sp, #20
 8000bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		recd[i] = error[i] ^ info[i];
 8000bfc:	f815 0b01 	ldrb.w	r0, [r5], #1
 8000c00:	f816 cb01 	ldrb.w	ip, [r6], #1
 8000c04:	ea80 000c 	eor.w	r0, r0, ip
 8000c08:	f807 0b01 	strb.w	r0, [r7], #1
    for (i = 0; i < length; i++)
 8000c0c:	3201      	adds	r2, #1
 8000c0e:	e7e1      	b.n	8000bd4 <get_pt+0x34>
 8000c10:	2000028c 	.word	0x2000028c
 8000c14:	200005bb 	.word	0x200005bb

08000c18 <get_enc>:

uint8_t get_enc(uint8_t* pt, uint8_t len) {
 8000c18:	b570      	push	{r4, r5, r6, lr}
    uint16_t i=0;
    for (i = 0; i < k; i++){ // puts input in recd (to decode later)
 8000c1a:	4c21      	ldr	r4, [pc, #132]	; (8000ca0 <get_enc+0x88>)
 8000c1c:	f894 6122 	ldrb.w	r6, [r4, #290]	; 0x122
uint8_t get_enc(uint8_t* pt, uint8_t len) {
 8000c20:	4605      	mov	r5, r0
    for (i = 0; i < k; i++){ // puts input in recd (to decode later)
 8000c22:	2100      	movs	r1, #0
 8000c24:	f204 2029 	addw	r0, r4, #553	; 0x229
 8000c28:	b28b      	uxth	r3, r1
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	d823      	bhi.n	8000c76 <get_enc+0x5e>
 8000c2e:	2300      	movs	r3, #0
		data[i] = (pt[i/8] >> (i%8)) & 1;
    }
    for (i =0; i<length; i++) {
        pt[i]=0;
 8000c30:	4618      	mov	r0, r3
    for (i =0; i<length; i++) {
 8000c32:	7e21      	ldrb	r1, [r4, #24]
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4291      	cmp	r1, r2
 8000c38:	d829      	bhi.n	8000c8e <get_enc+0x76>
    }
    encode_bch();
 8000c3a:	f7ff fcad 	bl	8000598 <encode_bch>
    for (i = 0; i < length - k; i++)
 8000c3e:	f894 2122 	ldrb.w	r2, [r4, #290]	; 0x122
 8000c42:	7e20      	ldrb	r0, [r4, #24]
 8000c44:	2100      	movs	r1, #0
 8000c46:	1a80      	subs	r0, r0, r2
 8000c48:	b28b      	uxth	r3, r1
 8000c4a:	4283      	cmp	r3, r0
 8000c4c:	f101 0101 	add.w	r1, r1, #1
 8000c50:	db20      	blt.n	8000c94 <get_enc+0x7c>
		recd[i] = bb[i];
	for (i = 0; i < k; i++)
		recd[i + length - k] = data[i];
 8000c52:	4c14      	ldr	r4, [pc, #80]	; (8000ca4 <get_enc+0x8c>)
 8000c54:	f5a4 7183 	sub.w	r1, r4, #262	; 0x106
 8000c58:	4420      	add	r0, r4
 8000c5a:	f001 f979 	bl	8001f50 <memcpy>
    finish(pt, 0, &(recd[0]));
 8000c5e:	4622      	mov	r2, r4
 8000c60:	4628      	mov	r0, r5
 8000c62:	2100      	movs	r1, #0
 8000c64:	f7ff ff38 	bl	8000ad8 <finish>
    simpleserial_put('r', 16, pt);
 8000c68:	462a      	mov	r2, r5
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	2072      	movs	r0, #114	; 0x72
 8000c6e:	f000 f8eb 	bl	8000e48 <simpleserial_put>
    return 0x00;
}
 8000c72:	2000      	movs	r0, #0
 8000c74:	bd70      	pop	{r4, r5, r6, pc}
		data[i] = (pt[i/8] >> (i%8)) & 1;
 8000c76:	08da      	lsrs	r2, r3, #3
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	5caa      	ldrb	r2, [r5, r2]
 8000c7e:	fa42 f303 	asr.w	r3, r2, r3
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	f800 3b01 	strb.w	r3, [r0], #1
    for (i = 0; i < k; i++){ // puts input in recd (to decode later)
 8000c8a:	3101      	adds	r1, #1
 8000c8c:	e7cc      	b.n	8000c28 <get_enc+0x10>
        pt[i]=0;
 8000c8e:	54e8      	strb	r0, [r5, r3]
    for (i =0; i<length; i++) {
 8000c90:	3301      	adds	r3, #1
 8000c92:	e7ce      	b.n	8000c32 <get_enc+0x1a>
		recd[i] = bb[i];
 8000c94:	4423      	add	r3, r4
 8000c96:	f893 61a6 	ldrb.w	r6, [r3, #422]	; 0x1a6
 8000c9a:	f883 632f 	strb.w	r6, [r3, #815]	; 0x32f
    for (i = 0; i < length - k; i++)
 8000c9e:	e7d3      	b.n	8000c48 <get_enc+0x30>
 8000ca0:	2000028c 	.word	0x2000028c
 8000ca4:	200005bb 	.word	0x200005bb

08000ca8 <main>:
{
    // Reset key here if needed
	return 0x00;
}
int main(void)
{
 8000ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <main+0x9c>)
 8000cac:	466a      	mov	r2, sp
 8000cae:	f103 0610 	add.w	r6, r3, #16
 8000cb2:	4615      	mov	r5, r2
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	6859      	ldr	r1, [r3, #4]
 8000cb8:	4614      	mov	r4, r2
 8000cba:	c403      	stmia	r4!, {r0, r1}
 8000cbc:	3308      	adds	r3, #8
 8000cbe:	42b3      	cmp	r3, r6
 8000cc0:	4622      	mov	r2, r4
 8000cc2:	d1f7      	bne.n	8000cb4 <main+0xc>

    platform_init();
 8000cc4:	f000 f97e 	bl	8000fc4 <platform_init>
    init_uart();
 8000cc8:	f000 f9bc 	bl	8001044 <init_uart>
    trigger_setup();
 8000ccc:	f000 f9f8 	bl	80010c0 <trigger_setup>

	aes_indep_init();
 8000cd0:	f001 f8e8 	bl	8001ea4 <aes_indep_init>
	aes_indep_key(tmp);
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	f001 f8e6 	bl	8001ea6 <aes_indep_key>

    /* Uncomment this to get a HELLO message for debug */
	read_p();               /* Read m */
 8000cda:	f7ff faed 	bl	80002b8 <read_p>
	generate_gf();          /* Construct the Galois Field GF(2**m) */
 8000cde:	f7ff faff 	bl	80002e0 <generate_gf>
	gen_poly();             /* Compute the generator polynomial of BCH code */
 8000ce2:	f7ff fb43 	bl	800036c <gen_poly>
	seed = 56214563;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <main+0xa0>)
 8000ce8:	4818      	ldr	r0, [pc, #96]	; (8000d4c <main+0xa4>)
 8000cea:	6058      	str	r0, [r3, #4]
	srandom(seed);
 8000cec:	f001 f960 	bl	8001fb0 <srandom>
    // putch('l');
    // putch('l');
    // putch('o');
    // putch('\n');

	simpleserial_init();
 8000cf0:	f000 f894 	bl	8000e1c <simpleserial_init>
    // #if SS_VER == SS_VER_2_1
    // simpleserial_addcmd(0x01, 16, aes);
    // #else
    simpleserial_addcmd('d', 16, get_decode);
 8000cf4:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <main+0xa8>)
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	2064      	movs	r0, #100	; 0x64
 8000cfa:	f000 f88b 	bl	8000e14 <simpleserial_addcmd>
    simpleserial_addcmd('k', 16, get_key);
 8000cfe:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <main+0xac>)
 8000d00:	2110      	movs	r1, #16
 8000d02:	206b      	movs	r0, #107	; 0x6b
 8000d04:	f000 f886 	bl	8000e14 <simpleserial_addcmd>
    simpleserial_addcmd('p', 32,  get_pt);
 8000d08:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <main+0xb0>)
 8000d0a:	2120      	movs	r1, #32
 8000d0c:	2070      	movs	r0, #112	; 0x70
 8000d0e:	f000 f881 	bl	8000e14 <simpleserial_addcmd>
    simpleserial_addcmd('e', 16,  get_enc);
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <main+0xb4>)
 8000d14:	2110      	movs	r1, #16
 8000d16:	2065      	movs	r0, #101	; 0x65
 8000d18:	f000 f87c 	bl	8000e14 <simpleserial_addcmd>
    simpleserial_addcmd('t', 1,  set_diff);
 8000d1c:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <main+0xb8>)
 8000d1e:	2101      	movs	r1, #1
 8000d20:	2074      	movs	r0, #116	; 0x74
 8000d22:	f000 f877 	bl	8000e14 <simpleserial_addcmd>
    simpleserial_addcmd('s', 4,  set_seed);
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <main+0xbc>)
 8000d28:	2104      	movs	r1, #4
 8000d2a:	2073      	movs	r0, #115	; 0x73
 8000d2c:	f000 f872 	bl	8000e14 <simpleserial_addcmd>
    //simpleserial_addcmd('x',  0,   reset);
    simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <main+0xc0>)
 8000d32:	2301      	movs	r3, #1
 8000d34:	2112      	movs	r1, #18
 8000d36:	206d      	movs	r0, #109	; 0x6d
 8000d38:	f000 f856 	bl	8000de8 <simpleserial_addcmd_flags>
    //simpleserial_addcmd('s', 2, enc_multi_setnum);
    //simpleserial_addcmd('f', 16, enc_multi_getpt);
    // #endif
    while(1)
        simpleserial_get();
 8000d3c:	f000 f8de 	bl	8000efc <simpleserial_get>
    while(1)
 8000d40:	e7fc      	b.n	8000d3c <main+0x94>
 8000d42:	bf00      	nop
 8000d44:	0800302b 	.word	0x0800302b
 8000d48:	2000028c 	.word	0x2000028c
 8000d4c:	0359c423 	.word	0x0359c423
 8000d50:	08000b25 	.word	0x08000b25
 8000d54:	08000699 	.word	0x08000699
 8000d58:	08000ba1 	.word	0x08000ba1
 8000d5c:	08000c19 	.word	0x08000c19
 8000d60:	08000271 	.word	0x08000271
 8000d64:	08000299 	.word	0x08000299
 8000d68:	0800028d 	.word	0x0800028d

08000d6c <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4770      	bx	lr

08000d70 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int i = 0; i < len; i++)
 8000d72:	2500      	movs	r5, #0
	{
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];
 8000d74:	1c4f      	adds	r7, r1, #1
	for(int i = 0; i < len; i++)
 8000d76:	4285      	cmp	r5, r0
 8000d78:	db01      	blt.n	8000d7e <hex_decode+0xe>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	e021      	b.n	8000dc2 <hex_decode+0x52>
		char n_lo = ascii_buf[2*i+1];
 8000d7e:	f817 4015 	ldrb.w	r4, [r7, r5, lsl #1]
		char n_hi = ascii_buf[2*i];
 8000d82:	f811 3015 	ldrb.w	r3, [r1, r5, lsl #1]
		if(n_lo >= '0' && n_lo <= '9')
 8000d86:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8000d8a:	b2f6      	uxtb	r6, r6
 8000d8c:	2e09      	cmp	r6, #9
 8000d8e:	d80c      	bhi.n	8000daa <hex_decode+0x3a>
			data_buf[i] = n_lo - '0';
 8000d90:	7016      	strb	r6, [r2, #0]
		if(n_hi >= '0' && n_hi <= '9')
 8000d92:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8000d96:	b2e6      	uxtb	r6, r4
 8000d98:	2e09      	cmp	r6, #9
 8000d9a:	d815      	bhi.n	8000dc8 <hex_decode+0x58>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8000d9c:	7813      	ldrb	r3, [r2, #0]
 8000d9e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000da2:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < len; i++)
 8000da4:	3501      	adds	r5, #1
 8000da6:	3201      	adds	r2, #1
 8000da8:	e7e5      	b.n	8000d76 <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8000daa:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8000dae:	2e05      	cmp	r6, #5
 8000db0:	d802      	bhi.n	8000db8 <hex_decode+0x48>
			data_buf[i] = n_lo - 'A' + 10;
 8000db2:	3c37      	subs	r4, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 8000db4:	7014      	strb	r4, [r2, #0]
 8000db6:	e7ec      	b.n	8000d92 <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8000db8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8000dbc:	2e05      	cmp	r6, #5
 8000dbe:	d901      	bls.n	8000dc4 <hex_decode+0x54>
			return 1;
 8000dc0:	2001      	movs	r0, #1
}
 8000dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_buf[i] = n_lo - 'a' + 10;
 8000dc4:	3c57      	subs	r4, #87	; 0x57
 8000dc6:	e7f5      	b.n	8000db4 <hex_decode+0x44>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8000dc8:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 8000dcc:	2c05      	cmp	r4, #5
 8000dce:	d802      	bhi.n	8000dd6 <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8000dd0:	f1a3 0437 	sub.w	r4, r3, #55	; 0x37
 8000dd4:	e7e2      	b.n	8000d9c <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8000dd6:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 8000dda:	2c05      	cmp	r4, #5
 8000ddc:	d8f0      	bhi.n	8000dc0 <hex_decode+0x50>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000dde:	7814      	ldrb	r4, [r2, #0]
 8000de0:	3b57      	subs	r3, #87	; 0x57
 8000de2:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 8000de6:	e7dc      	b.n	8000da2 <hex_decode+0x32>

08000de8 <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 8000de8:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS)
 8000dea:	4e09      	ldr	r6, [pc, #36]	; (8000e10 <simpleserial_addcmd_flags+0x28>)
 8000dec:	6834      	ldr	r4, [r6, #0]
 8000dee:	2c0f      	cmp	r4, #15
 8000df0:	dc0b      	bgt.n	8000e0a <simpleserial_addcmd_flags+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 8000df2:	29ff      	cmp	r1, #255	; 0xff
 8000df4:	d809      	bhi.n	8000e0a <simpleserial_addcmd_flags+0x22>
		return 1;

	commands[num_commands].c   = c;
 8000df6:	eb06 1504 	add.w	r5, r6, r4, lsl #4
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
 8000dfa:	e9c5 1202 	strd	r1, r2, [r5, #8]
	commands[num_commands].flags = fl;
	num_commands++;
 8000dfe:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 8000e00:	7128      	strb	r0, [r5, #4]
	commands[num_commands].flags = fl;
 8000e02:	742b      	strb	r3, [r5, #16]
	num_commands++;
 8000e04:	6034      	str	r4, [r6, #0]

	return 0;
 8000e06:	2000      	movs	r0, #0
}
 8000e08:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	e7fc      	b.n	8000e08 <simpleserial_addcmd_flags+0x20>
 8000e0e:	bf00      	nop
 8000e10:	200007c4 	.word	0x200007c4

08000e14 <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 8000e14:	2300      	movs	r3, #0
 8000e16:	f7ff bfe7 	b.w	8000de8 <simpleserial_addcmd_flags>
 8000e1a:	0000      	movs	r0, r0

08000e1c <simpleserial_init>:
{
 8000e1c:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <simpleserial_init+0x20>)
 8000e20:	2100      	movs	r1, #0
 8000e22:	2076      	movs	r0, #118	; 0x76
 8000e24:	f7ff fff6 	bl	8000e14 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000e28:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <simpleserial_init+0x24>)
 8000e2a:	2077      	movs	r0, #119	; 0x77
 8000e2c:	f7ff fff2 	bl	8000e14 <simpleserial_addcmd>
}
 8000e30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <simpleserial_init+0x28>)
 8000e36:	2079      	movs	r0, #121	; 0x79
 8000e38:	f7ff bfec 	b.w	8000e14 <simpleserial_addcmd>
 8000e3c:	08000d6d 	.word	0x08000d6d
 8000e40:	08000ead 	.word	0x08000ead
 8000e44:	08000e89 	.word	0x08000e89

08000e48 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4a:	4614      	mov	r4, r2
 8000e4c:	460e      	mov	r6, r1
	// Write first character
	putch(c);
 8000e4e:	f000 f983 	bl	8001158 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8000e52:	4f0c      	ldr	r7, [pc, #48]	; (8000e84 <simpleserial_put+0x3c>)
 8000e54:	1e65      	subs	r5, r4, #1
	for(int i = 0; i < size; i++)
 8000e56:	f1c4 0401 	rsb	r4, r4, #1
 8000e5a:	1963      	adds	r3, r4, r5
 8000e5c:	429e      	cmp	r6, r3
 8000e5e:	dc04      	bgt.n	8000e6a <simpleserial_put+0x22>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
}
 8000e60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	putch('\n');
 8000e64:	200a      	movs	r0, #10
 8000e66:	f000 b977 	b.w	8001158 <putch>
		putch(hex_lookup[output[i] >> 4 ]);
 8000e6a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	5cf8      	ldrb	r0, [r7, r3]
 8000e72:	f000 f971 	bl	8001158 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8000e76:	782b      	ldrb	r3, [r5, #0]
 8000e78:	f003 030f 	and.w	r3, r3, #15
 8000e7c:	5cf8      	ldrb	r0, [r7, r3]
 8000e7e:	f000 f96b 	bl	8001158 <putch>
	for(int i = 0; i < size; i++)
 8000e82:	e7ea      	b.n	8000e5a <simpleserial_put+0x12>
 8000e84:	08003018 	.word	0x08003018

08000e88 <ss_num_commands>:
{
 8000e88:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <ss_num_commands+0x20>)
    simpleserial_put('r', 0x01, &ncmds);
 8000e8c:	f10d 0207 	add.w	r2, sp, #7
    uint8_t ncmds = num_commands & 0xFF;
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f88d 3007 	strb.w	r3, [sp, #7]
    simpleserial_put('r', 0x01, &ncmds);
 8000e96:	2101      	movs	r1, #1
 8000e98:	2072      	movs	r0, #114	; 0x72
 8000e9a:	f7ff ffd5 	bl	8000e48 <simpleserial_put>
}
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	b003      	add	sp, #12
 8000ea2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ea6:	bf00      	nop
 8000ea8:	200007c4 	.word	0x200007c4

08000eac <ss_get_commands>:
{
 8000eac:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000eae:	4c12      	ldr	r4, [pc, #72]	; (8000ef8 <ss_get_commands+0x4c>)
 8000eb0:	6821      	ldr	r1, [r4, #0]
{
 8000eb2:	b08c      	sub	sp, #48	; 0x30
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000eb4:	b2cd      	uxtb	r5, r1
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	b2c3      	uxtb	r3, r0
 8000eba:	42ab      	cmp	r3, r5
 8000ebc:	f100 0001 	add.w	r0, r0, #1
 8000ec0:	db09      	blt.n	8000ed6 <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8000ec2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000ec6:	466a      	mov	r2, sp
 8000ec8:	b2c9      	uxtb	r1, r1
 8000eca:	2072      	movs	r0, #114	; 0x72
 8000ecc:	f7ff ffbc 	bl	8000e48 <simpleserial_put>
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	b00c      	add	sp, #48	; 0x30
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
 8000ed6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000eda:	ae0c      	add	r6, sp, #48	; 0x30
 8000edc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8000ee0:	4432      	add	r2, r6
 8000ee2:	791e      	ldrb	r6, [r3, #4]
 8000ee4:	f802 6c30 	strb.w	r6, [r2, #-48]
        repr_cmd_buf[i].len = commands[i].len;
 8000ee8:	689e      	ldr	r6, [r3, #8]
        repr_cmd_buf[i].flags = commands[i].flags;
 8000eea:	7c1b      	ldrb	r3, [r3, #16]
        repr_cmd_buf[i].len = commands[i].len;
 8000eec:	f802 6c2f 	strb.w	r6, [r2, #-47]
        repr_cmd_buf[i].flags = commands[i].flags;
 8000ef0:	f802 3c2e 	strb.w	r3, [r2, #-46]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000ef4:	e7e0      	b.n	8000eb8 <ss_get_commands+0xc>
 8000ef6:	bf00      	nop
 8000ef8:	200007c4 	.word	0x200007c4

08000efc <simpleserial_get>:
{
 8000efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 8000f00:	4d2f      	ldr	r5, [pc, #188]	; (8000fc0 <simpleserial_get+0xc4>)
{
 8000f02:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
	c = getch();
 8000f06:	f000 f90d 	bl	8001124 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 8000f0a:	462a      	mov	r2, r5
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f852 1b04 	ldr.w	r1, [r2], #4
 8000f12:	4299      	cmp	r1, r3
 8000f14:	dc04      	bgt.n	8000f20 <simpleserial_get+0x24>
	if(cmd == num_commands)
 8000f16:	d107      	bne.n	8000f28 <simpleserial_get+0x2c>
}
 8000f18:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
 8000f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
 8000f20:	011c      	lsls	r4, r3, #4
 8000f22:	5ca4      	ldrb	r4, [r4, r2]
 8000f24:	4284      	cmp	r4, r0
 8000f26:	d13e      	bne.n	8000fa6 <simpleserial_get+0xaa>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8000f28:	eb05 1403 	add.w	r4, r5, r3, lsl #4
 8000f2c:	011e      	lsls	r6, r3, #4
 8000f2e:	7c23      	ldrb	r3, [r4, #16]
 8000f30:	07db      	lsls	r3, r3, #31
 8000f32:	d514      	bpl.n	8000f5e <simpleserial_get+0x62>
		uint8_t l = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
 8000f3a:	f000 f8f3 	bl	8001124 <getch>
 8000f3e:	f88d 0108 	strb.w	r0, [sp, #264]	; 0x108
		buff[1] = getch();
 8000f42:	f000 f8ef 	bl	8001124 <getch>
		if (hex_decode(1, buff, &l))
 8000f46:	aa02      	add	r2, sp, #8
		buff[1] = getch();
 8000f48:	f88d 0109 	strb.w	r0, [sp, #265]	; 0x109
		if (hex_decode(1, buff, &l))
 8000f4c:	a942      	add	r1, sp, #264	; 0x108
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff ff0e 	bl	8000d70 <hex_decode>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d1df      	bne.n	8000f18 <simpleserial_get+0x1c>
		commands[cmd].len = l;
 8000f58:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000f5c:	60a3      	str	r3, [r4, #8]
 8000f5e:	af42      	add	r7, sp, #264	; 0x108
	for(cmd = 0; cmd < num_commands; cmd++)
 8000f60:	2400      	movs	r4, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000f62:	eb05 0806 	add.w	r8, r5, r6
 8000f66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000f6a:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
 8000f6e:	d31c      	bcc.n	8000faa <simpleserial_get+0xae>
	c = getch();
 8000f70:	f000 f8d8 	bl	8001124 <getch>
	if(c != '\n' && c != '\r')
 8000f74:	280a      	cmp	r0, #10
 8000f76:	d001      	beq.n	8000f7c <simpleserial_get+0x80>
 8000f78:	280d      	cmp	r0, #13
 8000f7a:	d1cd      	bne.n	8000f18 <simpleserial_get+0x1c>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8000f7c:	4435      	add	r5, r6
 8000f7e:	aa02      	add	r2, sp, #8
 8000f80:	68ac      	ldr	r4, [r5, #8]
 8000f82:	a942      	add	r1, sp, #264	; 0x108
 8000f84:	4620      	mov	r0, r4
 8000f86:	f7ff fef3 	bl	8000d70 <hex_decode>
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	d1c4      	bne.n	8000f18 <simpleserial_get+0x1c>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 8000f8e:	b2e1      	uxtb	r1, r4
 8000f90:	68eb      	ldr	r3, [r5, #12]
 8000f92:	a802      	add	r0, sp, #8
 8000f94:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
 8000f96:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 8000f98:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	207a      	movs	r0, #122	; 0x7a
 8000fa0:	f7ff ff52 	bl	8000e48 <simpleserial_put>
 8000fa4:	e7b8      	b.n	8000f18 <simpleserial_get+0x1c>
	for(cmd = 0; cmd < num_commands; cmd++)
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	e7b3      	b.n	8000f12 <simpleserial_get+0x16>
		c = getch();
 8000faa:	f000 f8bb 	bl	8001124 <getch>
		if(c == '\n' || c == '\r')
 8000fae:	280a      	cmp	r0, #10
 8000fb0:	d0b2      	beq.n	8000f18 <simpleserial_get+0x1c>
 8000fb2:	280d      	cmp	r0, #13
 8000fb4:	d0b0      	beq.n	8000f18 <simpleserial_get+0x1c>
		ascii_buf[i] = c;
 8000fb6:	f807 0b01 	strb.w	r0, [r7], #1
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000fba:	3401      	adds	r4, #1
 8000fbc:	e7d3      	b.n	8000f66 <simpleserial_get+0x6a>
 8000fbe:	bf00      	nop
 8000fc0:	200007c4 	.word	0x200007c4

08000fc4 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000fc4:	b570      	push	{r4, r5, r6, lr}
 8000fc6:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000fc8:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000fca:	2603      	movs	r6, #3
 8000fcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000fd0:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000fd2:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000fd4:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000fd8:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000fda:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000fdc:	f000 f8d4 	bl	8001188 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000fe0:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000fe2:	4621      	mov	r1, r4
 8000fe4:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000fe6:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fea:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000ff0:	f000 fb38 	bl	8001664 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <platform_init+0x78>)
 8000ff6:	695a      	ldr	r2, [r3, #20]
 8000ff8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001000:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001008:	4c0d      	ldr	r4, [pc, #52]	; (8001040 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800100e:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8001010:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001014:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001016:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800101a:	f000 fbc9 	bl	80017b0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800101e:	462a      	mov	r2, r5
 8001020:	4620      	mov	r0, r4
 8001022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001026:	f000 fc87 	bl	8001938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 800102a:	462a      	mov	r2, r5
 800102c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001030:	4620      	mov	r0, r4
 8001032:	f000 fc81 	bl	8001938 <HAL_GPIO_WritePin>
#endif
}
 8001036:	b016      	add	sp, #88	; 0x58
 8001038:	bd70      	pop	{r4, r5, r6, pc}
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	48000800 	.word	0x48000800

08001044 <init_uart>:

void init_uart(void)
{
 8001044:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001046:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 800104a:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001052:	2101      	movs	r1, #1
 8001054:	2303      	movs	r3, #3
 8001056:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 800105a:	4c16      	ldr	r4, [pc, #88]	; (80010b4 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 800105c:	2307      	movs	r3, #7
 800105e:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8001060:	6963      	ldr	r3, [r4, #20]
 8001062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001066:	6163      	str	r3, [r4, #20]
 8001068:	6963      	ldr	r3, [r4, #20]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001070:	a903      	add	r1, sp, #12
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8001076:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001078:	f000 fb9a 	bl	80017b0 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 800107e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80010bc <init_uart+0x78>
 8001082:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001086:	e9c0 c300 	strd	ip, r3, [r0]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800108c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8001090:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001092:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001094:	230c      	movs	r3, #12
 8001096:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8001098:	69a3      	ldr	r3, [r4, #24]
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	61a3      	str	r3, [r4, #24]
 80010a0:	69a3      	ldr	r3, [r4, #24]
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 80010aa:	f000 fd99 	bl	8001be0 <HAL_UART_Init>
}
 80010ae:	b008      	add	sp, #32
 80010b0:	bd10      	pop	{r4, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000
 80010b8:	200008c8 	.word	0x200008c8
 80010bc:	40013800 	.word	0x40013800

080010c0 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <trigger_setup+0x44>)
{
 80010c2:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80010ca:	615a      	str	r2, [r3, #20]
 80010cc:	695b      	ldr	r3, [r3, #20]
{
 80010ce:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80010d8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80010dc:	2301      	movs	r3, #1
 80010de:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80010e2:	2500      	movs	r5, #0
 80010e4:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80010e6:	a901      	add	r1, sp, #4
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80010ec:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80010f0:	f000 fb5e 	bl	80017b0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80010f4:	462a      	mov	r2, r5
 80010f6:	4621      	mov	r1, r4
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f000 fc1c 	bl	8001938 <HAL_GPIO_WritePin>
}
 8001100:	b007      	add	sp, #28
 8001102:	bd30      	pop	{r4, r5, pc}
 8001104:	40021000 	.word	0x40021000

08001108 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001112:	f000 bc11 	b.w	8001938 <HAL_GPIO_WritePin>

08001116 <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f000 bc0a 	b.w	8001938 <HAL_GPIO_WritePin>

08001124 <getch>:
}

char getch(void)
{
 8001124:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001126:	4d0a      	ldr	r5, [pc, #40]	; (8001150 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8001128:	4c0a      	ldr	r4, [pc, #40]	; (8001154 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 800112a:	f241 3388 	movw	r3, #5000	; 0x1388
 800112e:	2201      	movs	r2, #1
 8001130:	f10d 0107 	add.w	r1, sp, #7
 8001134:	4628      	mov	r0, r5
 8001136:	f000 fdd4 	bl	8001ce2 <HAL_UART_Receive>
 800113a:	b918      	cbnz	r0, 8001144 <getch+0x20>
  //putch(d);
  return d;
}
 800113c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001140:	b003      	add	sp, #12
 8001142:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8001144:	6a23      	ldr	r3, [r4, #32]
 8001146:	f043 0308 	orr.w	r3, r3, #8
 800114a:	6223      	str	r3, [r4, #32]
 800114c:	e7ed      	b.n	800112a <getch+0x6>
 800114e:	bf00      	nop
 8001150:	200008c8 	.word	0x200008c8
 8001154:	40013800 	.word	0x40013800

08001158 <putch>:

void putch(char c)
{
 8001158:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800115a:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 800115e:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001162:	2201      	movs	r2, #1
 8001164:	f10d 0107 	add.w	r1, sp, #7
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <putch+0x1c>)
 800116a:	f000 fd64 	bl	8001c36 <HAL_UART_Transmit>
}
 800116e:	b003      	add	sp, #12
 8001170:	f85d fb04 	ldr.w	pc, [sp], #4
 8001174:	200008c8 	.word	0x200008c8

08001178 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8001178:	4b02      	ldr	r3, [pc, #8]	; (8001184 <HAL_GetTick+0xc>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	1c42      	adds	r2, r0, #1
 800117e:	601a      	str	r2, [r3, #0]
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000938 	.word	0x20000938

08001188 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001188:	6803      	ldr	r3, [r0, #0]
{
 800118a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118e:	07d9      	lsls	r1, r3, #31
{
 8001190:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	d411      	bmi.n	80011b8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	079a      	lsls	r2, r3, #30
 8001198:	f100 8086 	bmi.w	80012a8 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	071e      	lsls	r6, r3, #28
 80011a0:	f100 80f4 	bmi.w	800138c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	075d      	lsls	r5, r3, #29
 80011a8:	f100 8140 	bmi.w	800142c <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ac:	69e2      	ldr	r2, [r4, #28]
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	f040 81cb 	bne.w	800154a <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80011b4:	2000      	movs	r0, #0
 80011b6:	e021      	b.n	80011fc <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011b8:	499a      	ldr	r1, [pc, #616]	; (8001424 <HAL_RCC_OscConfig+0x29c>)
 80011ba:	684b      	ldr	r3, [r1, #4]
 80011bc:	f003 030c 	and.w	r3, r3, #12
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d007      	beq.n	80011d4 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c4:	684b      	ldr	r3, [r1, #4]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d119      	bne.n	8001202 <HAL_RCC_OscConfig+0x7a>
 80011ce:	684b      	ldr	r3, [r1, #4]
 80011d0:	03db      	lsls	r3, r3, #15
 80011d2:	d516      	bpl.n	8001202 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	6809      	ldr	r1, [r1, #0]
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	fab3 f383 	clz	r3, r3
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2201      	movs	r2, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	420b      	tst	r3, r1
 80011f2:	d0cf      	beq.n	8001194 <HAL_RCC_OscConfig+0xc>
 80011f4:	6863      	ldr	r3, [r4, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1cc      	bne.n	8001194 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
}
 80011fc:	b002      	add	sp, #8
 80011fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001202:	6862      	ldr	r2, [r4, #4]
 8001204:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001208:	d124      	bne.n	8001254 <HAL_RCC_OscConfig+0xcc>
 800120a:	680b      	ldr	r3, [r1, #0]
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001212:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001214:	68a0      	ldr	r0, [r4, #8]
 8001216:	f023 030f 	bic.w	r3, r3, #15
 800121a:	4303      	orrs	r3, r0
 800121c:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800121e:	b34a      	cbz	r2, 8001274 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8001220:	f7ff ffaa 	bl	8001178 <HAL_GetTick>
 8001224:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001228:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	2701      	movs	r7, #1
 800122c:	fa96 f3a6 	rbit	r3, r6
 8001230:	680a      	ldr	r2, [r1, #0]
 8001232:	fa96 f3a6 	rbit	r3, r6
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	fa07 f303 	lsl.w	r3, r7, r3
 8001242:	4213      	tst	r3, r2
 8001244:	d1a6      	bne.n	8001194 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001246:	f7ff ff97 	bl	8001178 <HAL_GetTick>
 800124a:	1b40      	subs	r0, r0, r5
 800124c:	2864      	cmp	r0, #100	; 0x64
 800124e:	d9ed      	bls.n	800122c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001250:	2003      	movs	r0, #3
 8001252:	e7d3      	b.n	80011fc <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001254:	680b      	ldr	r3, [r1, #0]
 8001256:	b932      	cbnz	r2, 8001266 <HAL_RCC_OscConfig+0xde>
 8001258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125c:	600b      	str	r3, [r1, #0]
 800125e:	680b      	ldr	r3, [r1, #0]
 8001260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001264:	e7d4      	b.n	8001210 <HAL_RCC_OscConfig+0x88>
 8001266:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800126a:	d1f5      	bne.n	8001258 <HAL_RCC_OscConfig+0xd0>
 800126c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001270:	600b      	str	r3, [r1, #0]
 8001272:	e7ca      	b.n	800120a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001274:	f7ff ff80 	bl	8001178 <HAL_GetTick>
 8001278:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800127c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	2701      	movs	r7, #1
 8001280:	fa96 f3a6 	rbit	r3, r6
 8001284:	680a      	ldr	r2, [r1, #0]
 8001286:	fa96 f3a6 	rbit	r3, r6
 800128a:	fab3 f383 	clz	r3, r3
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	fa07 f303 	lsl.w	r3, r7, r3
 8001296:	4213      	tst	r3, r2
 8001298:	f43f af7c 	beq.w	8001194 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff ff6c 	bl	8001178 <HAL_GetTick>
 80012a0:	1b40      	subs	r0, r0, r5
 80012a2:	2864      	cmp	r0, #100	; 0x64
 80012a4:	d9ec      	bls.n	8001280 <HAL_RCC_OscConfig+0xf8>
 80012a6:	e7d3      	b.n	8001250 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012a8:	495e      	ldr	r1, [pc, #376]	; (8001424 <HAL_RCC_OscConfig+0x29c>)
 80012aa:	684b      	ldr	r3, [r1, #4]
 80012ac:	f013 0f0c 	tst.w	r3, #12
 80012b0:	d007      	beq.n	80012c2 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012b2:	684b      	ldr	r3, [r1, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d121      	bne.n	8001300 <HAL_RCC_OscConfig+0x178>
 80012bc:	684b      	ldr	r3, [r1, #4]
 80012be:	03df      	lsls	r7, r3, #15
 80012c0:	d41e      	bmi.n	8001300 <HAL_RCC_OscConfig+0x178>
 80012c2:	2302      	movs	r3, #2
 80012c4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c8:	6808      	ldr	r0, [r1, #0]
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	2201      	movs	r2, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	4203      	tst	r3, r0
 80012de:	d002      	beq.n	80012e6 <HAL_RCC_OscConfig+0x15e>
 80012e0:	6923      	ldr	r3, [r4, #16]
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d189      	bne.n	80011fa <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	6808      	ldr	r0, [r1, #0]
 80012e8:	23f8      	movs	r3, #248	; 0xf8
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	fab3 f283 	clz	r2, r3
 80012f2:	6963      	ldr	r3, [r4, #20]
 80012f4:	4093      	lsls	r3, r2
 80012f6:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
 80012fe:	e74d      	b.n	800119c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001300:	6922      	ldr	r2, [r4, #16]
 8001302:	2501      	movs	r5, #1
 8001304:	b302      	cbz	r2, 8001348 <HAL_RCC_OscConfig+0x1c0>
 8001306:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800130a:	fab3 f383 	clz	r3, r3
 800130e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001312:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	2702      	movs	r7, #2
 800131a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800131c:	f7ff ff2c 	bl	8001178 <HAL_GetTick>
 8001320:	4606      	mov	r6, r0
 8001322:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001326:	680a      	ldr	r2, [r1, #0]
 8001328:	fa97 f3a7 	rbit	r3, r7
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	fa05 f303 	lsl.w	r3, r5, r3
 8001338:	4213      	tst	r3, r2
 800133a:	d1d4      	bne.n	80012e6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133c:	f7ff ff1c 	bl	8001178 <HAL_GetTick>
 8001340:	1b80      	subs	r0, r0, r6
 8001342:	2802      	cmp	r0, #2
 8001344:	d9ed      	bls.n	8001322 <HAL_RCC_OscConfig+0x19a>
 8001346:	e783      	b.n	8001250 <HAL_RCC_OscConfig+0xc8>
 8001348:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 800134c:	fab3 f383 	clz	r3, r3
 8001350:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001354:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	2702      	movs	r7, #2
 800135c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800135e:	f7ff ff0b 	bl	8001178 <HAL_GetTick>
 8001362:	4606      	mov	r6, r0
 8001364:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001368:	680a      	ldr	r2, [r1, #0]
 800136a:	fa97 f3a7 	rbit	r3, r7
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	f003 031f 	and.w	r3, r3, #31
 8001376:	fa05 f303 	lsl.w	r3, r5, r3
 800137a:	4213      	tst	r3, r2
 800137c:	f43f af0e 	beq.w	800119c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001380:	f7ff fefa 	bl	8001178 <HAL_GetTick>
 8001384:	1b80      	subs	r0, r0, r6
 8001386:	2802      	cmp	r0, #2
 8001388:	d9ec      	bls.n	8001364 <HAL_RCC_OscConfig+0x1dc>
 800138a:	e761      	b.n	8001250 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138c:	69a2      	ldr	r2, [r4, #24]
 800138e:	4d25      	ldr	r5, [pc, #148]	; (8001424 <HAL_RCC_OscConfig+0x29c>)
 8001390:	4825      	ldr	r0, [pc, #148]	; (8001428 <HAL_RCC_OscConfig+0x2a0>)
 8001392:	2101      	movs	r1, #1
 8001394:	b312      	cbz	r2, 80013dc <HAL_RCC_OscConfig+0x254>
 8001396:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	4403      	add	r3, r0
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	2602      	movs	r6, #2
 80013a4:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 80013a6:	f7ff fee7 	bl	8001178 <HAL_GetTick>
 80013aa:	4607      	mov	r7, r0
 80013ac:	fa96 f3a6 	rbit	r3, r6
 80013b0:	fa96 f3a6 	rbit	r3, r6
 80013b4:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80013ba:	fa96 f3a6 	rbit	r3, r6
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	4213      	tst	r3, r2
 80013cc:	f47f aeea 	bne.w	80011a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fed2 	bl	8001178 <HAL_GetTick>
 80013d4:	1bc0      	subs	r0, r0, r7
 80013d6:	2802      	cmp	r0, #2
 80013d8:	d9e8      	bls.n	80013ac <HAL_RCC_OscConfig+0x224>
 80013da:	e739      	b.n	8001250 <HAL_RCC_OscConfig+0xc8>
 80013dc:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	4403      	add	r3, r0
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	2602      	movs	r6, #2
 80013ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80013ec:	f7ff fec4 	bl	8001178 <HAL_GetTick>
 80013f0:	4607      	mov	r7, r0
 80013f2:	fa96 f3a6 	rbit	r3, r6
 80013f6:	fa96 f3a6 	rbit	r3, r6
 80013fa:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001400:	fa96 f3a6 	rbit	r3, r6
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	4213      	tst	r3, r2
 8001412:	f43f aec7 	beq.w	80011a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001416:	f7ff feaf 	bl	8001178 <HAL_GetTick>
 800141a:	1bc0      	subs	r0, r0, r7
 800141c:	2802      	cmp	r0, #2
 800141e:	d9e8      	bls.n	80013f2 <HAL_RCC_OscConfig+0x26a>
 8001420:	e716      	b.n	8001250 <HAL_RCC_OscConfig+0xc8>
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142c:	498a      	ldr	r1, [pc, #552]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800142e:	69cb      	ldr	r3, [r1, #28]
 8001430:	00d8      	lsls	r0, r3, #3
 8001432:	d433      	bmi.n	800149c <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	69cb      	ldr	r3, [r1, #28]
 8001436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143a:	61cb      	str	r3, [r1, #28]
 800143c:	69cb      	ldr	r3, [r1, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001446:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	4e84      	ldr	r6, [pc, #528]	; (800165c <HAL_RCC_OscConfig+0x4d4>)
 800144a:	6833      	ldr	r3, [r6, #0]
 800144c:	05da      	lsls	r2, r3, #23
 800144e:	d527      	bpl.n	80014a0 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001450:	68e3      	ldr	r3, [r4, #12]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d134      	bne.n	80014c0 <HAL_RCC_OscConfig+0x338>
 8001456:	6a0b      	ldr	r3, [r1, #32]
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800145e:	f7ff fe8b 	bl	8001178 <HAL_GetTick>
 8001462:	2602      	movs	r6, #2
 8001464:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001466:	f04f 0801 	mov.w	r8, #1
 800146a:	fa96 f3a6 	rbit	r3, r6
 800146e:	fa96 f3a6 	rbit	r3, r6
 8001472:	2b00      	cmp	r3, #0
 8001474:	d061      	beq.n	800153a <HAL_RCC_OscConfig+0x3b2>
 8001476:	6a0a      	ldr	r2, [r1, #32]
 8001478:	fa96 f3a6 	rbit	r3, r6
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	fa08 f303 	lsl.w	r3, r8, r3
 8001488:	4213      	tst	r3, r2
 800148a:	d04e      	beq.n	800152a <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 800148c:	2d00      	cmp	r5, #0
 800148e:	f43f ae8d 	beq.w	80011ac <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001492:	69cb      	ldr	r3, [r1, #28]
 8001494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001498:	61cb      	str	r3, [r1, #28]
 800149a:	e687      	b.n	80011ac <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800149c:	2500      	movs	r5, #0
 800149e:	e7d3      	b.n	8001448 <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a0:	6833      	ldr	r3, [r6, #0]
 80014a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80014a8:	f7ff fe66 	bl	8001178 <HAL_GetTick>
 80014ac:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	6833      	ldr	r3, [r6, #0]
 80014b0:	05db      	lsls	r3, r3, #23
 80014b2:	d4cd      	bmi.n	8001450 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b4:	f7ff fe60 	bl	8001178 <HAL_GetTick>
 80014b8:	1bc0      	subs	r0, r0, r7
 80014ba:	2864      	cmp	r0, #100	; 0x64
 80014bc:	d9f7      	bls.n	80014ae <HAL_RCC_OscConfig+0x326>
 80014be:	e6c7      	b.n	8001250 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c0:	bb2b      	cbnz	r3, 800150e <HAL_RCC_OscConfig+0x386>
 80014c2:	6a0b      	ldr	r3, [r1, #32]
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	620b      	str	r3, [r1, #32]
 80014ca:	6a0b      	ldr	r3, [r1, #32]
 80014cc:	f023 0304 	bic.w	r3, r3, #4
 80014d0:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80014d2:	f7ff fe51 	bl	8001178 <HAL_GetTick>
 80014d6:	2602      	movs	r6, #2
 80014d8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014da:	f04f 0801 	mov.w	r8, #1
 80014de:	fa96 f3a6 	rbit	r3, r6
 80014e2:	fa96 f3a6 	rbit	r3, r6
 80014e6:	b363      	cbz	r3, 8001542 <HAL_RCC_OscConfig+0x3ba>
 80014e8:	6a0a      	ldr	r2, [r1, #32]
 80014ea:	fa96 f3a6 	rbit	r3, r6
 80014ee:	fab3 f383 	clz	r3, r3
 80014f2:	f003 031f 	and.w	r3, r3, #31
 80014f6:	fa08 f303 	lsl.w	r3, r8, r3
 80014fa:	4213      	tst	r3, r2
 80014fc:	d0c6      	beq.n	800148c <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fe3b 	bl	8001178 <HAL_GetTick>
 8001502:	f241 3388 	movw	r3, #5000	; 0x1388
 8001506:	1bc0      	subs	r0, r0, r7
 8001508:	4298      	cmp	r0, r3
 800150a:	d9e8      	bls.n	80014de <HAL_RCC_OscConfig+0x356>
 800150c:	e6a0      	b.n	8001250 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150e:	2b05      	cmp	r3, #5
 8001510:	6a0b      	ldr	r3, [r1, #32]
 8001512:	d103      	bne.n	800151c <HAL_RCC_OscConfig+0x394>
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	620b      	str	r3, [r1, #32]
 800151a:	e79c      	b.n	8001456 <HAL_RCC_OscConfig+0x2ce>
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	620b      	str	r3, [r1, #32]
 8001522:	6a0b      	ldr	r3, [r1, #32]
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	e798      	b.n	800145c <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff fe25 	bl	8001178 <HAL_GetTick>
 800152e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001532:	1bc0      	subs	r0, r0, r7
 8001534:	4298      	cmp	r0, r3
 8001536:	d998      	bls.n	800146a <HAL_RCC_OscConfig+0x2e2>
 8001538:	e68a      	b.n	8001250 <HAL_RCC_OscConfig+0xc8>
 800153a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001540:	e79a      	b.n	8001478 <HAL_RCC_OscConfig+0x2f0>
 8001542:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001548:	e7cf      	b.n	80014ea <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800154a:	4943      	ldr	r1, [pc, #268]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800154c:	684b      	ldr	r3, [r1, #4]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b08      	cmp	r3, #8
 8001554:	f43f ae51 	beq.w	80011fa <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001558:	2a02      	cmp	r2, #2
 800155a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800155e:	d154      	bne.n	800160a <HAL_RCC_OscConfig+0x482>
 8001560:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800156c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001576:	f7ff fdff 	bl	8001178 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001660 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 800157e:	4606      	mov	r6, r0
 8001580:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001584:	2501      	movs	r5, #1
 8001586:	fa97 f3a7 	rbit	r3, r7
 800158a:	680a      	ldr	r2, [r1, #0]
 800158c:	fa97 f3a7 	rbit	r3, r7
 8001590:	fab3 f383 	clz	r3, r3
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	fa05 f303 	lsl.w	r3, r5, r3
 800159c:	4213      	tst	r3, r2
 800159e:	d12e      	bne.n	80015fe <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a0:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 80015a4:	684a      	ldr	r2, [r1, #4]
 80015a6:	4303      	orrs	r3, r0
 80015a8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
 80015b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015c4:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c6:	4f26      	ldr	r7, [pc, #152]	; (8001660 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 80015c8:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80015ca:	f7ff fdd5 	bl	8001178 <HAL_GetTick>
 80015ce:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80015d2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d4:	2601      	movs	r6, #1
 80015d6:	fa95 f3a5 	rbit	r3, r5
 80015da:	680a      	ldr	r2, [r1, #0]
 80015dc:	fa95 f3a5 	rbit	r3, r5
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	fa06 f303 	lsl.w	r3, r6, r3
 80015ec:	4213      	tst	r3, r2
 80015ee:	f47f ade1 	bne.w	80011b4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fdc1 	bl	8001178 <HAL_GetTick>
 80015f6:	1b00      	subs	r0, r0, r4
 80015f8:	42b8      	cmp	r0, r7
 80015fa:	d9ec      	bls.n	80015d6 <HAL_RCC_OscConfig+0x44e>
 80015fc:	e628      	b.n	8001250 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff fdbb 	bl	8001178 <HAL_GetTick>
 8001602:	1b80      	subs	r0, r0, r6
 8001604:	4540      	cmp	r0, r8
 8001606:	d9be      	bls.n	8001586 <HAL_RCC_OscConfig+0x3fe>
 8001608:	e622      	b.n	8001250 <HAL_RCC_OscConfig+0xc8>
 800160a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800160e:	fab3 f383 	clz	r3, r3
 8001612:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001616:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001620:	f7ff fdaa 	bl	8001178 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	4f0e      	ldr	r7, [pc, #56]	; (8001660 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8001626:	4604      	mov	r4, r0
 8001628:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162c:	2601      	movs	r6, #1
 800162e:	fa95 f3a5 	rbit	r3, r5
 8001632:	680a      	ldr	r2, [r1, #0]
 8001634:	fa95 f3a5 	rbit	r3, r5
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	fa06 f303 	lsl.w	r3, r6, r3
 8001644:	4213      	tst	r3, r2
 8001646:	f43f adb5 	beq.w	80011b4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fd95 	bl	8001178 <HAL_GetTick>
 800164e:	1b00      	subs	r0, r0, r4
 8001650:	42b8      	cmp	r0, r7
 8001652:	d9ec      	bls.n	800162e <HAL_RCC_OscConfig+0x4a6>
 8001654:	e5fc      	b.n	8001250 <HAL_RCC_OscConfig+0xc8>
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	40007000 	.word	0x40007000
 8001660:	00030d40 	.word	0x00030d40

08001664 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001664:	4a50      	ldr	r2, [pc, #320]	; (80017a8 <HAL_RCC_ClockConfig+0x144>)
{
 8001666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001668:	6813      	ldr	r3, [r2, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	428b      	cmp	r3, r1
{
 8001670:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001672:	d31b      	bcc.n	80016ac <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	6822      	ldr	r2, [r4, #0]
 8001676:	0790      	lsls	r0, r2, #30
 8001678:	d424      	bmi.n	80016c4 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	07d2      	lsls	r2, r2, #31
 800167c:	d42a      	bmi.n	80016d4 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800167e:	4a4a      	ldr	r2, [pc, #296]	; (80017a8 <HAL_RCC_ClockConfig+0x144>)
 8001680:	6813      	ldr	r3, [r2, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	428b      	cmp	r3, r1
 8001688:	d87a      	bhi.n	8001780 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168a:	6820      	ldr	r0, [r4, #0]
 800168c:	0743      	lsls	r3, r0, #29
 800168e:	f100 8082 	bmi.w	8001796 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001692:	f010 0008 	ands.w	r0, r0, #8
 8001696:	d014      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001698:	4a44      	ldr	r2, [pc, #272]	; (80017ac <HAL_RCC_ClockConfig+0x148>)
 800169a:	6921      	ldr	r1, [r4, #16]
 800169c:	6853      	ldr	r3, [r2, #4]
 800169e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80016a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016a6:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80016a8:	2000      	movs	r0, #0
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ac:	6813      	ldr	r3, [r2, #0]
 80016ae:	f023 0307 	bic.w	r3, r3, #7
 80016b2:	430b      	orrs	r3, r1
 80016b4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016b6:	6813      	ldr	r3, [r2, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	428b      	cmp	r3, r1
 80016be:	d0d9      	beq.n	8001674 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 80016c0:	2001      	movs	r0, #1
}
 80016c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c4:	4839      	ldr	r0, [pc, #228]	; (80017ac <HAL_RCC_ClockConfig+0x148>)
 80016c6:	68a5      	ldr	r5, [r4, #8]
 80016c8:	6843      	ldr	r3, [r0, #4]
 80016ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016ce:	432b      	orrs	r3, r5
 80016d0:	6043      	str	r3, [r0, #4]
 80016d2:	e7d2      	b.n	800167a <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d4:	6862      	ldr	r2, [r4, #4]
 80016d6:	4d35      	ldr	r5, [pc, #212]	; (80017ac <HAL_RCC_ClockConfig+0x148>)
 80016d8:	2a01      	cmp	r2, #1
 80016da:	d127      	bne.n	800172c <HAL_RCC_ClockConfig+0xc8>
 80016dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e0:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e4:	6828      	ldr	r0, [r5, #0]
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	d0e2      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fa:	686b      	ldr	r3, [r5, #4]
 80016fc:	f023 0303 	bic.w	r3, r3, #3
 8001700:	431a      	orrs	r2, r3
 8001702:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 8001704:	f7ff fd38 	bl	8001178 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001708:	6863      	ldr	r3, [r4, #4]
 800170a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800170c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170e:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	d11e      	bne.n	8001752 <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001714:	686b      	ldr	r3, [r5, #4]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b04      	cmp	r3, #4
 800171c:	d0af      	beq.n	800167e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171e:	f7ff fd2b 	bl	8001178 <HAL_GetTick>
 8001722:	1b80      	subs	r0, r0, r6
 8001724:	42b8      	cmp	r0, r7
 8001726:	d9f5      	bls.n	8001714 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001728:	2003      	movs	r0, #3
 800172a:	e7ca      	b.n	80016c2 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172c:	2a02      	cmp	r2, #2
 800172e:	bf0c      	ite	eq
 8001730:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001734:	2302      	movne	r3, #2
 8001736:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173a:	682e      	ldr	r6, [r5, #0]
 800173c:	fa93 f3a3 	rbit	r3, r3
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f303 	lsl.w	r3, r0, r3
 800174e:	4233      	tst	r3, r6
 8001750:	e7d2      	b.n	80016f8 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001752:	2b02      	cmp	r3, #2
 8001754:	d10f      	bne.n	8001776 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001756:	686b      	ldr	r3, [r5, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b08      	cmp	r3, #8
 800175e:	d08e      	beq.n	800167e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001760:	f7ff fd0a 	bl	8001178 <HAL_GetTick>
 8001764:	1b80      	subs	r0, r0, r6
 8001766:	42b8      	cmp	r0, r7
 8001768:	d9f5      	bls.n	8001756 <HAL_RCC_ClockConfig+0xf2>
 800176a:	e7dd      	b.n	8001728 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff fd04 	bl	8001178 <HAL_GetTick>
 8001770:	1b80      	subs	r0, r0, r6
 8001772:	42b8      	cmp	r0, r7
 8001774:	d8d8      	bhi.n	8001728 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001776:	686b      	ldr	r3, [r5, #4]
 8001778:	f013 0f0c 	tst.w	r3, #12
 800177c:	d1f6      	bne.n	800176c <HAL_RCC_ClockConfig+0x108>
 800177e:	e77e      	b.n	800167e <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001780:	6813      	ldr	r3, [r2, #0]
 8001782:	f023 0307 	bic.w	r3, r3, #7
 8001786:	430b      	orrs	r3, r1
 8001788:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800178a:	6813      	ldr	r3, [r2, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	428b      	cmp	r3, r1
 8001792:	d195      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x5c>
 8001794:	e779      	b.n	800168a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001796:	4905      	ldr	r1, [pc, #20]	; (80017ac <HAL_RCC_ClockConfig+0x148>)
 8001798:	68e3      	ldr	r3, [r4, #12]
 800179a:	684a      	ldr	r2, [r1, #4]
 800179c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017a0:	431a      	orrs	r2, r3
 80017a2:	604a      	str	r2, [r1, #4]
 80017a4:	e775      	b.n	8001692 <HAL_RCC_ClockConfig+0x2e>
 80017a6:	bf00      	nop
 80017a8:	40022000 	.word	0x40022000
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b4:	f8df 8174 	ldr.w	r8, [pc, #372]	; 800192c <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b8:	4c5d      	ldr	r4, [pc, #372]	; (8001930 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 80017ba:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017bc:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80017c0:	680a      	ldr	r2, [r1, #0]
 80017c2:	fa32 f503 	lsrs.w	r5, r2, r3
 80017c6:	d102      	bne.n	80017ce <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 80017c8:	b003      	add	sp, #12
 80017ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017ce:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 80017d2:	ea1a 0202 	ands.w	r2, sl, r2
 80017d6:	f000 809e 	beq.w	8001916 <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017da:	684d      	ldr	r5, [r1, #4]
 80017dc:	f025 0e10 	bic.w	lr, r5, #16
 80017e0:	f1be 0f02 	cmp.w	lr, #2
 80017e4:	d114      	bne.n	8001810 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 80017e6:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80017ea:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ee:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80017f2:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017f6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80017fa:	270f      	movs	r7, #15
 80017fc:	fa07 f70b 	lsl.w	r7, r7, fp
 8001800:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001804:	690e      	ldr	r6, [r1, #16]
 8001806:	fa06 f60b 	lsl.w	r6, r6, fp
 800180a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 800180c:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8001810:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001814:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001818:	2603      	movs	r6, #3
 800181a:	fa06 f70c 	lsl.w	r7, r6, ip
 800181e:	ea2b 0b07 	bic.w	fp, fp, r7
 8001822:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001824:	f005 0703 	and.w	r7, r5, #3
 8001828:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800182c:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001830:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001834:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8001838:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183a:	d811      	bhi.n	8001860 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 800183c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800183e:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	68cf      	ldr	r7, [r1, #12]
 8001844:	fa07 f70c 	lsl.w	r7, r7, ip
 8001848:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800184c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800184e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001850:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001854:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001858:	409f      	lsls	r7, r3
 800185a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800185e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001860:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001862:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001864:	688e      	ldr	r6, [r1, #8]
 8001866:	fa06 f60c 	lsl.w	r6, r6, ip
 800186a:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 800186c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186e:	00ee      	lsls	r6, r5, #3
 8001870:	d551      	bpl.n	8001916 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001876:	f046 0601 	orr.w	r6, r6, #1
 800187a:	f8c8 6018 	str.w	r6, [r8, #24]
 800187e:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001882:	f023 0703 	bic.w	r7, r3, #3
 8001886:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800188a:	f006 0601 	and.w	r6, r6, #1
 800188e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001892:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001894:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001898:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800189a:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800189c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80018a0:	f04f 0c0f 	mov.w	ip, #15
 80018a4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018a8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80018ac:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018b0:	d033      	beq.n	800191a <HAL_GPIO_Init+0x16a>
 80018b2:	4e20      	ldr	r6, [pc, #128]	; (8001934 <HAL_GPIO_Init+0x184>)
 80018b4:	42b0      	cmp	r0, r6
 80018b6:	d032      	beq.n	800191e <HAL_GPIO_Init+0x16e>
 80018b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80018bc:	42b0      	cmp	r0, r6
 80018be:	d030      	beq.n	8001922 <HAL_GPIO_Init+0x172>
 80018c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80018c4:	42b0      	cmp	r0, r6
 80018c6:	d02e      	beq.n	8001926 <HAL_GPIO_Init+0x176>
 80018c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80018cc:	42b0      	cmp	r0, r6
 80018ce:	bf0c      	ite	eq
 80018d0:	2604      	moveq	r6, #4
 80018d2:	2605      	movne	r6, #5
 80018d4:	fa06 f60e 	lsl.w	r6, r6, lr
 80018d8:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80018dc:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80018de:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e2:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80018e6:	bf0c      	ite	eq
 80018e8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80018ea:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 80018ec:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80018ee:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f0:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80018f4:	bf0c      	ite	eq
 80018f6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80018f8:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 80018fa:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80018fc:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018fe:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001902:	bf0c      	ite	eq
 8001904:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001906:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8001908:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800190a:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190c:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800190e:	bf54      	ite	pl
 8001910:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001912:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8001914:	60e6      	str	r6, [r4, #12]
    position++;
 8001916:	3301      	adds	r3, #1
 8001918:	e752      	b.n	80017c0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800191a:	2600      	movs	r6, #0
 800191c:	e7da      	b.n	80018d4 <HAL_GPIO_Init+0x124>
 800191e:	2601      	movs	r6, #1
 8001920:	e7d8      	b.n	80018d4 <HAL_GPIO_Init+0x124>
 8001922:	2602      	movs	r6, #2
 8001924:	e7d6      	b.n	80018d4 <HAL_GPIO_Init+0x124>
 8001926:	2603      	movs	r6, #3
 8001928:	e7d4      	b.n	80018d4 <HAL_GPIO_Init+0x124>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	40010400 	.word	0x40010400
 8001934:	48000400 	.word	0x48000400

08001938 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001938:	b10a      	cbz	r2, 800193e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800193a:	6181      	str	r1, [r0, #24]
 800193c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800193e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001940:	4770      	bx	lr
 8001942:	0000      	movs	r0, r0

08001944 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001944:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001946:	6881      	ldr	r1, [r0, #8]
 8001948:	69c3      	ldr	r3, [r0, #28]
{
 800194a:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800194c:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800194e:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001950:	4329      	orrs	r1, r5
 8001952:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001954:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001958:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800195a:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800195e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001960:	4321      	orrs	r1, r4
 8001962:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001964:	6851      	ldr	r1, [r2, #4]
 8001966:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001968:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800196a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800196e:	4321      	orrs	r1, r4
 8001970:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001972:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001974:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001976:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800197a:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800197c:	4321      	orrs	r1, r4
 800197e:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001980:	4962      	ldr	r1, [pc, #392]	; (8001b0c <UART_SetConfig+0x1c8>)
 8001982:	428a      	cmp	r2, r1
 8001984:	d116      	bne.n	80019b4 <UART_SetConfig+0x70>
 8001986:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 800198a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800198c:	f001 0103 	and.w	r1, r1, #3
 8001990:	3901      	subs	r1, #1
 8001992:	2902      	cmp	r1, #2
 8001994:	f200 80b2 	bhi.w	8001afc <UART_SetConfig+0x1b8>
 8001998:	4c5d      	ldr	r4, [pc, #372]	; (8001b10 <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800199a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800199e:	5c61      	ldrb	r1, [r4, r1]
 80019a0:	d177      	bne.n	8001a92 <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 80019a2:	2908      	cmp	r1, #8
 80019a4:	d872      	bhi.n	8001a8c <UART_SetConfig+0x148>
 80019a6:	e8df f001 	tbb	[pc, r1]
 80019aa:	acac      	.short	0xacac
 80019ac:	71ac7124 	.word	0x71ac7124
 80019b0:	7171      	.short	0x7171
 80019b2:	a4          	.byte	0xa4
 80019b3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019b4:	4957      	ldr	r1, [pc, #348]	; (8001b14 <UART_SetConfig+0x1d0>)
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d12c      	bne.n	8001a14 <UART_SetConfig+0xd0>
 80019ba:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 80019be:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80019c0:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 80019c4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80019c8:	f000 8090 	beq.w	8001aec <UART_SetConfig+0x1a8>
 80019cc:	d80b      	bhi.n	80019e6 <UART_SetConfig+0xa2>
 80019ce:	2900      	cmp	r1, #0
 80019d0:	f000 8094 	beq.w	8001afc <UART_SetConfig+0x1b8>
 80019d4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80019d8:	f000 8090 	beq.w	8001afc <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019e0:	d054      	beq.n	8001a8c <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80019e2:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80019e4:	e015      	b.n	8001a12 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019e6:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80019ea:	d1f7      	bne.n	80019dc <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019f0:	d166      	bne.n	8001ac0 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80019f2:	6841      	ldr	r1, [r0, #4]
 80019f4:	084b      	lsrs	r3, r1, #1
 80019f6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80019fa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a02:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a04:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001a06:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a0a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	60d3      	str	r3, [r2, #12]

}
 8001a12:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a14:	4940      	ldr	r1, [pc, #256]	; (8001b18 <UART_SetConfig+0x1d4>)
 8001a16:	428a      	cmp	r2, r1
 8001a18:	d110      	bne.n	8001a3c <UART_SetConfig+0xf8>
 8001a1a:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 8001a1e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001a20:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8001a24:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8001a28:	d060      	beq.n	8001aec <UART_SetConfig+0x1a8>
 8001a2a:	d804      	bhi.n	8001a36 <UART_SetConfig+0xf2>
 8001a2c:	2900      	cmp	r1, #0
 8001a2e:	d065      	beq.n	8001afc <UART_SetConfig+0x1b8>
 8001a30:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8001a34:	e7d0      	b.n	80019d8 <UART_SetConfig+0x94>
 8001a36:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8001a3a:	e7d6      	b.n	80019ea <UART_SetConfig+0xa6>
 8001a3c:	4937      	ldr	r1, [pc, #220]	; (8001b1c <UART_SetConfig+0x1d8>)
 8001a3e:	428a      	cmp	r2, r1
 8001a40:	d110      	bne.n	8001a64 <UART_SetConfig+0x120>
 8001a42:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 8001a46:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001a48:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8001a4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8001a50:	d04c      	beq.n	8001aec <UART_SetConfig+0x1a8>
 8001a52:	d804      	bhi.n	8001a5e <UART_SetConfig+0x11a>
 8001a54:	2900      	cmp	r1, #0
 8001a56:	d051      	beq.n	8001afc <UART_SetConfig+0x1b8>
 8001a58:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001a5c:	e7bc      	b.n	80019d8 <UART_SetConfig+0x94>
 8001a5e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8001a62:	e7c2      	b.n	80019ea <UART_SetConfig+0xa6>
 8001a64:	492e      	ldr	r1, [pc, #184]	; (8001b20 <UART_SetConfig+0x1dc>)
 8001a66:	428a      	cmp	r2, r1
 8001a68:	d1b8      	bne.n	80019dc <UART_SetConfig+0x98>
 8001a6a:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8001a6e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001a70:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 8001a74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001a78:	d038      	beq.n	8001aec <UART_SetConfig+0x1a8>
 8001a7a:	d804      	bhi.n	8001a86 <UART_SetConfig+0x142>
 8001a7c:	2900      	cmp	r1, #0
 8001a7e:	d03d      	beq.n	8001afc <UART_SetConfig+0x1b8>
 8001a80:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001a84:	e7a8      	b.n	80019d8 <UART_SetConfig+0x94>
 8001a86:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001a8a:	e7ae      	b.n	80019ea <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 8001a8c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e7b9      	b.n	8001a06 <UART_SetConfig+0xc2>
    switch (clocksource)
 8001a92:	2908      	cmp	r1, #8
 8001a94:	d8a5      	bhi.n	80019e2 <UART_SetConfig+0x9e>
 8001a96:	a301      	add	r3, pc, #4	; (adr r3, 8001a9c <UART_SetConfig+0x158>)
 8001a98:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001a9c:	08001ad9 	.word	0x08001ad9
 8001aa0:	08001ad9 	.word	0x08001ad9
 8001aa4:	08001ac1 	.word	0x08001ac1
 8001aa8:	080019e3 	.word	0x080019e3
 8001aac:	08001ad9 	.word	0x08001ad9
 8001ab0:	080019e3 	.word	0x080019e3
 8001ab4:	080019e3 	.word	0x080019e3
 8001ab8:	080019e3 	.word	0x080019e3
 8001abc:	08001ae3 	.word	0x08001ae3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ac0:	6841      	ldr	r1, [r0, #4]
 8001ac2:	084b      	lsrs	r3, r1, #1
 8001ac4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001ac8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001acc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ad4:	2000      	movs	r0, #0
        break;
 8001ad6:	e79c      	b.n	8001a12 <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ad8:	6841      	ldr	r1, [r0, #4]
 8001ada:	084b      	lsrs	r3, r1, #1
 8001adc:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8001ae0:	e7f4      	b.n	8001acc <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ae2:	6841      	ldr	r1, [r0, #4]
 8001ae4:	084b      	lsrs	r3, r1, #1
 8001ae6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001aea:	e7ef      	b.n	8001acc <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af0:	d1f7      	bne.n	8001ae2 <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001af2:	6841      	ldr	r1, [r0, #4]
 8001af4:	084b      	lsrs	r3, r1, #1
 8001af6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001afa:	e780      	b.n	80019fe <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b00:	d1ea      	bne.n	8001ad8 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b02:	6841      	ldr	r1, [r0, #4]
 8001b04:	084b      	lsrs	r3, r1, #1
 8001b06:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8001b0a:	e778      	b.n	80019fe <UART_SetConfig+0xba>
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	08003028 	.word	0x08003028
 8001b14:	40004400 	.word	0x40004400
 8001b18:	40004800 	.word	0x40004800
 8001b1c:	40004c00 	.word	0x40004c00
 8001b20:	40005000 	.word	0x40005000

08001b24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b26:	9f06      	ldr	r7, [sp, #24]
 8001b28:	4604      	mov	r4, r0
 8001b2a:	4615      	mov	r5, r2
 8001b2c:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b2e:	6822      	ldr	r2, [r4, #0]
 8001b30:	69d3      	ldr	r3, [r2, #28]
 8001b32:	ea31 0303 	bics.w	r3, r1, r3
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	42ab      	cmp	r3, r5
 8001b3e:	d001      	beq.n	8001b44 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001b40:	2000      	movs	r0, #0
 8001b42:	e014      	b.n	8001b6e <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8001b44:	1c7b      	adds	r3, r7, #1
 8001b46:	d0f3      	beq.n	8001b30 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b48:	b997      	cbnz	r7, 8001b70 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b52:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001b62:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001b66:	2300      	movs	r3, #0
 8001b68:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001b6c:	2003      	movs	r0, #3
}
 8001b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b70:	f7ff fb02 	bl	8001178 <HAL_GetTick>
 8001b74:	1b80      	subs	r0, r0, r6
 8001b76:	42b8      	cmp	r0, r7
 8001b78:	d9d9      	bls.n	8001b2e <UART_WaitOnFlagUntilTimeout+0xa>
 8001b7a:	e7e6      	b.n	8001b4a <UART_WaitOnFlagUntilTimeout+0x26>

08001b7c <UART_CheckIdleState>:
{
 8001b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001b7e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b80:	2100      	movs	r1, #0
 8001b82:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001b84:	f7ff faf8 	bl	8001178 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001b8e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b90:	d417      	bmi.n	8001bc2 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	075b      	lsls	r3, r3, #29
 8001b98:	d50a      	bpl.n	8001bb0 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	462b      	mov	r3, r5
 8001ba4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f7ff ffbb 	bl	8001b24 <UART_WaitOnFlagUntilTimeout>
 8001bae:	b9a0      	cbnz	r0, 8001bda <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001bb0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001bb2:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001bb4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001bb8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001bbc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001bc0:	e00c      	b.n	8001bdc <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	460a      	mov	r2, r1
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f7ff ffa7 	bl	8001b24 <UART_WaitOnFlagUntilTimeout>
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d0db      	beq.n	8001b92 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001bda:	2003      	movs	r0, #3
}
 8001bdc:	b003      	add	sp, #12
 8001bde:	bd30      	pop	{r4, r5, pc}

08001be0 <HAL_UART_Init>:
{
 8001be0:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001be2:	4604      	mov	r4, r0
 8001be4:	b328      	cbz	r0, 8001c32 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001be6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001bea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bee:	b90b      	cbnz	r3, 8001bf4 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8001bf0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8001bf4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001bf6:	2324      	movs	r3, #36	; 0x24
 8001bf8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff fe9d 	bl	8001944 <UART_SetConfig>
 8001c0a:	2801      	cmp	r0, #1
 8001c0c:	d011      	beq.n	8001c32 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c1e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8001c26:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001c28:	601a      	str	r2, [r3, #0]
}
 8001c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8001c2e:	f7ff bfa5 	b.w	8001b7c <UART_CheckIdleState>
}
 8001c32:	2001      	movs	r0, #1
 8001c34:	bd10      	pop	{r4, pc}

08001c36 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c38:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001c3a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001c3e:	2b20      	cmp	r3, #32
{
 8001c40:	460d      	mov	r5, r1
 8001c42:	4604      	mov	r4, r0
 8001c44:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001c46:	d14a      	bne.n	8001cde <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8001c48:	2d00      	cmp	r5, #0
 8001c4a:	d046      	beq.n	8001cda <HAL_UART_Transmit+0xa4>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d044      	beq.n	8001cda <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c50:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d042      	beq.n	8001cde <HAL_UART_Transmit+0xa8>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c62:	2321      	movs	r3, #33	; 0x21
 8001c64:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001c68:	f7ff fa86 	bl	8001178 <HAL_GetTick>

    huart->TxXferSize = Size;
 8001c6c:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001c70:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8001c72:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001c76:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001c7a:	b292      	uxth	r2, r2
 8001c7c:	b962      	cbnz	r2, 8001c98 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c7e:	9600      	str	r6, [sp, #0]
 8001c80:	463b      	mov	r3, r7
 8001c82:	2140      	movs	r1, #64	; 0x40
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7ff ff4d 	bl	8001b24 <UART_WaitOnFlagUntilTimeout>
 8001c8a:	b998      	cbnz	r0, 8001cb4 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c92:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8001c96:	e00e      	b.n	8001cb6 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8001c98:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c9c:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 8001c9e:	3a01      	subs	r2, #1
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff ff39 	bl	8001b24 <UART_WaitOnFlagUntilTimeout>
 8001cb2:	b110      	cbz	r0, 8001cba <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001cb4:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001cb6:	b003      	add	sp, #12
 8001cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cba:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001cbc:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc2:	d107      	bne.n	8001cd4 <HAL_UART_Transmit+0x9e>
 8001cc4:	6923      	ldr	r3, [r4, #16]
 8001cc6:	b92b      	cbnz	r3, 8001cd4 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001cc8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001cd0:	8513      	strh	r3, [r2, #40]	; 0x28
 8001cd2:	e7d0      	b.n	8001c76 <HAL_UART_Transmit+0x40>
 8001cd4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001cd8:	e7fa      	b.n	8001cd0 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e7eb      	b.n	8001cb6 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001cde:	2002      	movs	r0, #2
 8001ce0:	e7e9      	b.n	8001cb6 <HAL_UART_Transmit+0x80>

08001ce2 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001ce6:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001ce8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001cec:	2b20      	cmp	r3, #32
{
 8001cee:	460d      	mov	r5, r1
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001cf4:	d15c      	bne.n	8001db0 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 8001cf6:	2d00      	cmp	r5, #0
 8001cf8:	d058      	beq.n	8001dac <HAL_UART_Receive+0xca>
 8001cfa:	2a00      	cmp	r2, #0
 8001cfc:	d056      	beq.n	8001dac <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cfe:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d054      	beq.n	8001db0 <HAL_UART_Receive+0xce>
 8001d06:	2301      	movs	r3, #1
 8001d08:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8001d0c:	6803      	ldr	r3, [r0, #0]
 8001d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d12:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d18:	2322      	movs	r3, #34	; 0x22
 8001d1a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001d1e:	f7ff fa2b 	bl	8001178 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001d22:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8001d24:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001d2c:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8001d2e:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001d32:	d115      	bne.n	8001d60 <HAL_UART_Receive+0x7e>
 8001d34:	6923      	ldr	r3, [r4, #16]
 8001d36:	b98b      	cbnz	r3, 8001d5c <HAL_UART_Receive+0x7a>
 8001d38:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001d3c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001d40:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001d44:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001d48:	b280      	uxth	r0, r0
 8001d4a:	b980      	cbnz	r0, 8001d6e <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d52:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001d56:	b002      	add	sp, #8
 8001d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8001d5c:	23ff      	movs	r3, #255	; 0xff
 8001d5e:	e7ed      	b.n	8001d3c <HAL_UART_Receive+0x5a>
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ed      	bne.n	8001d40 <HAL_UART_Receive+0x5e>
 8001d64:	6923      	ldr	r3, [r4, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f8      	beq.n	8001d5c <HAL_UART_Receive+0x7a>
 8001d6a:	237f      	movs	r3, #127	; 0x7f
 8001d6c:	e7e6      	b.n	8001d3c <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8001d6e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d72:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 8001d74:	3a01      	subs	r2, #1
 8001d76:	b292      	uxth	r2, r2
 8001d78:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d7c:	4643      	mov	r3, r8
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2120      	movs	r1, #32
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7ff fece 	bl	8001b24 <UART_WaitOnFlagUntilTimeout>
 8001d88:	b9a0      	cbnz	r0, 8001db4 <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d8a:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001d8c:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d8e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001d92:	d106      	bne.n	8001da2 <HAL_UART_Receive+0xc0>
 8001d94:	6922      	ldr	r2, [r4, #16]
 8001d96:	b922      	cbnz	r2, 8001da2 <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001d98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d9a:	403b      	ands	r3, r7
 8001d9c:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8001da0:	e7d0      	b.n	8001d44 <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001da2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001da4:	403b      	ands	r3, r7
 8001da6:	f805 3b01 	strb.w	r3, [r5], #1
 8001daa:	e7cb      	b.n	8001d44 <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8001dac:	2001      	movs	r0, #1
 8001dae:	e7d2      	b.n	8001d56 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 8001db0:	2002      	movs	r0, #2
 8001db2:	e7d0      	b.n	8001d56 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8001db4:	2003      	movs	r0, #3
 8001db6:	e7ce      	b.n	8001d56 <HAL_UART_Receive+0x74>

08001db8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001db8:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <_sbrk+0x2c>)
 8001dba:	6811      	ldr	r1, [r2, #0]
{
 8001dbc:	b508      	push	{r3, lr}
 8001dbe:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001dc0:	b909      	cbnz	r1, 8001dc6 <_sbrk+0xe>
		heap_end = &end;
 8001dc2:	4909      	ldr	r1, [pc, #36]	; (8001de8 <_sbrk+0x30>)
 8001dc4:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001dc6:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001dc8:	4669      	mov	r1, sp
 8001dca:	4403      	add	r3, r0
 8001dcc:	428b      	cmp	r3, r1
 8001dce:	d906      	bls.n	8001dde <_sbrk+0x26>
	{
		errno = ENOMEM;
 8001dd0:	f000 f894 	bl	8001efc <__errno>
 8001dd4:	230c      	movs	r3, #12
 8001dd6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001ddc:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001dde:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001de0:	e7fc      	b.n	8001ddc <_sbrk+0x24>
 8001de2:	bf00      	nop
 8001de4:	20000940 	.word	0x20000940
 8001de8:	20000a20 	.word	0x20000a20

08001dec <KeyExpansion>:
  return rsbox[num];
}

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(void)
{
 8001dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dee:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <KeyExpansion+0xa0>)
 8001df0:	f852 3b04 	ldr.w	r3, [r2], #4
 8001df4:	f103 0110 	add.w	r1, r3, #16
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for(i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8001df8:	7818      	ldrb	r0, [r3, #0]
 8001dfa:	7010      	strb	r0, [r2, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8001dfc:	7858      	ldrb	r0, [r3, #1]
 8001dfe:	7050      	strb	r0, [r2, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8001e00:	7898      	ldrb	r0, [r3, #2]
 8001e02:	7090      	strb	r0, [r2, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8001e04:	78d8      	ldrb	r0, [r3, #3]
 8001e06:	70d0      	strb	r0, [r2, #3]
  for(i = 0; i < Nk; ++i)
 8001e08:	3304      	adds	r3, #4
 8001e0a:	428b      	cmp	r3, r1
 8001e0c:	f102 0204 	add.w	r2, r2, #4
 8001e10:	d1f2      	bne.n	8001df8 <KeyExpansion+0xc>
 8001e12:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <KeyExpansion+0xa4>)
  return sbox[num];
 8001e14:	481f      	ldr	r0, [pc, #124]	; (8001e94 <KeyExpansion+0xa8>)
  for(i = 0; i < Nk; ++i)
 8001e16:	2104      	movs	r1, #4
  }

  // All other round keys are found from the previous round keys.
  for(; (i < (Nb * (Nr + 1))); ++i)
  {
    for(j = 0; j < 4; ++j)
 8001e18:	681a      	ldr	r2, [r3, #0]
    {
      tempa[j]=RoundKey[(i-1) * 4 + j];
 8001e1a:	9201      	str	r2, [sp, #4]
    }
    if (i % Nk == 0)
 8001e1c:	078c      	lsls	r4, r1, #30
 8001e1e:	d116      	bne.n	8001e4e <KeyExpansion+0x62>
  return sbox[num];
 8001e20:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8001e24:	f3c2 2407 	ubfx	r4, r2, #8, #8
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
 8001e28:	5d45      	ldrb	r5, [r0, r5]
 8001e2a:	f88d 5005 	strb.w	r5, [sp, #5]
  return sbox[num];
 8001e2e:	0e15      	lsrs	r5, r2, #24
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	5d04      	ldrb	r4, [r0, r4]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
 8001e34:	5c82      	ldrb	r2, [r0, r2]
 8001e36:	f88d 2007 	strb.w	r2, [sp, #7]
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8001e3a:	eb00 0291 	add.w	r2, r0, r1, lsr #2
        tempa[2] = getSBoxValue(tempa[2]);
 8001e3e:	5d45      	ldrb	r5, [r0, r5]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8001e40:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
        tempa[2] = getSBoxValue(tempa[2]);
 8001e44:	f88d 5006 	strb.w	r5, [sp, #6]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8001e48:	4062      	eors	r2, r4
 8001e4a:	f88d 2004 	strb.w	r2, [sp, #4]
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 8001e4e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001e52:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8001e56:	4062      	eors	r2, r4
 8001e58:	711a      	strb	r2, [r3, #4]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 8001e5a:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001e5e:	f813 2c0b 	ldrb.w	r2, [r3, #-11]
 8001e62:	4062      	eors	r2, r4
 8001e64:	715a      	strb	r2, [r3, #5]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 8001e66:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8001e6a:	f813 2c0a 	ldrb.w	r2, [r3, #-10]
 8001e6e:	4062      	eors	r2, r4
 8001e70:	719a      	strb	r2, [r3, #6]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8001e72:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8001e76:	f813 2c09 	ldrb.w	r2, [r3, #-9]
  for(; (i < (Nb * (Nr + 1))); ++i)
 8001e7a:	3101      	adds	r1, #1
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8001e7c:	4062      	eors	r2, r4
  for(; (i < (Nb * (Nr + 1))); ++i)
 8001e7e:	292c      	cmp	r1, #44	; 0x2c
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8001e80:	71da      	strb	r2, [r3, #7]
  for(; (i < (Nb * (Nr + 1))); ++i)
 8001e82:	f103 0304 	add.w	r3, r3, #4
 8001e86:	d1c7      	bne.n	8001e18 <KeyExpansion+0x2c>
  }
}
 8001e88:	b003      	add	sp, #12
 8001e8a:	bd30      	pop	{r4, r5, pc}
 8001e8c:	20000944 	.word	0x20000944
 8001e90:	20000954 	.word	0x20000954
 8001e94:	20000000 	.word	0x20000000

08001e98 <AES128_ECB_indp_setkey>:
/* Public functions:                                                         */
/*****************************************************************************/

void AES128_ECB_indp_setkey(uint8_t* key)
{
  Key = key;
 8001e98:	4b01      	ldr	r3, [pc, #4]	; (8001ea0 <AES128_ECB_indp_setkey+0x8>)
 8001e9a:	6018      	str	r0, [r3, #0]
  KeyExpansion();
 8001e9c:	f7ff bfa6 	b.w	8001dec <KeyExpansion>
 8001ea0:	20000944 	.word	0x20000944

08001ea4 <aes_indep_init>:
uint8_t enckey[16];

void aes_indep_init(void)
{
	;
}
 8001ea4:	4770      	bx	lr

08001ea6 <aes_indep_key>:

void aes_indep_key(uint8_t * key)
{
    AES128_ECB_indp_setkey(key);
 8001ea6:	f7ff bff7 	b.w	8001e98 <AES128_ECB_indp_setkey>

08001eaa <aes_indep_enc_pretrigger>:
}

void aes_indep_enc_pretrigger(uint8_t * pt)
{
    ;
}
 8001eaa:	4770      	bx	lr

08001eac <aes_indep_enc_posttrigger>:
 8001eac:	4770      	bx	lr

08001eae <aes_indep_mask>:
    ;
}

void aes_indep_mask(uint8_t * m, uint8_t len)
{
}
 8001eae:	4770      	bx	lr

08001eb0 <Reset_Handler>:
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	e003      	b.n	8001ebc <LoopCopyDataInit>

08001eb4 <CopyDataInit>:
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <LoopForever+0x2>)
 8001eb6:	585b      	ldr	r3, [r3, r1]
 8001eb8:	5043      	str	r3, [r0, r1]
 8001eba:	3104      	adds	r1, #4

08001ebc <LoopCopyDataInit>:
 8001ebc:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <LoopForever+0x6>)
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <LoopForever+0xa>)
 8001ec0:	1842      	adds	r2, r0, r1
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3f6      	bcc.n	8001eb4 <CopyDataInit>
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <LoopForever+0xe>)
 8001ec8:	e002      	b.n	8001ed0 <LoopFillZerobss>

08001eca <FillZerobss>:
 8001eca:	2300      	movs	r3, #0
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	3204      	adds	r2, #4

08001ed0 <LoopFillZerobss>:
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <LoopForever+0x12>)
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d3f9      	bcc.n	8001eca <FillZerobss>
 8001ed6:	f3af 8000 	nop.w
 8001eda:	f000 f815 	bl	8001f08 <__libc_init_array>
 8001ede:	f7fe fee3 	bl	8000ca8 <main>

08001ee2 <LoopForever>:
 8001ee2:	e7fe      	b.n	8001ee2 <LoopForever>
 8001ee4:	080031b0 	.word	0x080031b0
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000270 	.word	0x20000270
 8001ef0:	20000270 	.word	0x20000270
 8001ef4:	20000a1c 	.word	0x20000a1c

08001ef8 <BusFault_Handler>:
 8001ef8:	e7fe      	b.n	8001ef8 <BusFault_Handler>
 8001efa:	0000      	movs	r0, r0

08001efc <__errno>:
 8001efc:	4b01      	ldr	r3, [pc, #4]	; (8001f04 <__errno+0x8>)
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	2000020c 	.word	0x2000020c

08001f08 <__libc_init_array>:
 8001f08:	b570      	push	{r4, r5, r6, lr}
 8001f0a:	4d0d      	ldr	r5, [pc, #52]	; (8001f40 <__libc_init_array+0x38>)
 8001f0c:	4c0d      	ldr	r4, [pc, #52]	; (8001f44 <__libc_init_array+0x3c>)
 8001f0e:	1b64      	subs	r4, r4, r5
 8001f10:	10a4      	asrs	r4, r4, #2
 8001f12:	2600      	movs	r6, #0
 8001f14:	42a6      	cmp	r6, r4
 8001f16:	d109      	bne.n	8001f2c <__libc_init_array+0x24>
 8001f18:	4d0b      	ldr	r5, [pc, #44]	; (8001f48 <__libc_init_array+0x40>)
 8001f1a:	4c0c      	ldr	r4, [pc, #48]	; (8001f4c <__libc_init_array+0x44>)
 8001f1c:	f001 f870 	bl	8003000 <_init>
 8001f20:	1b64      	subs	r4, r4, r5
 8001f22:	10a4      	asrs	r4, r4, #2
 8001f24:	2600      	movs	r6, #0
 8001f26:	42a6      	cmp	r6, r4
 8001f28:	d105      	bne.n	8001f36 <__libc_init_array+0x2e>
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
 8001f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f30:	4798      	blx	r3
 8001f32:	3601      	adds	r6, #1
 8001f34:	e7ee      	b.n	8001f14 <__libc_init_array+0xc>
 8001f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f3a:	4798      	blx	r3
 8001f3c:	3601      	adds	r6, #1
 8001f3e:	e7f2      	b.n	8001f26 <__libc_init_array+0x1e>
 8001f40:	080031a8 	.word	0x080031a8
 8001f44:	080031a8 	.word	0x080031a8
 8001f48:	080031a8 	.word	0x080031a8
 8001f4c:	080031ac 	.word	0x080031ac

08001f50 <memcpy>:
 8001f50:	440a      	add	r2, r1
 8001f52:	4291      	cmp	r1, r2
 8001f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f58:	d100      	bne.n	8001f5c <memcpy+0xc>
 8001f5a:	4770      	bx	lr
 8001f5c:	b510      	push	{r4, lr}
 8001f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f66:	4291      	cmp	r1, r2
 8001f68:	d1f9      	bne.n	8001f5e <memcpy+0xe>
 8001f6a:	bd10      	pop	{r4, pc}

08001f6c <memmove>:
 8001f6c:	4288      	cmp	r0, r1
 8001f6e:	b510      	push	{r4, lr}
 8001f70:	eb01 0402 	add.w	r4, r1, r2
 8001f74:	d902      	bls.n	8001f7c <memmove+0x10>
 8001f76:	4284      	cmp	r4, r0
 8001f78:	4623      	mov	r3, r4
 8001f7a:	d807      	bhi.n	8001f8c <memmove+0x20>
 8001f7c:	1e43      	subs	r3, r0, #1
 8001f7e:	42a1      	cmp	r1, r4
 8001f80:	d008      	beq.n	8001f94 <memmove+0x28>
 8001f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f8a:	e7f8      	b.n	8001f7e <memmove+0x12>
 8001f8c:	4402      	add	r2, r0
 8001f8e:	4601      	mov	r1, r0
 8001f90:	428a      	cmp	r2, r1
 8001f92:	d100      	bne.n	8001f96 <memmove+0x2a>
 8001f94:	bd10      	pop	{r4, pc}
 8001f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f9e:	e7f7      	b.n	8001f90 <memmove+0x24>

08001fa0 <memset>:
 8001fa0:	4402      	add	r2, r0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d100      	bne.n	8001faa <memset+0xa>
 8001fa8:	4770      	bx	lr
 8001faa:	f803 1b01 	strb.w	r1, [r3], #1
 8001fae:	e7f9      	b.n	8001fa4 <memset+0x4>

08001fb0 <srandom>:
 8001fb0:	b538      	push	{r3, r4, r5, lr}
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <srandom+0x44>)
 8001fb4:	681d      	ldr	r5, [r3, #0]
 8001fb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001fb8:	4604      	mov	r4, r0
 8001fba:	b9b3      	cbnz	r3, 8001fea <srandom+0x3a>
 8001fbc:	2018      	movs	r0, #24
 8001fbe:	f000 f855 	bl	800206c <malloc>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	63a8      	str	r0, [r5, #56]	; 0x38
 8001fc6:	b920      	cbnz	r0, 8001fd2 <srandom+0x22>
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <srandom+0x48>)
 8001fca:	480c      	ldr	r0, [pc, #48]	; (8001ffc <srandom+0x4c>)
 8001fcc:	2140      	movs	r1, #64	; 0x40
 8001fce:	f000 f81d 	bl	800200c <__assert_func>
 8001fd2:	490b      	ldr	r1, [pc, #44]	; (8002000 <srandom+0x50>)
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <srandom+0x54>)
 8001fd6:	e9c0 1300 	strd	r1, r3, [r0]
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <srandom+0x58>)
 8001fdc:	6083      	str	r3, [r0, #8]
 8001fde:	230b      	movs	r3, #11
 8001fe0:	8183      	strh	r3, [r0, #12]
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001fea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001fec:	2200      	movs	r2, #0
 8001fee:	611c      	str	r4, [r3, #16]
 8001ff0:	615a      	str	r2, [r3, #20]
 8001ff2:	bd38      	pop	{r3, r4, r5, pc}
 8001ff4:	2000020c 	.word	0x2000020c
 8001ff8:	08003040 	.word	0x08003040
 8001ffc:	08003057 	.word	0x08003057
 8002000:	abcd330e 	.word	0xabcd330e
 8002004:	e66d1234 	.word	0xe66d1234
 8002008:	0005deec 	.word	0x0005deec

0800200c <__assert_func>:
 800200c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800200e:	4614      	mov	r4, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <__assert_func+0x2c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4605      	mov	r5, r0
 8002018:	68d8      	ldr	r0, [r3, #12]
 800201a:	b14c      	cbz	r4, 8002030 <__assert_func+0x24>
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <__assert_func+0x30>)
 800201e:	9100      	str	r1, [sp, #0]
 8002020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002024:	4906      	ldr	r1, [pc, #24]	; (8002040 <__assert_func+0x34>)
 8002026:	462b      	mov	r3, r5
 8002028:	f000 f80e 	bl	8002048 <fiprintf>
 800202c:	f000 fc86 	bl	800293c <abort>
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__assert_func+0x38>)
 8002032:	461c      	mov	r4, r3
 8002034:	e7f3      	b.n	800201e <__assert_func+0x12>
 8002036:	bf00      	nop
 8002038:	2000020c 	.word	0x2000020c
 800203c:	080030d6 	.word	0x080030d6
 8002040:	080030e3 	.word	0x080030e3
 8002044:	08003111 	.word	0x08003111

08002048 <fiprintf>:
 8002048:	b40e      	push	{r1, r2, r3}
 800204a:	b503      	push	{r0, r1, lr}
 800204c:	4601      	mov	r1, r0
 800204e:	ab03      	add	r3, sp, #12
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <fiprintf+0x20>)
 8002052:	f853 2b04 	ldr.w	r2, [r3], #4
 8002056:	6800      	ldr	r0, [r0, #0]
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	f000 f8db 	bl	8002214 <_vfiprintf_r>
 800205e:	b002      	add	sp, #8
 8002060:	f85d eb04 	ldr.w	lr, [sp], #4
 8002064:	b003      	add	sp, #12
 8002066:	4770      	bx	lr
 8002068:	2000020c 	.word	0x2000020c

0800206c <malloc>:
 800206c:	4b02      	ldr	r3, [pc, #8]	; (8002078 <malloc+0xc>)
 800206e:	4601      	mov	r1, r0
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f000 b84d 	b.w	8002110 <_malloc_r>
 8002076:	bf00      	nop
 8002078:	2000020c 	.word	0x2000020c

0800207c <_free_r>:
 800207c:	b538      	push	{r3, r4, r5, lr}
 800207e:	4605      	mov	r5, r0
 8002080:	2900      	cmp	r1, #0
 8002082:	d041      	beq.n	8002108 <_free_r+0x8c>
 8002084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002088:	1f0c      	subs	r4, r1, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	bfb8      	it	lt
 800208e:	18e4      	addlt	r4, r4, r3
 8002090:	f000 fe78 	bl	8002d84 <__malloc_lock>
 8002094:	4a1d      	ldr	r2, [pc, #116]	; (800210c <_free_r+0x90>)
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	b933      	cbnz	r3, 80020a8 <_free_r+0x2c>
 800209a:	6063      	str	r3, [r4, #4]
 800209c:	6014      	str	r4, [r2, #0]
 800209e:	4628      	mov	r0, r5
 80020a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020a4:	f000 be74 	b.w	8002d90 <__malloc_unlock>
 80020a8:	42a3      	cmp	r3, r4
 80020aa:	d908      	bls.n	80020be <_free_r+0x42>
 80020ac:	6820      	ldr	r0, [r4, #0]
 80020ae:	1821      	adds	r1, r4, r0
 80020b0:	428b      	cmp	r3, r1
 80020b2:	bf01      	itttt	eq
 80020b4:	6819      	ldreq	r1, [r3, #0]
 80020b6:	685b      	ldreq	r3, [r3, #4]
 80020b8:	1809      	addeq	r1, r1, r0
 80020ba:	6021      	streq	r1, [r4, #0]
 80020bc:	e7ed      	b.n	800209a <_free_r+0x1e>
 80020be:	461a      	mov	r2, r3
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	b10b      	cbz	r3, 80020c8 <_free_r+0x4c>
 80020c4:	42a3      	cmp	r3, r4
 80020c6:	d9fa      	bls.n	80020be <_free_r+0x42>
 80020c8:	6811      	ldr	r1, [r2, #0]
 80020ca:	1850      	adds	r0, r2, r1
 80020cc:	42a0      	cmp	r0, r4
 80020ce:	d10b      	bne.n	80020e8 <_free_r+0x6c>
 80020d0:	6820      	ldr	r0, [r4, #0]
 80020d2:	4401      	add	r1, r0
 80020d4:	1850      	adds	r0, r2, r1
 80020d6:	4283      	cmp	r3, r0
 80020d8:	6011      	str	r1, [r2, #0]
 80020da:	d1e0      	bne.n	800209e <_free_r+0x22>
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	6053      	str	r3, [r2, #4]
 80020e2:	4401      	add	r1, r0
 80020e4:	6011      	str	r1, [r2, #0]
 80020e6:	e7da      	b.n	800209e <_free_r+0x22>
 80020e8:	d902      	bls.n	80020f0 <_free_r+0x74>
 80020ea:	230c      	movs	r3, #12
 80020ec:	602b      	str	r3, [r5, #0]
 80020ee:	e7d6      	b.n	800209e <_free_r+0x22>
 80020f0:	6820      	ldr	r0, [r4, #0]
 80020f2:	1821      	adds	r1, r4, r0
 80020f4:	428b      	cmp	r3, r1
 80020f6:	bf04      	itt	eq
 80020f8:	6819      	ldreq	r1, [r3, #0]
 80020fa:	685b      	ldreq	r3, [r3, #4]
 80020fc:	6063      	str	r3, [r4, #4]
 80020fe:	bf04      	itt	eq
 8002100:	1809      	addeq	r1, r1, r0
 8002102:	6021      	streq	r1, [r4, #0]
 8002104:	6054      	str	r4, [r2, #4]
 8002106:	e7ca      	b.n	800209e <_free_r+0x22>
 8002108:	bd38      	pop	{r3, r4, r5, pc}
 800210a:	bf00      	nop
 800210c:	20000a0c 	.word	0x20000a0c

08002110 <_malloc_r>:
 8002110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002112:	1ccd      	adds	r5, r1, #3
 8002114:	f025 0503 	bic.w	r5, r5, #3
 8002118:	3508      	adds	r5, #8
 800211a:	2d0c      	cmp	r5, #12
 800211c:	bf38      	it	cc
 800211e:	250c      	movcc	r5, #12
 8002120:	2d00      	cmp	r5, #0
 8002122:	4606      	mov	r6, r0
 8002124:	db01      	blt.n	800212a <_malloc_r+0x1a>
 8002126:	42a9      	cmp	r1, r5
 8002128:	d903      	bls.n	8002132 <_malloc_r+0x22>
 800212a:	230c      	movs	r3, #12
 800212c:	6033      	str	r3, [r6, #0]
 800212e:	2000      	movs	r0, #0
 8002130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002132:	f000 fe27 	bl	8002d84 <__malloc_lock>
 8002136:	4921      	ldr	r1, [pc, #132]	; (80021bc <_malloc_r+0xac>)
 8002138:	680a      	ldr	r2, [r1, #0]
 800213a:	4614      	mov	r4, r2
 800213c:	b99c      	cbnz	r4, 8002166 <_malloc_r+0x56>
 800213e:	4f20      	ldr	r7, [pc, #128]	; (80021c0 <_malloc_r+0xb0>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b923      	cbnz	r3, 800214e <_malloc_r+0x3e>
 8002144:	4621      	mov	r1, r4
 8002146:	4630      	mov	r0, r6
 8002148:	f000 fb28 	bl	800279c <_sbrk_r>
 800214c:	6038      	str	r0, [r7, #0]
 800214e:	4629      	mov	r1, r5
 8002150:	4630      	mov	r0, r6
 8002152:	f000 fb23 	bl	800279c <_sbrk_r>
 8002156:	1c43      	adds	r3, r0, #1
 8002158:	d123      	bne.n	80021a2 <_malloc_r+0x92>
 800215a:	230c      	movs	r3, #12
 800215c:	6033      	str	r3, [r6, #0]
 800215e:	4630      	mov	r0, r6
 8002160:	f000 fe16 	bl	8002d90 <__malloc_unlock>
 8002164:	e7e3      	b.n	800212e <_malloc_r+0x1e>
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	1b5b      	subs	r3, r3, r5
 800216a:	d417      	bmi.n	800219c <_malloc_r+0x8c>
 800216c:	2b0b      	cmp	r3, #11
 800216e:	d903      	bls.n	8002178 <_malloc_r+0x68>
 8002170:	6023      	str	r3, [r4, #0]
 8002172:	441c      	add	r4, r3
 8002174:	6025      	str	r5, [r4, #0]
 8002176:	e004      	b.n	8002182 <_malloc_r+0x72>
 8002178:	6863      	ldr	r3, [r4, #4]
 800217a:	42a2      	cmp	r2, r4
 800217c:	bf0c      	ite	eq
 800217e:	600b      	streq	r3, [r1, #0]
 8002180:	6053      	strne	r3, [r2, #4]
 8002182:	4630      	mov	r0, r6
 8002184:	f000 fe04 	bl	8002d90 <__malloc_unlock>
 8002188:	f104 000b 	add.w	r0, r4, #11
 800218c:	1d23      	adds	r3, r4, #4
 800218e:	f020 0007 	bic.w	r0, r0, #7
 8002192:	1ac2      	subs	r2, r0, r3
 8002194:	d0cc      	beq.n	8002130 <_malloc_r+0x20>
 8002196:	1a1b      	subs	r3, r3, r0
 8002198:	50a3      	str	r3, [r4, r2]
 800219a:	e7c9      	b.n	8002130 <_malloc_r+0x20>
 800219c:	4622      	mov	r2, r4
 800219e:	6864      	ldr	r4, [r4, #4]
 80021a0:	e7cc      	b.n	800213c <_malloc_r+0x2c>
 80021a2:	1cc4      	adds	r4, r0, #3
 80021a4:	f024 0403 	bic.w	r4, r4, #3
 80021a8:	42a0      	cmp	r0, r4
 80021aa:	d0e3      	beq.n	8002174 <_malloc_r+0x64>
 80021ac:	1a21      	subs	r1, r4, r0
 80021ae:	4630      	mov	r0, r6
 80021b0:	f000 faf4 	bl	800279c <_sbrk_r>
 80021b4:	3001      	adds	r0, #1
 80021b6:	d1dd      	bne.n	8002174 <_malloc_r+0x64>
 80021b8:	e7cf      	b.n	800215a <_malloc_r+0x4a>
 80021ba:	bf00      	nop
 80021bc:	20000a0c 	.word	0x20000a0c
 80021c0:	20000a10 	.word	0x20000a10

080021c4 <__sfputc_r>:
 80021c4:	6893      	ldr	r3, [r2, #8]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	b410      	push	{r4}
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	da07      	bge.n	80021e0 <__sfputc_r+0x1c>
 80021d0:	6994      	ldr	r4, [r2, #24]
 80021d2:	42a3      	cmp	r3, r4
 80021d4:	db01      	blt.n	80021da <__sfputc_r+0x16>
 80021d6:	290a      	cmp	r1, #10
 80021d8:	d102      	bne.n	80021e0 <__sfputc_r+0x1c>
 80021da:	bc10      	pop	{r4}
 80021dc:	f000 baee 	b.w	80027bc <__swbuf_r>
 80021e0:	6813      	ldr	r3, [r2, #0]
 80021e2:	1c58      	adds	r0, r3, #1
 80021e4:	6010      	str	r0, [r2, #0]
 80021e6:	7019      	strb	r1, [r3, #0]
 80021e8:	4608      	mov	r0, r1
 80021ea:	bc10      	pop	{r4}
 80021ec:	4770      	bx	lr

080021ee <__sfputs_r>:
 80021ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f0:	4606      	mov	r6, r0
 80021f2:	460f      	mov	r7, r1
 80021f4:	4614      	mov	r4, r2
 80021f6:	18d5      	adds	r5, r2, r3
 80021f8:	42ac      	cmp	r4, r5
 80021fa:	d101      	bne.n	8002200 <__sfputs_r+0x12>
 80021fc:	2000      	movs	r0, #0
 80021fe:	e007      	b.n	8002210 <__sfputs_r+0x22>
 8002200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002204:	463a      	mov	r2, r7
 8002206:	4630      	mov	r0, r6
 8002208:	f7ff ffdc 	bl	80021c4 <__sfputc_r>
 800220c:	1c43      	adds	r3, r0, #1
 800220e:	d1f3      	bne.n	80021f8 <__sfputs_r+0xa>
 8002210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002212:	0000      	movs	r0, r0

08002214 <_vfiprintf_r>:
 8002214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002218:	460d      	mov	r5, r1
 800221a:	b09d      	sub	sp, #116	; 0x74
 800221c:	4614      	mov	r4, r2
 800221e:	4698      	mov	r8, r3
 8002220:	4606      	mov	r6, r0
 8002222:	b118      	cbz	r0, 800222c <_vfiprintf_r+0x18>
 8002224:	6983      	ldr	r3, [r0, #24]
 8002226:	b90b      	cbnz	r3, 800222c <_vfiprintf_r+0x18>
 8002228:	f000 fca6 	bl	8002b78 <__sinit>
 800222c:	4b89      	ldr	r3, [pc, #548]	; (8002454 <_vfiprintf_r+0x240>)
 800222e:	429d      	cmp	r5, r3
 8002230:	d11b      	bne.n	800226a <_vfiprintf_r+0x56>
 8002232:	6875      	ldr	r5, [r6, #4]
 8002234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002236:	07d9      	lsls	r1, r3, #31
 8002238:	d405      	bmi.n	8002246 <_vfiprintf_r+0x32>
 800223a:	89ab      	ldrh	r3, [r5, #12]
 800223c:	059a      	lsls	r2, r3, #22
 800223e:	d402      	bmi.n	8002246 <_vfiprintf_r+0x32>
 8002240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002242:	f000 fd37 	bl	8002cb4 <__retarget_lock_acquire_recursive>
 8002246:	89ab      	ldrh	r3, [r5, #12]
 8002248:	071b      	lsls	r3, r3, #28
 800224a:	d501      	bpl.n	8002250 <_vfiprintf_r+0x3c>
 800224c:	692b      	ldr	r3, [r5, #16]
 800224e:	b9eb      	cbnz	r3, 800228c <_vfiprintf_r+0x78>
 8002250:	4629      	mov	r1, r5
 8002252:	4630      	mov	r0, r6
 8002254:	f000 fb04 	bl	8002860 <__swsetup_r>
 8002258:	b1c0      	cbz	r0, 800228c <_vfiprintf_r+0x78>
 800225a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800225c:	07dc      	lsls	r4, r3, #31
 800225e:	d50e      	bpl.n	800227e <_vfiprintf_r+0x6a>
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	b01d      	add	sp, #116	; 0x74
 8002266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800226a:	4b7b      	ldr	r3, [pc, #492]	; (8002458 <_vfiprintf_r+0x244>)
 800226c:	429d      	cmp	r5, r3
 800226e:	d101      	bne.n	8002274 <_vfiprintf_r+0x60>
 8002270:	68b5      	ldr	r5, [r6, #8]
 8002272:	e7df      	b.n	8002234 <_vfiprintf_r+0x20>
 8002274:	4b79      	ldr	r3, [pc, #484]	; (800245c <_vfiprintf_r+0x248>)
 8002276:	429d      	cmp	r5, r3
 8002278:	bf08      	it	eq
 800227a:	68f5      	ldreq	r5, [r6, #12]
 800227c:	e7da      	b.n	8002234 <_vfiprintf_r+0x20>
 800227e:	89ab      	ldrh	r3, [r5, #12]
 8002280:	0598      	lsls	r0, r3, #22
 8002282:	d4ed      	bmi.n	8002260 <_vfiprintf_r+0x4c>
 8002284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002286:	f000 fd16 	bl	8002cb6 <__retarget_lock_release_recursive>
 800228a:	e7e9      	b.n	8002260 <_vfiprintf_r+0x4c>
 800228c:	2300      	movs	r3, #0
 800228e:	9309      	str	r3, [sp, #36]	; 0x24
 8002290:	2320      	movs	r3, #32
 8002292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002296:	f8cd 800c 	str.w	r8, [sp, #12]
 800229a:	2330      	movs	r3, #48	; 0x30
 800229c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002460 <_vfiprintf_r+0x24c>
 80022a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022a4:	f04f 0901 	mov.w	r9, #1
 80022a8:	4623      	mov	r3, r4
 80022aa:	469a      	mov	sl, r3
 80022ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022b0:	b10a      	cbz	r2, 80022b6 <_vfiprintf_r+0xa2>
 80022b2:	2a25      	cmp	r2, #37	; 0x25
 80022b4:	d1f9      	bne.n	80022aa <_vfiprintf_r+0x96>
 80022b6:	ebba 0b04 	subs.w	fp, sl, r4
 80022ba:	d00b      	beq.n	80022d4 <_vfiprintf_r+0xc0>
 80022bc:	465b      	mov	r3, fp
 80022be:	4622      	mov	r2, r4
 80022c0:	4629      	mov	r1, r5
 80022c2:	4630      	mov	r0, r6
 80022c4:	f7ff ff93 	bl	80021ee <__sfputs_r>
 80022c8:	3001      	adds	r0, #1
 80022ca:	f000 80aa 	beq.w	8002422 <_vfiprintf_r+0x20e>
 80022ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022d0:	445a      	add	r2, fp
 80022d2:	9209      	str	r2, [sp, #36]	; 0x24
 80022d4:	f89a 3000 	ldrb.w	r3, [sl]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80a2 	beq.w	8002422 <_vfiprintf_r+0x20e>
 80022de:	2300      	movs	r3, #0
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022e8:	f10a 0a01 	add.w	sl, sl, #1
 80022ec:	9304      	str	r3, [sp, #16]
 80022ee:	9307      	str	r3, [sp, #28]
 80022f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022f4:	931a      	str	r3, [sp, #104]	; 0x68
 80022f6:	4654      	mov	r4, sl
 80022f8:	2205      	movs	r2, #5
 80022fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022fe:	4858      	ldr	r0, [pc, #352]	; (8002460 <_vfiprintf_r+0x24c>)
 8002300:	f7fd ff66 	bl	80001d0 <memchr>
 8002304:	9a04      	ldr	r2, [sp, #16]
 8002306:	b9d8      	cbnz	r0, 8002340 <_vfiprintf_r+0x12c>
 8002308:	06d1      	lsls	r1, r2, #27
 800230a:	bf44      	itt	mi
 800230c:	2320      	movmi	r3, #32
 800230e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002312:	0713      	lsls	r3, r2, #28
 8002314:	bf44      	itt	mi
 8002316:	232b      	movmi	r3, #43	; 0x2b
 8002318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800231c:	f89a 3000 	ldrb.w	r3, [sl]
 8002320:	2b2a      	cmp	r3, #42	; 0x2a
 8002322:	d015      	beq.n	8002350 <_vfiprintf_r+0x13c>
 8002324:	9a07      	ldr	r2, [sp, #28]
 8002326:	4654      	mov	r4, sl
 8002328:	2000      	movs	r0, #0
 800232a:	f04f 0c0a 	mov.w	ip, #10
 800232e:	4621      	mov	r1, r4
 8002330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002334:	3b30      	subs	r3, #48	; 0x30
 8002336:	2b09      	cmp	r3, #9
 8002338:	d94e      	bls.n	80023d8 <_vfiprintf_r+0x1c4>
 800233a:	b1b0      	cbz	r0, 800236a <_vfiprintf_r+0x156>
 800233c:	9207      	str	r2, [sp, #28]
 800233e:	e014      	b.n	800236a <_vfiprintf_r+0x156>
 8002340:	eba0 0308 	sub.w	r3, r0, r8
 8002344:	fa09 f303 	lsl.w	r3, r9, r3
 8002348:	4313      	orrs	r3, r2
 800234a:	9304      	str	r3, [sp, #16]
 800234c:	46a2      	mov	sl, r4
 800234e:	e7d2      	b.n	80022f6 <_vfiprintf_r+0xe2>
 8002350:	9b03      	ldr	r3, [sp, #12]
 8002352:	1d19      	adds	r1, r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	9103      	str	r1, [sp, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	bfbb      	ittet	lt
 800235c:	425b      	neglt	r3, r3
 800235e:	f042 0202 	orrlt.w	r2, r2, #2
 8002362:	9307      	strge	r3, [sp, #28]
 8002364:	9307      	strlt	r3, [sp, #28]
 8002366:	bfb8      	it	lt
 8002368:	9204      	strlt	r2, [sp, #16]
 800236a:	7823      	ldrb	r3, [r4, #0]
 800236c:	2b2e      	cmp	r3, #46	; 0x2e
 800236e:	d10c      	bne.n	800238a <_vfiprintf_r+0x176>
 8002370:	7863      	ldrb	r3, [r4, #1]
 8002372:	2b2a      	cmp	r3, #42	; 0x2a
 8002374:	d135      	bne.n	80023e2 <_vfiprintf_r+0x1ce>
 8002376:	9b03      	ldr	r3, [sp, #12]
 8002378:	1d1a      	adds	r2, r3, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	9203      	str	r2, [sp, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	bfb8      	it	lt
 8002382:	f04f 33ff 	movlt.w	r3, #4294967295
 8002386:	3402      	adds	r4, #2
 8002388:	9305      	str	r3, [sp, #20]
 800238a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002464 <_vfiprintf_r+0x250>
 800238e:	7821      	ldrb	r1, [r4, #0]
 8002390:	2203      	movs	r2, #3
 8002392:	4650      	mov	r0, sl
 8002394:	f7fd ff1c 	bl	80001d0 <memchr>
 8002398:	b140      	cbz	r0, 80023ac <_vfiprintf_r+0x198>
 800239a:	2340      	movs	r3, #64	; 0x40
 800239c:	eba0 000a 	sub.w	r0, r0, sl
 80023a0:	fa03 f000 	lsl.w	r0, r3, r0
 80023a4:	9b04      	ldr	r3, [sp, #16]
 80023a6:	4303      	orrs	r3, r0
 80023a8:	3401      	adds	r4, #1
 80023aa:	9304      	str	r3, [sp, #16]
 80023ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023b0:	482d      	ldr	r0, [pc, #180]	; (8002468 <_vfiprintf_r+0x254>)
 80023b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023b6:	2206      	movs	r2, #6
 80023b8:	f7fd ff0a 	bl	80001d0 <memchr>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d03f      	beq.n	8002440 <_vfiprintf_r+0x22c>
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <_vfiprintf_r+0x258>)
 80023c2:	bb1b      	cbnz	r3, 800240c <_vfiprintf_r+0x1f8>
 80023c4:	9b03      	ldr	r3, [sp, #12]
 80023c6:	3307      	adds	r3, #7
 80023c8:	f023 0307 	bic.w	r3, r3, #7
 80023cc:	3308      	adds	r3, #8
 80023ce:	9303      	str	r3, [sp, #12]
 80023d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023d2:	443b      	add	r3, r7
 80023d4:	9309      	str	r3, [sp, #36]	; 0x24
 80023d6:	e767      	b.n	80022a8 <_vfiprintf_r+0x94>
 80023d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80023dc:	460c      	mov	r4, r1
 80023de:	2001      	movs	r0, #1
 80023e0:	e7a5      	b.n	800232e <_vfiprintf_r+0x11a>
 80023e2:	2300      	movs	r3, #0
 80023e4:	3401      	adds	r4, #1
 80023e6:	9305      	str	r3, [sp, #20]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f04f 0c0a 	mov.w	ip, #10
 80023ee:	4620      	mov	r0, r4
 80023f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023f4:	3a30      	subs	r2, #48	; 0x30
 80023f6:	2a09      	cmp	r2, #9
 80023f8:	d903      	bls.n	8002402 <_vfiprintf_r+0x1ee>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0c5      	beq.n	800238a <_vfiprintf_r+0x176>
 80023fe:	9105      	str	r1, [sp, #20]
 8002400:	e7c3      	b.n	800238a <_vfiprintf_r+0x176>
 8002402:	fb0c 2101 	mla	r1, ip, r1, r2
 8002406:	4604      	mov	r4, r0
 8002408:	2301      	movs	r3, #1
 800240a:	e7f0      	b.n	80023ee <_vfiprintf_r+0x1da>
 800240c:	ab03      	add	r3, sp, #12
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	462a      	mov	r2, r5
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <_vfiprintf_r+0x25c>)
 8002414:	a904      	add	r1, sp, #16
 8002416:	4630      	mov	r0, r6
 8002418:	f3af 8000 	nop.w
 800241c:	4607      	mov	r7, r0
 800241e:	1c78      	adds	r0, r7, #1
 8002420:	d1d6      	bne.n	80023d0 <_vfiprintf_r+0x1bc>
 8002422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002424:	07d9      	lsls	r1, r3, #31
 8002426:	d405      	bmi.n	8002434 <_vfiprintf_r+0x220>
 8002428:	89ab      	ldrh	r3, [r5, #12]
 800242a:	059a      	lsls	r2, r3, #22
 800242c:	d402      	bmi.n	8002434 <_vfiprintf_r+0x220>
 800242e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002430:	f000 fc41 	bl	8002cb6 <__retarget_lock_release_recursive>
 8002434:	89ab      	ldrh	r3, [r5, #12]
 8002436:	065b      	lsls	r3, r3, #25
 8002438:	f53f af12 	bmi.w	8002260 <_vfiprintf_r+0x4c>
 800243c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800243e:	e711      	b.n	8002264 <_vfiprintf_r+0x50>
 8002440:	ab03      	add	r3, sp, #12
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	462a      	mov	r2, r5
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <_vfiprintf_r+0x25c>)
 8002448:	a904      	add	r1, sp, #16
 800244a:	4630      	mov	r0, r6
 800244c:	f000 f880 	bl	8002550 <_printf_i>
 8002450:	e7e4      	b.n	800241c <_vfiprintf_r+0x208>
 8002452:	bf00      	nop
 8002454:	08003168 	.word	0x08003168
 8002458:	08003188 	.word	0x08003188
 800245c:	08003148 	.word	0x08003148
 8002460:	08003112 	.word	0x08003112
 8002464:	08003118 	.word	0x08003118
 8002468:	0800311c 	.word	0x0800311c
 800246c:	00000000 	.word	0x00000000
 8002470:	080021ef 	.word	0x080021ef

08002474 <_printf_common>:
 8002474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002478:	4616      	mov	r6, r2
 800247a:	4699      	mov	r9, r3
 800247c:	688a      	ldr	r2, [r1, #8]
 800247e:	690b      	ldr	r3, [r1, #16]
 8002480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002484:	4293      	cmp	r3, r2
 8002486:	bfb8      	it	lt
 8002488:	4613      	movlt	r3, r2
 800248a:	6033      	str	r3, [r6, #0]
 800248c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002490:	4607      	mov	r7, r0
 8002492:	460c      	mov	r4, r1
 8002494:	b10a      	cbz	r2, 800249a <_printf_common+0x26>
 8002496:	3301      	adds	r3, #1
 8002498:	6033      	str	r3, [r6, #0]
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	0699      	lsls	r1, r3, #26
 800249e:	bf42      	ittt	mi
 80024a0:	6833      	ldrmi	r3, [r6, #0]
 80024a2:	3302      	addmi	r3, #2
 80024a4:	6033      	strmi	r3, [r6, #0]
 80024a6:	6825      	ldr	r5, [r4, #0]
 80024a8:	f015 0506 	ands.w	r5, r5, #6
 80024ac:	d106      	bne.n	80024bc <_printf_common+0x48>
 80024ae:	f104 0a19 	add.w	sl, r4, #25
 80024b2:	68e3      	ldr	r3, [r4, #12]
 80024b4:	6832      	ldr	r2, [r6, #0]
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	42ab      	cmp	r3, r5
 80024ba:	dc26      	bgt.n	800250a <_printf_common+0x96>
 80024bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024c0:	1e13      	subs	r3, r2, #0
 80024c2:	6822      	ldr	r2, [r4, #0]
 80024c4:	bf18      	it	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	0692      	lsls	r2, r2, #26
 80024ca:	d42b      	bmi.n	8002524 <_printf_common+0xb0>
 80024cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024d0:	4649      	mov	r1, r9
 80024d2:	4638      	mov	r0, r7
 80024d4:	47c0      	blx	r8
 80024d6:	3001      	adds	r0, #1
 80024d8:	d01e      	beq.n	8002518 <_printf_common+0xa4>
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	68e5      	ldr	r5, [r4, #12]
 80024de:	6832      	ldr	r2, [r6, #0]
 80024e0:	f003 0306 	and.w	r3, r3, #6
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	bf08      	it	eq
 80024e8:	1aad      	subeq	r5, r5, r2
 80024ea:	68a3      	ldr	r3, [r4, #8]
 80024ec:	6922      	ldr	r2, [r4, #16]
 80024ee:	bf0c      	ite	eq
 80024f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024f4:	2500      	movne	r5, #0
 80024f6:	4293      	cmp	r3, r2
 80024f8:	bfc4      	itt	gt
 80024fa:	1a9b      	subgt	r3, r3, r2
 80024fc:	18ed      	addgt	r5, r5, r3
 80024fe:	2600      	movs	r6, #0
 8002500:	341a      	adds	r4, #26
 8002502:	42b5      	cmp	r5, r6
 8002504:	d11a      	bne.n	800253c <_printf_common+0xc8>
 8002506:	2000      	movs	r0, #0
 8002508:	e008      	b.n	800251c <_printf_common+0xa8>
 800250a:	2301      	movs	r3, #1
 800250c:	4652      	mov	r2, sl
 800250e:	4649      	mov	r1, r9
 8002510:	4638      	mov	r0, r7
 8002512:	47c0      	blx	r8
 8002514:	3001      	adds	r0, #1
 8002516:	d103      	bne.n	8002520 <_printf_common+0xac>
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002520:	3501      	adds	r5, #1
 8002522:	e7c6      	b.n	80024b2 <_printf_common+0x3e>
 8002524:	18e1      	adds	r1, r4, r3
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	2030      	movs	r0, #48	; 0x30
 800252a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800252e:	4422      	add	r2, r4
 8002530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002538:	3302      	adds	r3, #2
 800253a:	e7c7      	b.n	80024cc <_printf_common+0x58>
 800253c:	2301      	movs	r3, #1
 800253e:	4622      	mov	r2, r4
 8002540:	4649      	mov	r1, r9
 8002542:	4638      	mov	r0, r7
 8002544:	47c0      	blx	r8
 8002546:	3001      	adds	r0, #1
 8002548:	d0e6      	beq.n	8002518 <_printf_common+0xa4>
 800254a:	3601      	adds	r6, #1
 800254c:	e7d9      	b.n	8002502 <_printf_common+0x8e>
 800254e:	0000      	movs	r0, r0

08002550 <_printf_i>:
 8002550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002554:	7e0f      	ldrb	r7, [r1, #24]
 8002556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002558:	2f78      	cmp	r7, #120	; 0x78
 800255a:	4691      	mov	r9, r2
 800255c:	4680      	mov	r8, r0
 800255e:	460c      	mov	r4, r1
 8002560:	469a      	mov	sl, r3
 8002562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002566:	d807      	bhi.n	8002578 <_printf_i+0x28>
 8002568:	2f62      	cmp	r7, #98	; 0x62
 800256a:	d80a      	bhi.n	8002582 <_printf_i+0x32>
 800256c:	2f00      	cmp	r7, #0
 800256e:	f000 80d8 	beq.w	8002722 <_printf_i+0x1d2>
 8002572:	2f58      	cmp	r7, #88	; 0x58
 8002574:	f000 80a3 	beq.w	80026be <_printf_i+0x16e>
 8002578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800257c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002580:	e03a      	b.n	80025f8 <_printf_i+0xa8>
 8002582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002586:	2b15      	cmp	r3, #21
 8002588:	d8f6      	bhi.n	8002578 <_printf_i+0x28>
 800258a:	a101      	add	r1, pc, #4	; (adr r1, 8002590 <_printf_i+0x40>)
 800258c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002590:	080025e9 	.word	0x080025e9
 8002594:	080025fd 	.word	0x080025fd
 8002598:	08002579 	.word	0x08002579
 800259c:	08002579 	.word	0x08002579
 80025a0:	08002579 	.word	0x08002579
 80025a4:	08002579 	.word	0x08002579
 80025a8:	080025fd 	.word	0x080025fd
 80025ac:	08002579 	.word	0x08002579
 80025b0:	08002579 	.word	0x08002579
 80025b4:	08002579 	.word	0x08002579
 80025b8:	08002579 	.word	0x08002579
 80025bc:	08002709 	.word	0x08002709
 80025c0:	0800262d 	.word	0x0800262d
 80025c4:	080026eb 	.word	0x080026eb
 80025c8:	08002579 	.word	0x08002579
 80025cc:	08002579 	.word	0x08002579
 80025d0:	0800272b 	.word	0x0800272b
 80025d4:	08002579 	.word	0x08002579
 80025d8:	0800262d 	.word	0x0800262d
 80025dc:	08002579 	.word	0x08002579
 80025e0:	08002579 	.word	0x08002579
 80025e4:	080026f3 	.word	0x080026f3
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	1d1a      	adds	r2, r3, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	602a      	str	r2, [r5, #0]
 80025f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0a3      	b.n	8002744 <_printf_i+0x1f4>
 80025fc:	6820      	ldr	r0, [r4, #0]
 80025fe:	6829      	ldr	r1, [r5, #0]
 8002600:	0606      	lsls	r6, r0, #24
 8002602:	f101 0304 	add.w	r3, r1, #4
 8002606:	d50a      	bpl.n	800261e <_printf_i+0xce>
 8002608:	680e      	ldr	r6, [r1, #0]
 800260a:	602b      	str	r3, [r5, #0]
 800260c:	2e00      	cmp	r6, #0
 800260e:	da03      	bge.n	8002618 <_printf_i+0xc8>
 8002610:	232d      	movs	r3, #45	; 0x2d
 8002612:	4276      	negs	r6, r6
 8002614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002618:	485e      	ldr	r0, [pc, #376]	; (8002794 <_printf_i+0x244>)
 800261a:	230a      	movs	r3, #10
 800261c:	e019      	b.n	8002652 <_printf_i+0x102>
 800261e:	680e      	ldr	r6, [r1, #0]
 8002620:	602b      	str	r3, [r5, #0]
 8002622:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002626:	bf18      	it	ne
 8002628:	b236      	sxthne	r6, r6
 800262a:	e7ef      	b.n	800260c <_printf_i+0xbc>
 800262c:	682b      	ldr	r3, [r5, #0]
 800262e:	6820      	ldr	r0, [r4, #0]
 8002630:	1d19      	adds	r1, r3, #4
 8002632:	6029      	str	r1, [r5, #0]
 8002634:	0601      	lsls	r1, r0, #24
 8002636:	d501      	bpl.n	800263c <_printf_i+0xec>
 8002638:	681e      	ldr	r6, [r3, #0]
 800263a:	e002      	b.n	8002642 <_printf_i+0xf2>
 800263c:	0646      	lsls	r6, r0, #25
 800263e:	d5fb      	bpl.n	8002638 <_printf_i+0xe8>
 8002640:	881e      	ldrh	r6, [r3, #0]
 8002642:	4854      	ldr	r0, [pc, #336]	; (8002794 <_printf_i+0x244>)
 8002644:	2f6f      	cmp	r7, #111	; 0x6f
 8002646:	bf0c      	ite	eq
 8002648:	2308      	moveq	r3, #8
 800264a:	230a      	movne	r3, #10
 800264c:	2100      	movs	r1, #0
 800264e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002652:	6865      	ldr	r5, [r4, #4]
 8002654:	60a5      	str	r5, [r4, #8]
 8002656:	2d00      	cmp	r5, #0
 8002658:	bfa2      	ittt	ge
 800265a:	6821      	ldrge	r1, [r4, #0]
 800265c:	f021 0104 	bicge.w	r1, r1, #4
 8002660:	6021      	strge	r1, [r4, #0]
 8002662:	b90e      	cbnz	r6, 8002668 <_printf_i+0x118>
 8002664:	2d00      	cmp	r5, #0
 8002666:	d04d      	beq.n	8002704 <_printf_i+0x1b4>
 8002668:	4615      	mov	r5, r2
 800266a:	fbb6 f1f3 	udiv	r1, r6, r3
 800266e:	fb03 6711 	mls	r7, r3, r1, r6
 8002672:	5dc7      	ldrb	r7, [r0, r7]
 8002674:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002678:	4637      	mov	r7, r6
 800267a:	42bb      	cmp	r3, r7
 800267c:	460e      	mov	r6, r1
 800267e:	d9f4      	bls.n	800266a <_printf_i+0x11a>
 8002680:	2b08      	cmp	r3, #8
 8002682:	d10b      	bne.n	800269c <_printf_i+0x14c>
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	07de      	lsls	r6, r3, #31
 8002688:	d508      	bpl.n	800269c <_printf_i+0x14c>
 800268a:	6923      	ldr	r3, [r4, #16]
 800268c:	6861      	ldr	r1, [r4, #4]
 800268e:	4299      	cmp	r1, r3
 8002690:	bfde      	ittt	le
 8002692:	2330      	movle	r3, #48	; 0x30
 8002694:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002698:	f105 35ff 	addle.w	r5, r5, #4294967295
 800269c:	1b52      	subs	r2, r2, r5
 800269e:	6122      	str	r2, [r4, #16]
 80026a0:	f8cd a000 	str.w	sl, [sp]
 80026a4:	464b      	mov	r3, r9
 80026a6:	aa03      	add	r2, sp, #12
 80026a8:	4621      	mov	r1, r4
 80026aa:	4640      	mov	r0, r8
 80026ac:	f7ff fee2 	bl	8002474 <_printf_common>
 80026b0:	3001      	adds	r0, #1
 80026b2:	d14c      	bne.n	800274e <_printf_i+0x1fe>
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	b004      	add	sp, #16
 80026ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026be:	4835      	ldr	r0, [pc, #212]	; (8002794 <_printf_i+0x244>)
 80026c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80026c4:	6829      	ldr	r1, [r5, #0]
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80026cc:	6029      	str	r1, [r5, #0]
 80026ce:	061d      	lsls	r5, r3, #24
 80026d0:	d514      	bpl.n	80026fc <_printf_i+0x1ac>
 80026d2:	07df      	lsls	r7, r3, #31
 80026d4:	bf44      	itt	mi
 80026d6:	f043 0320 	orrmi.w	r3, r3, #32
 80026da:	6023      	strmi	r3, [r4, #0]
 80026dc:	b91e      	cbnz	r6, 80026e6 <_printf_i+0x196>
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	f023 0320 	bic.w	r3, r3, #32
 80026e4:	6023      	str	r3, [r4, #0]
 80026e6:	2310      	movs	r3, #16
 80026e8:	e7b0      	b.n	800264c <_printf_i+0xfc>
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	f043 0320 	orr.w	r3, r3, #32
 80026f0:	6023      	str	r3, [r4, #0]
 80026f2:	2378      	movs	r3, #120	; 0x78
 80026f4:	4828      	ldr	r0, [pc, #160]	; (8002798 <_printf_i+0x248>)
 80026f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026fa:	e7e3      	b.n	80026c4 <_printf_i+0x174>
 80026fc:	0659      	lsls	r1, r3, #25
 80026fe:	bf48      	it	mi
 8002700:	b2b6      	uxthmi	r6, r6
 8002702:	e7e6      	b.n	80026d2 <_printf_i+0x182>
 8002704:	4615      	mov	r5, r2
 8002706:	e7bb      	b.n	8002680 <_printf_i+0x130>
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	6826      	ldr	r6, [r4, #0]
 800270c:	6961      	ldr	r1, [r4, #20]
 800270e:	1d18      	adds	r0, r3, #4
 8002710:	6028      	str	r0, [r5, #0]
 8002712:	0635      	lsls	r5, r6, #24
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	d501      	bpl.n	800271c <_printf_i+0x1cc>
 8002718:	6019      	str	r1, [r3, #0]
 800271a:	e002      	b.n	8002722 <_printf_i+0x1d2>
 800271c:	0670      	lsls	r0, r6, #25
 800271e:	d5fb      	bpl.n	8002718 <_printf_i+0x1c8>
 8002720:	8019      	strh	r1, [r3, #0]
 8002722:	2300      	movs	r3, #0
 8002724:	6123      	str	r3, [r4, #16]
 8002726:	4615      	mov	r5, r2
 8002728:	e7ba      	b.n	80026a0 <_printf_i+0x150>
 800272a:	682b      	ldr	r3, [r5, #0]
 800272c:	1d1a      	adds	r2, r3, #4
 800272e:	602a      	str	r2, [r5, #0]
 8002730:	681d      	ldr	r5, [r3, #0]
 8002732:	6862      	ldr	r2, [r4, #4]
 8002734:	2100      	movs	r1, #0
 8002736:	4628      	mov	r0, r5
 8002738:	f7fd fd4a 	bl	80001d0 <memchr>
 800273c:	b108      	cbz	r0, 8002742 <_printf_i+0x1f2>
 800273e:	1b40      	subs	r0, r0, r5
 8002740:	6060      	str	r0, [r4, #4]
 8002742:	6863      	ldr	r3, [r4, #4]
 8002744:	6123      	str	r3, [r4, #16]
 8002746:	2300      	movs	r3, #0
 8002748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800274c:	e7a8      	b.n	80026a0 <_printf_i+0x150>
 800274e:	6923      	ldr	r3, [r4, #16]
 8002750:	462a      	mov	r2, r5
 8002752:	4649      	mov	r1, r9
 8002754:	4640      	mov	r0, r8
 8002756:	47d0      	blx	sl
 8002758:	3001      	adds	r0, #1
 800275a:	d0ab      	beq.n	80026b4 <_printf_i+0x164>
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	079b      	lsls	r3, r3, #30
 8002760:	d413      	bmi.n	800278a <_printf_i+0x23a>
 8002762:	68e0      	ldr	r0, [r4, #12]
 8002764:	9b03      	ldr	r3, [sp, #12]
 8002766:	4298      	cmp	r0, r3
 8002768:	bfb8      	it	lt
 800276a:	4618      	movlt	r0, r3
 800276c:	e7a4      	b.n	80026b8 <_printf_i+0x168>
 800276e:	2301      	movs	r3, #1
 8002770:	4632      	mov	r2, r6
 8002772:	4649      	mov	r1, r9
 8002774:	4640      	mov	r0, r8
 8002776:	47d0      	blx	sl
 8002778:	3001      	adds	r0, #1
 800277a:	d09b      	beq.n	80026b4 <_printf_i+0x164>
 800277c:	3501      	adds	r5, #1
 800277e:	68e3      	ldr	r3, [r4, #12]
 8002780:	9903      	ldr	r1, [sp, #12]
 8002782:	1a5b      	subs	r3, r3, r1
 8002784:	42ab      	cmp	r3, r5
 8002786:	dcf2      	bgt.n	800276e <_printf_i+0x21e>
 8002788:	e7eb      	b.n	8002762 <_printf_i+0x212>
 800278a:	2500      	movs	r5, #0
 800278c:	f104 0619 	add.w	r6, r4, #25
 8002790:	e7f5      	b.n	800277e <_printf_i+0x22e>
 8002792:	bf00      	nop
 8002794:	08003123 	.word	0x08003123
 8002798:	08003134 	.word	0x08003134

0800279c <_sbrk_r>:
 800279c:	b538      	push	{r3, r4, r5, lr}
 800279e:	4d06      	ldr	r5, [pc, #24]	; (80027b8 <_sbrk_r+0x1c>)
 80027a0:	2300      	movs	r3, #0
 80027a2:	4604      	mov	r4, r0
 80027a4:	4608      	mov	r0, r1
 80027a6:	602b      	str	r3, [r5, #0]
 80027a8:	f7ff fb06 	bl	8001db8 <_sbrk>
 80027ac:	1c43      	adds	r3, r0, #1
 80027ae:	d102      	bne.n	80027b6 <_sbrk_r+0x1a>
 80027b0:	682b      	ldr	r3, [r5, #0]
 80027b2:	b103      	cbz	r3, 80027b6 <_sbrk_r+0x1a>
 80027b4:	6023      	str	r3, [r4, #0]
 80027b6:	bd38      	pop	{r3, r4, r5, pc}
 80027b8:	20000a18 	.word	0x20000a18

080027bc <__swbuf_r>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	460e      	mov	r6, r1
 80027c0:	4614      	mov	r4, r2
 80027c2:	4605      	mov	r5, r0
 80027c4:	b118      	cbz	r0, 80027ce <__swbuf_r+0x12>
 80027c6:	6983      	ldr	r3, [r0, #24]
 80027c8:	b90b      	cbnz	r3, 80027ce <__swbuf_r+0x12>
 80027ca:	f000 f9d5 	bl	8002b78 <__sinit>
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <__swbuf_r+0x98>)
 80027d0:	429c      	cmp	r4, r3
 80027d2:	d12b      	bne.n	800282c <__swbuf_r+0x70>
 80027d4:	686c      	ldr	r4, [r5, #4]
 80027d6:	69a3      	ldr	r3, [r4, #24]
 80027d8:	60a3      	str	r3, [r4, #8]
 80027da:	89a3      	ldrh	r3, [r4, #12]
 80027dc:	071a      	lsls	r2, r3, #28
 80027de:	d52f      	bpl.n	8002840 <__swbuf_r+0x84>
 80027e0:	6923      	ldr	r3, [r4, #16]
 80027e2:	b36b      	cbz	r3, 8002840 <__swbuf_r+0x84>
 80027e4:	6923      	ldr	r3, [r4, #16]
 80027e6:	6820      	ldr	r0, [r4, #0]
 80027e8:	1ac0      	subs	r0, r0, r3
 80027ea:	6963      	ldr	r3, [r4, #20]
 80027ec:	b2f6      	uxtb	r6, r6
 80027ee:	4283      	cmp	r3, r0
 80027f0:	4637      	mov	r7, r6
 80027f2:	dc04      	bgt.n	80027fe <__swbuf_r+0x42>
 80027f4:	4621      	mov	r1, r4
 80027f6:	4628      	mov	r0, r5
 80027f8:	f000 f92a 	bl	8002a50 <_fflush_r>
 80027fc:	bb30      	cbnz	r0, 800284c <__swbuf_r+0x90>
 80027fe:	68a3      	ldr	r3, [r4, #8]
 8002800:	3b01      	subs	r3, #1
 8002802:	60a3      	str	r3, [r4, #8]
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	6022      	str	r2, [r4, #0]
 800280a:	701e      	strb	r6, [r3, #0]
 800280c:	6963      	ldr	r3, [r4, #20]
 800280e:	3001      	adds	r0, #1
 8002810:	4283      	cmp	r3, r0
 8002812:	d004      	beq.n	800281e <__swbuf_r+0x62>
 8002814:	89a3      	ldrh	r3, [r4, #12]
 8002816:	07db      	lsls	r3, r3, #31
 8002818:	d506      	bpl.n	8002828 <__swbuf_r+0x6c>
 800281a:	2e0a      	cmp	r6, #10
 800281c:	d104      	bne.n	8002828 <__swbuf_r+0x6c>
 800281e:	4621      	mov	r1, r4
 8002820:	4628      	mov	r0, r5
 8002822:	f000 f915 	bl	8002a50 <_fflush_r>
 8002826:	b988      	cbnz	r0, 800284c <__swbuf_r+0x90>
 8002828:	4638      	mov	r0, r7
 800282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <__swbuf_r+0x9c>)
 800282e:	429c      	cmp	r4, r3
 8002830:	d101      	bne.n	8002836 <__swbuf_r+0x7a>
 8002832:	68ac      	ldr	r4, [r5, #8]
 8002834:	e7cf      	b.n	80027d6 <__swbuf_r+0x1a>
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <__swbuf_r+0xa0>)
 8002838:	429c      	cmp	r4, r3
 800283a:	bf08      	it	eq
 800283c:	68ec      	ldreq	r4, [r5, #12]
 800283e:	e7ca      	b.n	80027d6 <__swbuf_r+0x1a>
 8002840:	4621      	mov	r1, r4
 8002842:	4628      	mov	r0, r5
 8002844:	f000 f80c 	bl	8002860 <__swsetup_r>
 8002848:	2800      	cmp	r0, #0
 800284a:	d0cb      	beq.n	80027e4 <__swbuf_r+0x28>
 800284c:	f04f 37ff 	mov.w	r7, #4294967295
 8002850:	e7ea      	b.n	8002828 <__swbuf_r+0x6c>
 8002852:	bf00      	nop
 8002854:	08003168 	.word	0x08003168
 8002858:	08003188 	.word	0x08003188
 800285c:	08003148 	.word	0x08003148

08002860 <__swsetup_r>:
 8002860:	4b32      	ldr	r3, [pc, #200]	; (800292c <__swsetup_r+0xcc>)
 8002862:	b570      	push	{r4, r5, r6, lr}
 8002864:	681d      	ldr	r5, [r3, #0]
 8002866:	4606      	mov	r6, r0
 8002868:	460c      	mov	r4, r1
 800286a:	b125      	cbz	r5, 8002876 <__swsetup_r+0x16>
 800286c:	69ab      	ldr	r3, [r5, #24]
 800286e:	b913      	cbnz	r3, 8002876 <__swsetup_r+0x16>
 8002870:	4628      	mov	r0, r5
 8002872:	f000 f981 	bl	8002b78 <__sinit>
 8002876:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <__swsetup_r+0xd0>)
 8002878:	429c      	cmp	r4, r3
 800287a:	d10f      	bne.n	800289c <__swsetup_r+0x3c>
 800287c:	686c      	ldr	r4, [r5, #4]
 800287e:	89a3      	ldrh	r3, [r4, #12]
 8002880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002884:	0719      	lsls	r1, r3, #28
 8002886:	d42c      	bmi.n	80028e2 <__swsetup_r+0x82>
 8002888:	06dd      	lsls	r5, r3, #27
 800288a:	d411      	bmi.n	80028b0 <__swsetup_r+0x50>
 800288c:	2309      	movs	r3, #9
 800288e:	6033      	str	r3, [r6, #0]
 8002890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002894:	81a3      	strh	r3, [r4, #12]
 8002896:	f04f 30ff 	mov.w	r0, #4294967295
 800289a:	e03e      	b.n	800291a <__swsetup_r+0xba>
 800289c:	4b25      	ldr	r3, [pc, #148]	; (8002934 <__swsetup_r+0xd4>)
 800289e:	429c      	cmp	r4, r3
 80028a0:	d101      	bne.n	80028a6 <__swsetup_r+0x46>
 80028a2:	68ac      	ldr	r4, [r5, #8]
 80028a4:	e7eb      	b.n	800287e <__swsetup_r+0x1e>
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <__swsetup_r+0xd8>)
 80028a8:	429c      	cmp	r4, r3
 80028aa:	bf08      	it	eq
 80028ac:	68ec      	ldreq	r4, [r5, #12]
 80028ae:	e7e6      	b.n	800287e <__swsetup_r+0x1e>
 80028b0:	0758      	lsls	r0, r3, #29
 80028b2:	d512      	bpl.n	80028da <__swsetup_r+0x7a>
 80028b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028b6:	b141      	cbz	r1, 80028ca <__swsetup_r+0x6a>
 80028b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028bc:	4299      	cmp	r1, r3
 80028be:	d002      	beq.n	80028c6 <__swsetup_r+0x66>
 80028c0:	4630      	mov	r0, r6
 80028c2:	f7ff fbdb 	bl	800207c <_free_r>
 80028c6:	2300      	movs	r3, #0
 80028c8:	6363      	str	r3, [r4, #52]	; 0x34
 80028ca:	89a3      	ldrh	r3, [r4, #12]
 80028cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028d0:	81a3      	strh	r3, [r4, #12]
 80028d2:	2300      	movs	r3, #0
 80028d4:	6063      	str	r3, [r4, #4]
 80028d6:	6923      	ldr	r3, [r4, #16]
 80028d8:	6023      	str	r3, [r4, #0]
 80028da:	89a3      	ldrh	r3, [r4, #12]
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	81a3      	strh	r3, [r4, #12]
 80028e2:	6923      	ldr	r3, [r4, #16]
 80028e4:	b94b      	cbnz	r3, 80028fa <__swsetup_r+0x9a>
 80028e6:	89a3      	ldrh	r3, [r4, #12]
 80028e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f0:	d003      	beq.n	80028fa <__swsetup_r+0x9a>
 80028f2:	4621      	mov	r1, r4
 80028f4:	4630      	mov	r0, r6
 80028f6:	f000 fa05 	bl	8002d04 <__smakebuf_r>
 80028fa:	89a0      	ldrh	r0, [r4, #12]
 80028fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002900:	f010 0301 	ands.w	r3, r0, #1
 8002904:	d00a      	beq.n	800291c <__swsetup_r+0xbc>
 8002906:	2300      	movs	r3, #0
 8002908:	60a3      	str	r3, [r4, #8]
 800290a:	6963      	ldr	r3, [r4, #20]
 800290c:	425b      	negs	r3, r3
 800290e:	61a3      	str	r3, [r4, #24]
 8002910:	6923      	ldr	r3, [r4, #16]
 8002912:	b943      	cbnz	r3, 8002926 <__swsetup_r+0xc6>
 8002914:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002918:	d1ba      	bne.n	8002890 <__swsetup_r+0x30>
 800291a:	bd70      	pop	{r4, r5, r6, pc}
 800291c:	0781      	lsls	r1, r0, #30
 800291e:	bf58      	it	pl
 8002920:	6963      	ldrpl	r3, [r4, #20]
 8002922:	60a3      	str	r3, [r4, #8]
 8002924:	e7f4      	b.n	8002910 <__swsetup_r+0xb0>
 8002926:	2000      	movs	r0, #0
 8002928:	e7f7      	b.n	800291a <__swsetup_r+0xba>
 800292a:	bf00      	nop
 800292c:	2000020c 	.word	0x2000020c
 8002930:	08003168 	.word	0x08003168
 8002934:	08003188 	.word	0x08003188
 8002938:	08003148 	.word	0x08003148

0800293c <abort>:
 800293c:	b508      	push	{r3, lr}
 800293e:	2006      	movs	r0, #6
 8002940:	f000 fa54 	bl	8002dec <raise>
 8002944:	2001      	movs	r0, #1
 8002946:	f000 fb59 	bl	8002ffc <_exit>
 800294a:	0000      	movs	r0, r0

0800294c <__sflush_r>:
 800294c:	898a      	ldrh	r2, [r1, #12]
 800294e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002950:	4605      	mov	r5, r0
 8002952:	0710      	lsls	r0, r2, #28
 8002954:	460c      	mov	r4, r1
 8002956:	d457      	bmi.n	8002a08 <__sflush_r+0xbc>
 8002958:	684b      	ldr	r3, [r1, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	dc04      	bgt.n	8002968 <__sflush_r+0x1c>
 800295e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	dc01      	bgt.n	8002968 <__sflush_r+0x1c>
 8002964:	2000      	movs	r0, #0
 8002966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800296a:	2e00      	cmp	r6, #0
 800296c:	d0fa      	beq.n	8002964 <__sflush_r+0x18>
 800296e:	2300      	movs	r3, #0
 8002970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002974:	682f      	ldr	r7, [r5, #0]
 8002976:	602b      	str	r3, [r5, #0]
 8002978:	d032      	beq.n	80029e0 <__sflush_r+0x94>
 800297a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800297c:	89a3      	ldrh	r3, [r4, #12]
 800297e:	075a      	lsls	r2, r3, #29
 8002980:	d505      	bpl.n	800298e <__sflush_r+0x42>
 8002982:	6863      	ldr	r3, [r4, #4]
 8002984:	1ac0      	subs	r0, r0, r3
 8002986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002988:	b10b      	cbz	r3, 800298e <__sflush_r+0x42>
 800298a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800298c:	1ac0      	subs	r0, r0, r3
 800298e:	2300      	movs	r3, #0
 8002990:	4602      	mov	r2, r0
 8002992:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002994:	6a21      	ldr	r1, [r4, #32]
 8002996:	4628      	mov	r0, r5
 8002998:	47b0      	blx	r6
 800299a:	1c43      	adds	r3, r0, #1
 800299c:	89a3      	ldrh	r3, [r4, #12]
 800299e:	d106      	bne.n	80029ae <__sflush_r+0x62>
 80029a0:	6829      	ldr	r1, [r5, #0]
 80029a2:	291d      	cmp	r1, #29
 80029a4:	d82c      	bhi.n	8002a00 <__sflush_r+0xb4>
 80029a6:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <__sflush_r+0x100>)
 80029a8:	40ca      	lsrs	r2, r1
 80029aa:	07d6      	lsls	r6, r2, #31
 80029ac:	d528      	bpl.n	8002a00 <__sflush_r+0xb4>
 80029ae:	2200      	movs	r2, #0
 80029b0:	6062      	str	r2, [r4, #4]
 80029b2:	04d9      	lsls	r1, r3, #19
 80029b4:	6922      	ldr	r2, [r4, #16]
 80029b6:	6022      	str	r2, [r4, #0]
 80029b8:	d504      	bpl.n	80029c4 <__sflush_r+0x78>
 80029ba:	1c42      	adds	r2, r0, #1
 80029bc:	d101      	bne.n	80029c2 <__sflush_r+0x76>
 80029be:	682b      	ldr	r3, [r5, #0]
 80029c0:	b903      	cbnz	r3, 80029c4 <__sflush_r+0x78>
 80029c2:	6560      	str	r0, [r4, #84]	; 0x54
 80029c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029c6:	602f      	str	r7, [r5, #0]
 80029c8:	2900      	cmp	r1, #0
 80029ca:	d0cb      	beq.n	8002964 <__sflush_r+0x18>
 80029cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029d0:	4299      	cmp	r1, r3
 80029d2:	d002      	beq.n	80029da <__sflush_r+0x8e>
 80029d4:	4628      	mov	r0, r5
 80029d6:	f7ff fb51 	bl	800207c <_free_r>
 80029da:	2000      	movs	r0, #0
 80029dc:	6360      	str	r0, [r4, #52]	; 0x34
 80029de:	e7c2      	b.n	8002966 <__sflush_r+0x1a>
 80029e0:	6a21      	ldr	r1, [r4, #32]
 80029e2:	2301      	movs	r3, #1
 80029e4:	4628      	mov	r0, r5
 80029e6:	47b0      	blx	r6
 80029e8:	1c41      	adds	r1, r0, #1
 80029ea:	d1c7      	bne.n	800297c <__sflush_r+0x30>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0c4      	beq.n	800297c <__sflush_r+0x30>
 80029f2:	2b1d      	cmp	r3, #29
 80029f4:	d001      	beq.n	80029fa <__sflush_r+0xae>
 80029f6:	2b16      	cmp	r3, #22
 80029f8:	d101      	bne.n	80029fe <__sflush_r+0xb2>
 80029fa:	602f      	str	r7, [r5, #0]
 80029fc:	e7b2      	b.n	8002964 <__sflush_r+0x18>
 80029fe:	89a3      	ldrh	r3, [r4, #12]
 8002a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a04:	81a3      	strh	r3, [r4, #12]
 8002a06:	e7ae      	b.n	8002966 <__sflush_r+0x1a>
 8002a08:	690f      	ldr	r7, [r1, #16]
 8002a0a:	2f00      	cmp	r7, #0
 8002a0c:	d0aa      	beq.n	8002964 <__sflush_r+0x18>
 8002a0e:	0793      	lsls	r3, r2, #30
 8002a10:	680e      	ldr	r6, [r1, #0]
 8002a12:	bf08      	it	eq
 8002a14:	694b      	ldreq	r3, [r1, #20]
 8002a16:	600f      	str	r7, [r1, #0]
 8002a18:	bf18      	it	ne
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	1bf6      	subs	r6, r6, r7
 8002a1e:	608b      	str	r3, [r1, #8]
 8002a20:	2e00      	cmp	r6, #0
 8002a22:	dd9f      	ble.n	8002964 <__sflush_r+0x18>
 8002a24:	6a21      	ldr	r1, [r4, #32]
 8002a26:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002a2a:	4633      	mov	r3, r6
 8002a2c:	463a      	mov	r2, r7
 8002a2e:	4628      	mov	r0, r5
 8002a30:	47e0      	blx	ip
 8002a32:	2800      	cmp	r0, #0
 8002a34:	dc06      	bgt.n	8002a44 <__sflush_r+0xf8>
 8002a36:	89a3      	ldrh	r3, [r4, #12]
 8002a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a3c:	81a3      	strh	r3, [r4, #12]
 8002a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a42:	e790      	b.n	8002966 <__sflush_r+0x1a>
 8002a44:	4407      	add	r7, r0
 8002a46:	1a36      	subs	r6, r6, r0
 8002a48:	e7ea      	b.n	8002a20 <__sflush_r+0xd4>
 8002a4a:	bf00      	nop
 8002a4c:	20400001 	.word	0x20400001

08002a50 <_fflush_r>:
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	690b      	ldr	r3, [r1, #16]
 8002a54:	4605      	mov	r5, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	b913      	cbnz	r3, 8002a60 <_fflush_r+0x10>
 8002a5a:	2500      	movs	r5, #0
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	bd38      	pop	{r3, r4, r5, pc}
 8002a60:	b118      	cbz	r0, 8002a6a <_fflush_r+0x1a>
 8002a62:	6983      	ldr	r3, [r0, #24]
 8002a64:	b90b      	cbnz	r3, 8002a6a <_fflush_r+0x1a>
 8002a66:	f000 f887 	bl	8002b78 <__sinit>
 8002a6a:	4b14      	ldr	r3, [pc, #80]	; (8002abc <_fflush_r+0x6c>)
 8002a6c:	429c      	cmp	r4, r3
 8002a6e:	d11b      	bne.n	8002aa8 <_fflush_r+0x58>
 8002a70:	686c      	ldr	r4, [r5, #4]
 8002a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ef      	beq.n	8002a5a <_fflush_r+0xa>
 8002a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a7c:	07d0      	lsls	r0, r2, #31
 8002a7e:	d404      	bmi.n	8002a8a <_fflush_r+0x3a>
 8002a80:	0599      	lsls	r1, r3, #22
 8002a82:	d402      	bmi.n	8002a8a <_fflush_r+0x3a>
 8002a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a86:	f000 f915 	bl	8002cb4 <__retarget_lock_acquire_recursive>
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	f7ff ff5d 	bl	800294c <__sflush_r>
 8002a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a94:	07da      	lsls	r2, r3, #31
 8002a96:	4605      	mov	r5, r0
 8002a98:	d4e0      	bmi.n	8002a5c <_fflush_r+0xc>
 8002a9a:	89a3      	ldrh	r3, [r4, #12]
 8002a9c:	059b      	lsls	r3, r3, #22
 8002a9e:	d4dd      	bmi.n	8002a5c <_fflush_r+0xc>
 8002aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aa2:	f000 f908 	bl	8002cb6 <__retarget_lock_release_recursive>
 8002aa6:	e7d9      	b.n	8002a5c <_fflush_r+0xc>
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <_fflush_r+0x70>)
 8002aaa:	429c      	cmp	r4, r3
 8002aac:	d101      	bne.n	8002ab2 <_fflush_r+0x62>
 8002aae:	68ac      	ldr	r4, [r5, #8]
 8002ab0:	e7df      	b.n	8002a72 <_fflush_r+0x22>
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <_fflush_r+0x74>)
 8002ab4:	429c      	cmp	r4, r3
 8002ab6:	bf08      	it	eq
 8002ab8:	68ec      	ldreq	r4, [r5, #12]
 8002aba:	e7da      	b.n	8002a72 <_fflush_r+0x22>
 8002abc:	08003168 	.word	0x08003168
 8002ac0:	08003188 	.word	0x08003188
 8002ac4:	08003148 	.word	0x08003148

08002ac8 <std>:
 8002ac8:	2300      	movs	r3, #0
 8002aca:	b510      	push	{r4, lr}
 8002acc:	4604      	mov	r4, r0
 8002ace:	e9c0 3300 	strd	r3, r3, [r0]
 8002ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ad6:	6083      	str	r3, [r0, #8]
 8002ad8:	8181      	strh	r1, [r0, #12]
 8002ada:	6643      	str	r3, [r0, #100]	; 0x64
 8002adc:	81c2      	strh	r2, [r0, #14]
 8002ade:	6183      	str	r3, [r0, #24]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	305c      	adds	r0, #92	; 0x5c
 8002ae6:	f7ff fa5b 	bl	8001fa0 <memset>
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <std+0x38>)
 8002aec:	6263      	str	r3, [r4, #36]	; 0x24
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <std+0x3c>)
 8002af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <std+0x40>)
 8002af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <std+0x44>)
 8002af8:	6224      	str	r4, [r4, #32]
 8002afa:	6323      	str	r3, [r4, #48]	; 0x30
 8002afc:	bd10      	pop	{r4, pc}
 8002afe:	bf00      	nop
 8002b00:	08002e25 	.word	0x08002e25
 8002b04:	08002e47 	.word	0x08002e47
 8002b08:	08002e7f 	.word	0x08002e7f
 8002b0c:	08002ea3 	.word	0x08002ea3

08002b10 <_cleanup_r>:
 8002b10:	4901      	ldr	r1, [pc, #4]	; (8002b18 <_cleanup_r+0x8>)
 8002b12:	f000 b8af 	b.w	8002c74 <_fwalk_reent>
 8002b16:	bf00      	nop
 8002b18:	08002a51 	.word	0x08002a51

08002b1c <__sfmoreglue>:
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	2268      	movs	r2, #104	; 0x68
 8002b20:	1e4d      	subs	r5, r1, #1
 8002b22:	4355      	muls	r5, r2
 8002b24:	460e      	mov	r6, r1
 8002b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b2a:	f7ff faf1 	bl	8002110 <_malloc_r>
 8002b2e:	4604      	mov	r4, r0
 8002b30:	b140      	cbz	r0, 8002b44 <__sfmoreglue+0x28>
 8002b32:	2100      	movs	r1, #0
 8002b34:	e9c0 1600 	strd	r1, r6, [r0]
 8002b38:	300c      	adds	r0, #12
 8002b3a:	60a0      	str	r0, [r4, #8]
 8002b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b40:	f7ff fa2e 	bl	8001fa0 <memset>
 8002b44:	4620      	mov	r0, r4
 8002b46:	bd70      	pop	{r4, r5, r6, pc}

08002b48 <__sfp_lock_acquire>:
 8002b48:	4801      	ldr	r0, [pc, #4]	; (8002b50 <__sfp_lock_acquire+0x8>)
 8002b4a:	f000 b8b3 	b.w	8002cb4 <__retarget_lock_acquire_recursive>
 8002b4e:	bf00      	nop
 8002b50:	20000a15 	.word	0x20000a15

08002b54 <__sfp_lock_release>:
 8002b54:	4801      	ldr	r0, [pc, #4]	; (8002b5c <__sfp_lock_release+0x8>)
 8002b56:	f000 b8ae 	b.w	8002cb6 <__retarget_lock_release_recursive>
 8002b5a:	bf00      	nop
 8002b5c:	20000a15 	.word	0x20000a15

08002b60 <__sinit_lock_acquire>:
 8002b60:	4801      	ldr	r0, [pc, #4]	; (8002b68 <__sinit_lock_acquire+0x8>)
 8002b62:	f000 b8a7 	b.w	8002cb4 <__retarget_lock_acquire_recursive>
 8002b66:	bf00      	nop
 8002b68:	20000a16 	.word	0x20000a16

08002b6c <__sinit_lock_release>:
 8002b6c:	4801      	ldr	r0, [pc, #4]	; (8002b74 <__sinit_lock_release+0x8>)
 8002b6e:	f000 b8a2 	b.w	8002cb6 <__retarget_lock_release_recursive>
 8002b72:	bf00      	nop
 8002b74:	20000a16 	.word	0x20000a16

08002b78 <__sinit>:
 8002b78:	b510      	push	{r4, lr}
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	f7ff fff0 	bl	8002b60 <__sinit_lock_acquire>
 8002b80:	69a3      	ldr	r3, [r4, #24]
 8002b82:	b11b      	cbz	r3, 8002b8c <__sinit+0x14>
 8002b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b88:	f7ff bff0 	b.w	8002b6c <__sinit_lock_release>
 8002b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b90:	6523      	str	r3, [r4, #80]	; 0x50
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <__sinit+0x68>)
 8002b94:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <__sinit+0x6c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b9a:	42a3      	cmp	r3, r4
 8002b9c:	bf04      	itt	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	61a3      	streq	r3, [r4, #24]
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f000 f820 	bl	8002be8 <__sfp>
 8002ba8:	6060      	str	r0, [r4, #4]
 8002baa:	4620      	mov	r0, r4
 8002bac:	f000 f81c 	bl	8002be8 <__sfp>
 8002bb0:	60a0      	str	r0, [r4, #8]
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f000 f818 	bl	8002be8 <__sfp>
 8002bb8:	2200      	movs	r2, #0
 8002bba:	60e0      	str	r0, [r4, #12]
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	6860      	ldr	r0, [r4, #4]
 8002bc0:	f7ff ff82 	bl	8002ac8 <std>
 8002bc4:	68a0      	ldr	r0, [r4, #8]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	2109      	movs	r1, #9
 8002bca:	f7ff ff7d 	bl	8002ac8 <std>
 8002bce:	68e0      	ldr	r0, [r4, #12]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	2112      	movs	r1, #18
 8002bd4:	f7ff ff78 	bl	8002ac8 <std>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	61a3      	str	r3, [r4, #24]
 8002bdc:	e7d2      	b.n	8002b84 <__sinit+0xc>
 8002bde:	bf00      	nop
 8002be0:	0800303c 	.word	0x0800303c
 8002be4:	08002b11 	.word	0x08002b11

08002be8 <__sfp>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	4607      	mov	r7, r0
 8002bec:	f7ff ffac 	bl	8002b48 <__sfp_lock_acquire>
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <__sfp+0x84>)
 8002bf2:	681e      	ldr	r6, [r3, #0]
 8002bf4:	69b3      	ldr	r3, [r6, #24]
 8002bf6:	b913      	cbnz	r3, 8002bfe <__sfp+0x16>
 8002bf8:	4630      	mov	r0, r6
 8002bfa:	f7ff ffbd 	bl	8002b78 <__sinit>
 8002bfe:	3648      	adds	r6, #72	; 0x48
 8002c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	d503      	bpl.n	8002c10 <__sfp+0x28>
 8002c08:	6833      	ldr	r3, [r6, #0]
 8002c0a:	b30b      	cbz	r3, 8002c50 <__sfp+0x68>
 8002c0c:	6836      	ldr	r6, [r6, #0]
 8002c0e:	e7f7      	b.n	8002c00 <__sfp+0x18>
 8002c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c14:	b9d5      	cbnz	r5, 8002c4c <__sfp+0x64>
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <__sfp+0x88>)
 8002c18:	60e3      	str	r3, [r4, #12]
 8002c1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8002c20:	f000 f847 	bl	8002cb2 <__retarget_lock_init_recursive>
 8002c24:	f7ff ff96 	bl	8002b54 <__sfp_lock_release>
 8002c28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c30:	6025      	str	r5, [r4, #0]
 8002c32:	61a5      	str	r5, [r4, #24]
 8002c34:	2208      	movs	r2, #8
 8002c36:	4629      	mov	r1, r5
 8002c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c3c:	f7ff f9b0 	bl	8001fa0 <memset>
 8002c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c48:	4620      	mov	r0, r4
 8002c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c4c:	3468      	adds	r4, #104	; 0x68
 8002c4e:	e7d9      	b.n	8002c04 <__sfp+0x1c>
 8002c50:	2104      	movs	r1, #4
 8002c52:	4638      	mov	r0, r7
 8002c54:	f7ff ff62 	bl	8002b1c <__sfmoreglue>
 8002c58:	4604      	mov	r4, r0
 8002c5a:	6030      	str	r0, [r6, #0]
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d1d5      	bne.n	8002c0c <__sfp+0x24>
 8002c60:	f7ff ff78 	bl	8002b54 <__sfp_lock_release>
 8002c64:	230c      	movs	r3, #12
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	e7ee      	b.n	8002c48 <__sfp+0x60>
 8002c6a:	bf00      	nop
 8002c6c:	0800303c 	.word	0x0800303c
 8002c70:	ffff0001 	.word	0xffff0001

08002c74 <_fwalk_reent>:
 8002c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c78:	4606      	mov	r6, r0
 8002c7a:	4688      	mov	r8, r1
 8002c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c80:	2700      	movs	r7, #0
 8002c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c86:	f1b9 0901 	subs.w	r9, r9, #1
 8002c8a:	d505      	bpl.n	8002c98 <_fwalk_reent+0x24>
 8002c8c:	6824      	ldr	r4, [r4, #0]
 8002c8e:	2c00      	cmp	r4, #0
 8002c90:	d1f7      	bne.n	8002c82 <_fwalk_reent+0xe>
 8002c92:	4638      	mov	r0, r7
 8002c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c98:	89ab      	ldrh	r3, [r5, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d907      	bls.n	8002cae <_fwalk_reent+0x3a>
 8002c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	d003      	beq.n	8002cae <_fwalk_reent+0x3a>
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	4630      	mov	r0, r6
 8002caa:	47c0      	blx	r8
 8002cac:	4307      	orrs	r7, r0
 8002cae:	3568      	adds	r5, #104	; 0x68
 8002cb0:	e7e9      	b.n	8002c86 <_fwalk_reent+0x12>

08002cb2 <__retarget_lock_init_recursive>:
 8002cb2:	4770      	bx	lr

08002cb4 <__retarget_lock_acquire_recursive>:
 8002cb4:	4770      	bx	lr

08002cb6 <__retarget_lock_release_recursive>:
 8002cb6:	4770      	bx	lr

08002cb8 <__swhatbuf_r>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	460e      	mov	r6, r1
 8002cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	b096      	sub	sp, #88	; 0x58
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	da08      	bge.n	8002cdc <__swhatbuf_r+0x24>
 8002cca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	602a      	str	r2, [r5, #0]
 8002cd2:	061a      	lsls	r2, r3, #24
 8002cd4:	d410      	bmi.n	8002cf8 <__swhatbuf_r+0x40>
 8002cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cda:	e00e      	b.n	8002cfa <__swhatbuf_r+0x42>
 8002cdc:	466a      	mov	r2, sp
 8002cde:	f000 f907 	bl	8002ef0 <_fstat_r>
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	dbf1      	blt.n	8002cca <__swhatbuf_r+0x12>
 8002ce6:	9a01      	ldr	r2, [sp, #4]
 8002ce8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002cec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002cf0:	425a      	negs	r2, r3
 8002cf2:	415a      	adcs	r2, r3
 8002cf4:	602a      	str	r2, [r5, #0]
 8002cf6:	e7ee      	b.n	8002cd6 <__swhatbuf_r+0x1e>
 8002cf8:	2340      	movs	r3, #64	; 0x40
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	6023      	str	r3, [r4, #0]
 8002cfe:	b016      	add	sp, #88	; 0x58
 8002d00:	bd70      	pop	{r4, r5, r6, pc}
 8002d02:	0000      	movs	r0, r0

08002d04 <__smakebuf_r>:
 8002d04:	898b      	ldrh	r3, [r1, #12]
 8002d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d08:	079d      	lsls	r5, r3, #30
 8002d0a:	4606      	mov	r6, r0
 8002d0c:	460c      	mov	r4, r1
 8002d0e:	d507      	bpl.n	8002d20 <__smakebuf_r+0x1c>
 8002d10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d14:	6023      	str	r3, [r4, #0]
 8002d16:	6123      	str	r3, [r4, #16]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	6163      	str	r3, [r4, #20]
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}
 8002d20:	ab01      	add	r3, sp, #4
 8002d22:	466a      	mov	r2, sp
 8002d24:	f7ff ffc8 	bl	8002cb8 <__swhatbuf_r>
 8002d28:	9900      	ldr	r1, [sp, #0]
 8002d2a:	4605      	mov	r5, r0
 8002d2c:	4630      	mov	r0, r6
 8002d2e:	f7ff f9ef 	bl	8002110 <_malloc_r>
 8002d32:	b948      	cbnz	r0, 8002d48 <__smakebuf_r+0x44>
 8002d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d38:	059a      	lsls	r2, r3, #22
 8002d3a:	d4ef      	bmi.n	8002d1c <__smakebuf_r+0x18>
 8002d3c:	f023 0303 	bic.w	r3, r3, #3
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	81a3      	strh	r3, [r4, #12]
 8002d46:	e7e3      	b.n	8002d10 <__smakebuf_r+0xc>
 8002d48:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <__smakebuf_r+0x7c>)
 8002d4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	6020      	str	r0, [r4, #0]
 8002d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d54:	81a3      	strh	r3, [r4, #12]
 8002d56:	9b00      	ldr	r3, [sp, #0]
 8002d58:	6163      	str	r3, [r4, #20]
 8002d5a:	9b01      	ldr	r3, [sp, #4]
 8002d5c:	6120      	str	r0, [r4, #16]
 8002d5e:	b15b      	cbz	r3, 8002d78 <__smakebuf_r+0x74>
 8002d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d64:	4630      	mov	r0, r6
 8002d66:	f000 f8d5 	bl	8002f14 <_isatty_r>
 8002d6a:	b128      	cbz	r0, 8002d78 <__smakebuf_r+0x74>
 8002d6c:	89a3      	ldrh	r3, [r4, #12]
 8002d6e:	f023 0303 	bic.w	r3, r3, #3
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	81a3      	strh	r3, [r4, #12]
 8002d78:	89a0      	ldrh	r0, [r4, #12]
 8002d7a:	4305      	orrs	r5, r0
 8002d7c:	81a5      	strh	r5, [r4, #12]
 8002d7e:	e7cd      	b.n	8002d1c <__smakebuf_r+0x18>
 8002d80:	08002b11 	.word	0x08002b11

08002d84 <__malloc_lock>:
 8002d84:	4801      	ldr	r0, [pc, #4]	; (8002d8c <__malloc_lock+0x8>)
 8002d86:	f7ff bf95 	b.w	8002cb4 <__retarget_lock_acquire_recursive>
 8002d8a:	bf00      	nop
 8002d8c:	20000a14 	.word	0x20000a14

08002d90 <__malloc_unlock>:
 8002d90:	4801      	ldr	r0, [pc, #4]	; (8002d98 <__malloc_unlock+0x8>)
 8002d92:	f7ff bf90 	b.w	8002cb6 <__retarget_lock_release_recursive>
 8002d96:	bf00      	nop
 8002d98:	20000a14 	.word	0x20000a14

08002d9c <_raise_r>:
 8002d9c:	291f      	cmp	r1, #31
 8002d9e:	b538      	push	{r3, r4, r5, lr}
 8002da0:	4604      	mov	r4, r0
 8002da2:	460d      	mov	r5, r1
 8002da4:	d904      	bls.n	8002db0 <_raise_r+0x14>
 8002da6:	2316      	movs	r3, #22
 8002da8:	6003      	str	r3, [r0, #0]
 8002daa:	f04f 30ff 	mov.w	r0, #4294967295
 8002dae:	bd38      	pop	{r3, r4, r5, pc}
 8002db0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002db2:	b112      	cbz	r2, 8002dba <_raise_r+0x1e>
 8002db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002db8:	b94b      	cbnz	r3, 8002dce <_raise_r+0x32>
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f000 f830 	bl	8002e20 <_getpid_r>
 8002dc0:	462a      	mov	r2, r5
 8002dc2:	4601      	mov	r1, r0
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dca:	f000 b817 	b.w	8002dfc <_kill_r>
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d00a      	beq.n	8002de8 <_raise_r+0x4c>
 8002dd2:	1c59      	adds	r1, r3, #1
 8002dd4:	d103      	bne.n	8002dde <_raise_r+0x42>
 8002dd6:	2316      	movs	r3, #22
 8002dd8:	6003      	str	r3, [r0, #0]
 8002dda:	2001      	movs	r0, #1
 8002ddc:	e7e7      	b.n	8002dae <_raise_r+0x12>
 8002dde:	2400      	movs	r4, #0
 8002de0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002de4:	4628      	mov	r0, r5
 8002de6:	4798      	blx	r3
 8002de8:	2000      	movs	r0, #0
 8002dea:	e7e0      	b.n	8002dae <_raise_r+0x12>

08002dec <raise>:
 8002dec:	4b02      	ldr	r3, [pc, #8]	; (8002df8 <raise+0xc>)
 8002dee:	4601      	mov	r1, r0
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	f7ff bfd3 	b.w	8002d9c <_raise_r>
 8002df6:	bf00      	nop
 8002df8:	2000020c 	.word	0x2000020c

08002dfc <_kill_r>:
 8002dfc:	b538      	push	{r3, r4, r5, lr}
 8002dfe:	4d07      	ldr	r5, [pc, #28]	; (8002e1c <_kill_r+0x20>)
 8002e00:	2300      	movs	r3, #0
 8002e02:	4604      	mov	r4, r0
 8002e04:	4608      	mov	r0, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	602b      	str	r3, [r5, #0]
 8002e0a:	f000 f8d7 	bl	8002fbc <_kill>
 8002e0e:	1c43      	adds	r3, r0, #1
 8002e10:	d102      	bne.n	8002e18 <_kill_r+0x1c>
 8002e12:	682b      	ldr	r3, [r5, #0]
 8002e14:	b103      	cbz	r3, 8002e18 <_kill_r+0x1c>
 8002e16:	6023      	str	r3, [r4, #0]
 8002e18:	bd38      	pop	{r3, r4, r5, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000a18 	.word	0x20000a18

08002e20 <_getpid_r>:
 8002e20:	f000 b8bc 	b.w	8002f9c <_getpid>

08002e24 <__sread>:
 8002e24:	b510      	push	{r4, lr}
 8002e26:	460c      	mov	r4, r1
 8002e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e2c:	f000 f894 	bl	8002f58 <_read_r>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	bfab      	itete	ge
 8002e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e36:	89a3      	ldrhlt	r3, [r4, #12]
 8002e38:	181b      	addge	r3, r3, r0
 8002e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e3e:	bfac      	ite	ge
 8002e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e42:	81a3      	strhlt	r3, [r4, #12]
 8002e44:	bd10      	pop	{r4, pc}

08002e46 <__swrite>:
 8002e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4a:	461f      	mov	r7, r3
 8002e4c:	898b      	ldrh	r3, [r1, #12]
 8002e4e:	05db      	lsls	r3, r3, #23
 8002e50:	4605      	mov	r5, r0
 8002e52:	460c      	mov	r4, r1
 8002e54:	4616      	mov	r6, r2
 8002e56:	d505      	bpl.n	8002e64 <__swrite+0x1e>
 8002e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f000 f868 	bl	8002f34 <_lseek_r>
 8002e64:	89a3      	ldrh	r3, [r4, #12]
 8002e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e6e:	81a3      	strh	r3, [r4, #12]
 8002e70:	4632      	mov	r2, r6
 8002e72:	463b      	mov	r3, r7
 8002e74:	4628      	mov	r0, r5
 8002e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e7a:	f000 b817 	b.w	8002eac <_write_r>

08002e7e <__sseek>:
 8002e7e:	b510      	push	{r4, lr}
 8002e80:	460c      	mov	r4, r1
 8002e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e86:	f000 f855 	bl	8002f34 <_lseek_r>
 8002e8a:	1c43      	adds	r3, r0, #1
 8002e8c:	89a3      	ldrh	r3, [r4, #12]
 8002e8e:	bf15      	itete	ne
 8002e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e9a:	81a3      	strheq	r3, [r4, #12]
 8002e9c:	bf18      	it	ne
 8002e9e:	81a3      	strhne	r3, [r4, #12]
 8002ea0:	bd10      	pop	{r4, pc}

08002ea2 <__sclose>:
 8002ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea6:	f000 b813 	b.w	8002ed0 <_close_r>
 8002eaa:	0000      	movs	r0, r0

08002eac <_write_r>:
 8002eac:	b538      	push	{r3, r4, r5, lr}
 8002eae:	4d07      	ldr	r5, [pc, #28]	; (8002ecc <_write_r+0x20>)
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	4608      	mov	r0, r1
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	602a      	str	r2, [r5, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f000 f896 	bl	8002fec <_write>
 8002ec0:	1c43      	adds	r3, r0, #1
 8002ec2:	d102      	bne.n	8002eca <_write_r+0x1e>
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	b103      	cbz	r3, 8002eca <_write_r+0x1e>
 8002ec8:	6023      	str	r3, [r4, #0]
 8002eca:	bd38      	pop	{r3, r4, r5, pc}
 8002ecc:	20000a18 	.word	0x20000a18

08002ed0 <_close_r>:
 8002ed0:	b538      	push	{r3, r4, r5, lr}
 8002ed2:	4d06      	ldr	r5, [pc, #24]	; (8002eec <_close_r+0x1c>)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	4608      	mov	r0, r1
 8002eda:	602b      	str	r3, [r5, #0]
 8002edc:	f000 f84e 	bl	8002f7c <_close>
 8002ee0:	1c43      	adds	r3, r0, #1
 8002ee2:	d102      	bne.n	8002eea <_close_r+0x1a>
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	b103      	cbz	r3, 8002eea <_close_r+0x1a>
 8002ee8:	6023      	str	r3, [r4, #0]
 8002eea:	bd38      	pop	{r3, r4, r5, pc}
 8002eec:	20000a18 	.word	0x20000a18

08002ef0 <_fstat_r>:
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	4d07      	ldr	r5, [pc, #28]	; (8002f10 <_fstat_r+0x20>)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	602b      	str	r3, [r5, #0]
 8002efe:	f000 f845 	bl	8002f8c <_fstat>
 8002f02:	1c43      	adds	r3, r0, #1
 8002f04:	d102      	bne.n	8002f0c <_fstat_r+0x1c>
 8002f06:	682b      	ldr	r3, [r5, #0]
 8002f08:	b103      	cbz	r3, 8002f0c <_fstat_r+0x1c>
 8002f0a:	6023      	str	r3, [r4, #0]
 8002f0c:	bd38      	pop	{r3, r4, r5, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000a18 	.word	0x20000a18

08002f14 <_isatty_r>:
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	4d06      	ldr	r5, [pc, #24]	; (8002f30 <_isatty_r+0x1c>)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	4608      	mov	r0, r1
 8002f1e:	602b      	str	r3, [r5, #0]
 8002f20:	f000 f844 	bl	8002fac <_isatty>
 8002f24:	1c43      	adds	r3, r0, #1
 8002f26:	d102      	bne.n	8002f2e <_isatty_r+0x1a>
 8002f28:	682b      	ldr	r3, [r5, #0]
 8002f2a:	b103      	cbz	r3, 8002f2e <_isatty_r+0x1a>
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	bd38      	pop	{r3, r4, r5, pc}
 8002f30:	20000a18 	.word	0x20000a18

08002f34 <_lseek_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	4d07      	ldr	r5, [pc, #28]	; (8002f54 <_lseek_r+0x20>)
 8002f38:	4604      	mov	r4, r0
 8002f3a:	4608      	mov	r0, r1
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	2200      	movs	r2, #0
 8002f40:	602a      	str	r2, [r5, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f000 f842 	bl	8002fcc <_lseek>
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	d102      	bne.n	8002f52 <_lseek_r+0x1e>
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	b103      	cbz	r3, 8002f52 <_lseek_r+0x1e>
 8002f50:	6023      	str	r3, [r4, #0]
 8002f52:	bd38      	pop	{r3, r4, r5, pc}
 8002f54:	20000a18 	.word	0x20000a18

08002f58 <_read_r>:
 8002f58:	b538      	push	{r3, r4, r5, lr}
 8002f5a:	4d07      	ldr	r5, [pc, #28]	; (8002f78 <_read_r+0x20>)
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	4608      	mov	r0, r1
 8002f60:	4611      	mov	r1, r2
 8002f62:	2200      	movs	r2, #0
 8002f64:	602a      	str	r2, [r5, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f000 f838 	bl	8002fdc <_read>
 8002f6c:	1c43      	adds	r3, r0, #1
 8002f6e:	d102      	bne.n	8002f76 <_read_r+0x1e>
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	b103      	cbz	r3, 8002f76 <_read_r+0x1e>
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	bd38      	pop	{r3, r4, r5, pc}
 8002f78:	20000a18 	.word	0x20000a18

08002f7c <_close>:
 8002f7c:	4b02      	ldr	r3, [pc, #8]	; (8002f88 <_close+0xc>)
 8002f7e:	2258      	movs	r2, #88	; 0x58
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	f04f 30ff 	mov.w	r0, #4294967295
 8002f86:	4770      	bx	lr
 8002f88:	20000a18 	.word	0x20000a18

08002f8c <_fstat>:
 8002f8c:	4b02      	ldr	r3, [pc, #8]	; (8002f98 <_fstat+0xc>)
 8002f8e:	2258      	movs	r2, #88	; 0x58
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f04f 30ff 	mov.w	r0, #4294967295
 8002f96:	4770      	bx	lr
 8002f98:	20000a18 	.word	0x20000a18

08002f9c <_getpid>:
 8002f9c:	4b02      	ldr	r3, [pc, #8]	; (8002fa8 <_getpid+0xc>)
 8002f9e:	2258      	movs	r2, #88	; 0x58
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa6:	4770      	bx	lr
 8002fa8:	20000a18 	.word	0x20000a18

08002fac <_isatty>:
 8002fac:	4b02      	ldr	r3, [pc, #8]	; (8002fb8 <_isatty+0xc>)
 8002fae:	2258      	movs	r2, #88	; 0x58
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000a18 	.word	0x20000a18

08002fbc <_kill>:
 8002fbc:	4b02      	ldr	r3, [pc, #8]	; (8002fc8 <_kill+0xc>)
 8002fbe:	2258      	movs	r2, #88	; 0x58
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc6:	4770      	bx	lr
 8002fc8:	20000a18 	.word	0x20000a18

08002fcc <_lseek>:
 8002fcc:	4b02      	ldr	r3, [pc, #8]	; (8002fd8 <_lseek+0xc>)
 8002fce:	2258      	movs	r2, #88	; 0x58
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd6:	4770      	bx	lr
 8002fd8:	20000a18 	.word	0x20000a18

08002fdc <_read>:
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <_read+0xc>)
 8002fde:	2258      	movs	r2, #88	; 0x58
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe6:	4770      	bx	lr
 8002fe8:	20000a18 	.word	0x20000a18

08002fec <_write>:
 8002fec:	4b02      	ldr	r3, [pc, #8]	; (8002ff8 <_write+0xc>)
 8002fee:	2258      	movs	r2, #88	; 0x58
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff6:	4770      	bx	lr
 8002ff8:	20000a18 	.word	0x20000a18

08002ffc <_exit>:
 8002ffc:	e7fe      	b.n	8002ffc <_exit>
 8002ffe:	bf00      	nop

08003000 <_init>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr

0800300c <_fini>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr
